<?php
// $Id$

/**
 * @file
 * The phoneorder_zp module for Ubercart.
 * 
 * Adds a pane to the checkout that allows an extra phoneorder_zp to be made and
 * added to the total.
 * 
 * Coded by: Stephanie Sherriff @ T-Rex Art
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_phoneorder_zp_menu($may_cache){
	$items = array();
  if ($may_cache){
	} else {
		$items[] = array('path' => 'cart/checkout/phoneorder_zp/calculate',
      'access' => user_access('access content'),
      'callback' => 'uc_phoneorder_zp_request_quotes',
      'type' => MENU_CALLBACK_ITEM,
    );
    drupal_add_css(drupal_get_path('module', 'uc_phoneorder_zp') .'/uc_phoneorder_zp.css', 'module');
	}
	return $items;
}

/******************************************************************************
 * Ubercart Hooks                                                               *
 ******************************************************************************/

/**
 * Defines the phoneorder_zp line item.
 */
function uc_phoneorder_zp_line_item(){
  $items[] = array(
    'id' => 'phoneorder_zp',
    'title' => t('phoneorder_zp'),
    'weight' => 2,
    'default' => false,
    'stored' => false,
    'calculated' => true,
    'display_only' => false,
    'add_list' => false,
		'callback' => 'uc_line_item_phoneorder_zp',
  );
  return $items;
}

/**
 * Handle the phoneorder_zp line item.
 */
function uc_line_item_phoneorder_zp($op, $order) {
  switch ($op) {
  	
  		//case 'cart-preview':
		case 'load':

			
			
			
			
			
			
			
			
			
// my changes-----------------------


			
			$zp_default_set = $_SESSION['zp_default_set'];
            //$zp_default_set['phone_order_fee'];
			
			
			$phoneorder_zp = uc_phoneorder_zp_load($order->order_id);
			
			if($phoneorder_zp > 0)
			{
				$lines[] = array(
          		'id' => 'phoneorder_zp',
          		'title' => t('Надбавка за формирование заказа по телефону (' . $zp_default_set['phone_order_fee'] . '% от стоимости простой доставки)'),
          		'amount' => $phoneorder_zp,
        		);
      			return $lines;
			}
			else 	
				return NULL;
  }
}

/**
 * Defines the phoneorder_zp checkout pane.
 */
function uc_phoneorder_zp_checkout_pane(){
  $panes[] = array(
    'id' => 'phoneorder_zp',
    'callback' => 'uc_checkout_pane_phoneorder_zp',
    'title' => t('Надбавка за формирование заказа по телефону'),
    'desc' => t('If you wish to make a phoneorder_zp, please enter an amount here.'),
    'weight' => 5,
    'collapsible' => TRUE,
    'collapsed' => TRUE,
  );
  return $panes;
}

/**
 * phoneorder_zp checkout pane callback.
 *
 * Adds a line item to the order that records the phoneorder_zp.
 */
function uc_checkout_pane_phoneorder_zp($op, $arg1, $arg2) {
	
	
	
	
  switch ($op) {
    case 'view':
    	
      $products = uc_cart_get_contents();
      
      
      
      
      
      
      
      
      
    
    
// my changes
// ------------------------------------------------------    
    
    // посчитаем стоимость простой (не срочной) доставки для продуктов корзины
    
    foreach ($products as $product) 
    {
    	
/*    	
      if (is_null($product->flatrate)) {
        $rate += $method->product_rate * $product->qty;
      }
      else {
        //$node = node_load($product->nid);
        $rate += $product->flatrate[$mid] * $product->qty;
      }
      
*/      
      
      
      
// my changes ------------------------------------------------------------





// my changes ------------------------------------------------------------------------------------------------
    
// для каждого продукта определим его коэффициент доставки
// он должен быть задан в переменной $_SESSION[]
  	
 
  
//--------------------------------------------------------------------------

        // вычисляем коэффициент доставки
        // равный перемноженным коэффициентам страна*город*район*магазин*отдел(ы)*клиент-общий*клиент-по-всей-иерархии-от-отдела-до-страны
        // выясним всю последовательность до страны, затем тиды страны, города, района и магазина
  

        //$node_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid)); 
        $node_tids = taxonomy_node_get_terms_by_vocabulary($product->nid, 1); 
      	
        // определим терм ноды продукта
        foreach($node_tids as $node_tid)
          $node_tid = $node_tid->tid;
      	
      	// определим родителя терма данной ноды. Это будет как раз терм отдела, в котором продаётся этот продукт
        $node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid));
        $parent_otdel_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $node_tid)); 

// ----------------------------------------------------------------------------------------        
        
  // вот теперь выясним, определён ли для этого отдела коэффициент доставки в сессионной переменной
  // он сохраняется по номеру nid отдела
  
  // dobavliaem proverku, otkuda prishel zapros na pokaz producta... esli iz korziny - ne vichisliaem factor dostavki, tak kak tam ne pokazivaetsia cena - sokrashaem vriemia raschetov
  if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))	
  //if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))	
  {  
        // задаём массив и первым элементом делаем терм первого отдела, в котором продаётся этот продукт
        $linage_tids = array($node_tid);
        
      	//$linage_tids[] = $node_tid;
        //$save_node_tid = $node_tid;
        
        $count = 1;
        while(($node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0)
         {
           $linage_tids[] = $node_tid;
           $count++;
         } 

        
        // для примерного понимания... 
        //$item_shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин. 
        //$item_rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
        //$item_city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом после страны
        //$item_country_tid = $linage_tids[$count-1];

        
        for($i = 0; $i <= $count-1; $i++) 
        {
          // начинаем со второго элемента, предполагая, что вторым элементом идёт отдел, в котором находится продукт, потом следуют родительские отделы (если есть), затем магазин, район, город, страна... Страна = $count-1
          // формируем массив нодов с коэфффициентами доставки
          $d_f_nids[$i] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$i])); 
          
          $d_f_nid_titles[$i] = db_result(db_query("SELECT title from {node} WHERE nid = %d", $d_f_nids[$i])); 
          
          // поле с фактором стоимости доставки во всех типах нод называется d_factor
          // соответственно, когда таких полей несколько (одинаковые в разных типах нодов), эти значения хранятся в таблице content_field_d_factor
          // а значение этой переменной содержится в поле field_d_factor_value таблицы которое можно вычислить по номеру ноды nid
          // формируем массив с коэффициентами стоимости доставки
          $d_f_vals[$i] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $d_f_nids[$i])); 
        }
        
        // найдём номер ноды скрытой инфы пользователя
        // считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
        // в принципе, можно потом сделать сложнее - определить пользователя текущей корзины и работать с ним (если админские права позволяю).
        global $user;
  		$user_hi_nid = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi')); 
  		
  		//drupal_set_message("user_hi_nid = $user_hi_nid");
  		
  		//$user_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $user_hi_nid));
  		// дополняем массив с коэффициентами стоимости доствки общим коэффициентом конкретного клиента
  		$d_f_vals[++$i] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $user_hi_nid));
  		

  		
  		// определим для конкретного клиента отличные от единицы коэффициенты для любимых магазинов, отделов и т.д. , в которых находится этот продукт 
		// и затем добавим их в список коэффициентов для этого продукта (отдела, в котором содержится этот продукт, вообще-то)
		
		// структура сохранённой сессионной переменной для конкретного юзера

/*		
		$_SESSION['user_shops_data']
		$user_shops_data[$shop_tid] = array(
                    't_name' => $result->r_text,
                    //'tid' => $shop_tid, // tid выносим в ключ массива ($user_shops_data[$shop_tid])
                    'nid' => $result->r_id,
                    'price_factor' => $result->description,
                    ); 
*/		
		
		$user_shops_data = $_SESSION['user_shops_data'];		
		
		foreach($user_shops_data as $user_shops)
		{
		   //$n = $user_shops['nid'];
		   //$t = $user_shops['t_name'];
		   //$f = $user_shops['price_factor'];
		   //drupal_set_message("before df_user n = $n, t = $t, f = $f");
		    
		   if(in_array($user_shops['nid'], $d_f_nids))
		   {
		   	$d_f_vals[++$i] = $user_shops['price_factor'];	
		    
		    //$n = $user_shops['nid'];
		    //$t = $user_shops['t_name'];
		    //$f = $user_shops['price_factor'];
		    //drupal_set_message("after df_user n = $n, t = $t, f = $f");
		   } 
		}

		
		
/*  		
  		foreach($linage_tids as $key => $value)
  		 drupal_set_message("linage_tids key = $key, val = $value");
  		 
  		
  		foreach($d_f_nids as $key => $value)
  		 drupal_set_message("d_f_nid key = $key, val = $value");
  		 
  		foreach($d_f_nid_titles as $key => $value)
  		 drupal_set_message("d_f_nid_title key = $key, val = $value");
  		
  		foreach($d_f_vals as $key => $value)
  		 drupal_set_message("df key = $key, val = $value");
*/  		


        // перемножаем все коэффициенты и получаем финальный коэффициент
        $final_d_f = 1; 
  		foreach($d_f_vals as $d_f_val)
  		 $final_d_f *= $d_f_val;
  		 
  		//drupal_set_message(" ----final_d_f = $final_d_f"); 
  		//drupal_set_message("---------------------------------------------------");
  		
/*        
        // найдём номера нодов
        $country_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-1])); 
        $city_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-2])); 
        $rajon_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-3])); 
        $shop_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-4])); 
        
        // country_d_factor
        $country_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $country_nid)); 
  		$city_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $city_nid)); 
  		$rajon_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $rajon_nid)); 
  		$shop_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $shop_nid)); 
*/
  		
  		
  		

        //получим из базы значение процента, который определяет стоимость доставки по умолчанию
        //стоимость доставки товара по умолчанию равна стоимости товара, умноженной на процент по умолчанию 
        //и затем умноженной на только что посчитанный финальный коэффициент доставки
        
        // процент доставки по умолчанию берётся с поля типа d_percents (поле field_d_percents_value в таблице content_type_zp_default_set)
        
        // в этом поле значение содержится в виде процента. Поэтому чтобы получить коэффициент, делим это значение на 100.
        
        $zp_default_set = array();
        
        // загружаем из базы массив с переменными по умолчанию
        $zp_default_set = $_SESSION['zp_default_set'];
        
        // если массив пока не определён или в нём не определён параметр nid (номер ноды с параметрами по умолчанию),
        // находим параметр nid и добавляем его в массив
        if(!$zp_default_set OR !$zp_default_set['nid'])
          $zp_default_set['nid'] = db_result(db_query("SELECT nid from {node} WHERE type = '%s'", 'zp_default_set'));
        // делим значение процента доставки на 100 и получаем коэффициент
        if(!$zp_default_set['d_f'])
        {
          // добавляем пустую строку к числу, тем самым преобразуя это число в строку, чтобы поменьше знаков сохранять в базе (без этого сохраняло 20 знаков после запятой почему-то, даже с функцией round)
  		  // заодно округляем до 2 знаков после запятой
          $zp_default_set['d_f'] = round(db_result(db_query("SELECT field_d_percents_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid'])) / 100, 2) . '';
          // сохраняем значение коэффициента доставки по умолчанию в базе (чтобы заново не вычислять для каждого продукта)
          $_SESSION['zp_default_set'] = $zp_default_set;
        }	
        
        // окончательный коэффициент доставки равен коэффициенту по умолчанию $zp_default_set['d_f'], 
        // умноженному на перемноженные все остальные коэффициенты доставки для данного юзера $final_d_f 
        // заодно округляем до 2 знаков после запятой
        $d_factor_otdel = round($final_d_f * $zp_default_set['d_f'], 2) . '';
        
        // сохраним коэффициент доставки для данного отдела в сессионной переменной
        $_SESSION['df' . $parent_otdel_nid] = $d_factor_otdel;
        
        
        
        
  } // end of if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))   
        	  	
  	
  $dost_price = $product->price * $product->qty * $d_factor_otdel;	
  $dost_price_total += $dost_price;	
  	
  	
// ---------------------------------------------------------------------------
      
      
      
      
 } // end of  foreach ($products as $product) 
    
// теперь у нас есть общая стоимость простой (не срочной) доставки
      





      
      // найдём стоимость надбавки за заказ по телефону по умолчанию
      if(!$zp_default_set['phone_order_fee'])
        {
           $zp_default_set = array();
        
           // загружаем из базы массив с переменными по умолчанию
           $zp_default_set = $_SESSION['zp_default_set'];
        
           // если массив пока не определён или в нём не определён параметр nid (номер ноды с параметрами по умолчанию),
           // находим параметр nid и добавляем его в массив
           if(!$zp_default_set OR !$zp_default_set['nid'])
             $zp_default_set['nid'] = db_result(db_query("SELECT nid from {node} WHERE type = '%s'", 'zp_default_set'));
          
             $zp_default_set['phone_order_fee'] = round(db_result(db_query("SELECT field_phone_order_fee_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid'])), 2) . '';
             // сохраняем значение коэффициента доставки по умолчанию в базе (чтобы заново не вычислять для каждого продукта)
             $_SESSION['zp_default_set'] = $zp_default_set;
          
             //$def_phone = $zp_default_set['phone_order_fee'];
      
             //drupal_set_message("def_phone = $def_phone ");
        }	

      
      //print '<PRE>';
      //print_r($products);
      //print '</PRE>';
	  //$def_phone = $zp_default_set['phone_order_fee'];
      
	  
	  
	  //$phone_fee = round(($dost_price_total / 100) * $zp_default_set['phone_order_fee'], 2);
	  $phone_fee = number_format(($dost_price_total / 100) * $zp_default_set['phone_order_fee'], 2, '.', '');
	  //number_format($number, 2, '.', '')
	  
      //drupal_set_message("phone_fee = $phone_fee, dost_price_total = $dost_price_total, def_phone = $def_phone ");

    	
	  //$description = t('If you wish to make an extra phoneorder_zp, you may enter an amount here and it will be added to your total:');
	  $description = t('Если заказ производится по телефону, т.е. товары выбираются нашим оператором под Вашим руководством, 
к стоимости доставки прибавляется также ' . $zp_default_set['phone_order_fee'] . '% от стоимости обычной (не срочной) доставки. Не нужно ничего отмечать в этом поле, 
если Вы сами формируете заказ через Интернет.');

	  /*      
      $contents['phoneorder_zp'] = array(
        '#type' => 'textfield',
        '#title' => t('Сумма надбавки за формирование заказа по телефону, грн.'),
        '#default_value' => $phone_fee, //10, //$default,
        '#disabled' => TRUE,
        '#description' => $zp_default_set['phone_order_fee'] .'% от стоимости обычной, не срочной, доставки',
      );   
      
      
      
      $contents['calculate'] = array(
      	'#type' => 'radios',
   		'#title' => t('Как был сформирован заказ?'),
  		'#default_value' => 0,
  		'#options' => array(t('Самостоятельно клиентом через Интернет (без надбавки)'), t('С помощью оператора по телефону (с надбавкой)')),
      );
      */

      
	  /*
	  // new version
	  $contents['calculate'] = array(
        '#type' => 'textfield',
        '#title' => t('Сумма надбавки за формирование заказа по телефону, грн.'),
        '#default_value' => $phone_fee, //10, //$default,
        '#disabled' => TRUE,
        '#description' => $zp_default_set['phone_order_fee'] .'% от стоимости обычной, не срочной, доставки',
      );   
      */
      
      
      $contents['phoneorder_zp'] = array(
      	'#type' => 'radios',
   		'#title' => t('Как был сформирован заказ?'),
  		'#default_value' => 0,
  		'#options' => array( 0 => 'Самостоятельно клиентом через Интернет (без надбавки)', $phone_fee => 'С помощью оператора по телефону (с надбавкой ' . uc_currency_format($phone_fee) .' )'),
      );
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
      // original version
      /*
      $contents['calculate'] = array(
	    '#type' => 'markup',
        '#value' => '<div id="phoneorder_zp-button" class="phoneorder_zp-button"><img class="icon" src="'. base_path() . drupal_get_path('module', 'uc_store') .'/images/calculator.gif' .'" /> '
                  . t('Click to calculate order with phoneorder_zp.') .'</div>',
      );
      
      */
      
      
      // Эта надпись показывается на странице чекаута, где вычисляются лайн итемсы
	  drupal_add_js(drupal_get_path('module', 'uc_phoneorder_zp') .'/uc_phoneorder_zp.js');
			
	  
	  
	  
// my changes -----------------------------

 

//  original version
	  
	  /*
	  drupal_add_js('$(function(){
    		basePath = "'. base_path() .'";
    		setPhoneorder_ZpCallbacks("' . t('Надбавка за формирование заказа по телефону <br>(' . $zp_default_set['phone_order_fee'] . '% от стоимости простой доставки)') . '"); 
    	
    	   $("#uc-cart-pane-phoneorder_zp").submit(function(){ 
      		Phoneorder_ZpCallback();
      		return false;
    		});
  				})', 'inline');
	*/	
	  
	  
// new version

	 
	  drupal_add_js('$(function(){
    		basePath = "'. base_path() .'";
    		setPhoneorder_ZpCallbacks("' . t('Надбавка за формирование заказа по телефону <br>(' . $zp_default_set['phone_order_fee'] . '% от стоимости простой доставки)') . '"); 
  				})', 'inline');
	  
	 
	  
	  

      return array('description' => $description, 'contents' => $contents);

      
      
      
      
    case 'review':
    	//$phone_fee = $arg1->data['dost_price_total'];
    	//drupal_set_message("phone_fee = $phone_fee ");
    	
    	//print '<PRE>';
         //print_r($arg1);
        //print '</PRE>';
      
        // убираем отображение доплаты за заказ по телефону в отдельном поле в ревью, так как это поле и так присутствует в общем списке стоимости
    	return;
    	
    	
    	
    	$zp_default_set = $_SESSION['zp_default_set'];
		$phoneorder_zp = uc_phoneorder_zp_load($arg1->order_id);
		
      	if ($phoneorder_zp > 0) 
      	{
        	$review[] = array('title' => t('Надбавка за формирование заказа по телефону <br>(' . $zp_default_set['phone_order_fee'] . '% от стоимости простой доставки)'), 'data' => uc_currency_format($phoneorder_zp));
      	}
      	
      	return $review;

      
      
      
      
    case 'process':
    	
      //$test_float = 0.0;
      
      //echo 'process_phone, arg2[phoneorder_zp] = ' . $arg2['phoneorder_zp'] . '<br>';
      //echo 'process_phone, arg2[phoneorder_zp] = ' . ($test_float + $arg2['phoneorder_zp']) . '<br>';
      
      //echo 'process_phone, arg1->order_id = ' . $arg1->order_id . '<br>';

      if ($arg2['phoneorder_zp'] > 0) 
      {
        
      	//echo 'process_phone, arg2[phoneorder_zp] = ' . ($test_float + $arg2['phoneorder_zp']) . '<br>';
      	
      	uc_phoneorder_zp_delete($arg1->order_id);
        uc_phoneorder_zp_save($arg1->order_id, $arg2['phoneorder_zp']);
      }
      else 
      	uc_phoneorder_zp_delete($arg1->order_id);
      
      return TRUE;
  } // end of switch ($op)
}












/******************************************************************************
 * Module and helper functions                                                *
 ******************************************************************************/

/**
 * Insert a phoneorder_zp
 */
function uc_phoneorder_zp_save($order_id, $amount) {
  db_query("INSERT INTO {uc_phoneorder_zp} (order_id, amount, created) "
              ."VALUES (%d, '%s', %d)", $order_id, $amount, time());
}

/**
 * Delete a phoneorder_zp
 */
function uc_phoneorder_zp_delete($order_id) {
  db_query("DELETE FROM {uc_phoneorder_zp} WHERE order_id = %d", $order_id);
}

/**
 * Load a phoneorder_zp
 */
function uc_phoneorder_zp_load($order_id) {
	$amount = 0;
  $result = db_query("SELECT amount FROM {uc_phoneorder_zp} WHERE "
                        ."order_id = %d", $order_id);
	if ($phoneorder_zp = db_fetch_object($result)) {
		$amount = $phoneorder_zp->amount;
	}
	return $amount;
}