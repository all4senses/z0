<?php

function zp_workflowng_intercept_perm() {
  return array('manage ZP Messenger options');
}

/**
 * Implementation of hook_menu().
 */
/*
function zp_workflowng_intercept_menu($may_cache) {
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/store/settings/checkout/zp_workflowng_intercept',
      'title' => t('ZP Messenger settings'),
      'description' => t('Manage ZP Messenger options'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('zp_workflowng_intercept_settings_form'),
      'access' => user_access('manage ZP Messenger options'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}




function zp_workflowng_intercept_settings_form() {
  $per_item = variable_get('zp_workflowng_intercept_per_item', 1);
  $charge = variable_get('zp_workflowng_intercept_charge', 3.00);
  $form['per_item'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge per item rather than per order'),
    '#default_value' => $per_item,
    '#weight' => '1'
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Price per ZP Messenger'),
    '#default_value' => $charge,
    '#weight' => '2'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => '3'
  );
  return $form;
}

*/



/*
function zp_workflowng_intercept_settings_form_submit($form, $form_values) {
  //variable_set('zp_workflowng_intercept_per_item', $form_values['per_item']);
  //variable_set('zp_workflowng_intercept_charge', $form_values['charge']);
}
*/




/**
 * Implementation of hook_configuration().
 *
 * Connect the weightquote action and event.
 */

/*
function zp_workflowng_intercept_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_workflowng_intercept_workflow' => array(
      '#label' => t('Отправлено сообщение через webform'),
      '#event' => 'zp_workflowng_intercept_webform_sent_event',
      '#module' => 'zp_workflowng_intercept',
      '#active' => 0, //$enabled['weightquote'],
    ),
  );

  $action = workflow_ng_use_action('zp_workflowng_intercept_send_sms_action', array(
    '#label' => t('Send SMS to admin(s)'),
  ));
  $configurations['zp_workflowng_intercept_workflow'] = workflow_ng_configure($configurations['zp_workflowng_intercept_workflow'], $action);

  return $configurations;
}
*/  


/*



function uc_usps_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_workflowng_intercept_workflow' => array(
      '#label' => t('Shipping quote from USPS'),
      '#event' => 'get_quote_from_usps',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps'],
    ),
    'uc_usps_get_intl_quote' => array(
      '#label' => t('Shipping quote from USPS Intl.'),
      '#event' => 'get_quote_from_usps_intl',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps_intl'],
    ),
  );
  // Domestic areas include U.S., American Samoa, Guam, Puerto Rico, and the Virgin Islands
  $countries = array(16, 316, 630, 840, 850);
  $us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is in domestic US areas (US, AS, GU, PR, VI)'),
    '#settings' => array(
      'countries' => $countries,
    ),
  ));
  $not_us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is not in domestic US areas (US, AS, GU, PR, VI)'),
    '#negate' => true,
    '#settings' => array(
      'countries' => $countries,
    ),
  ));

  $action = workflow_ng_use_action('uc_quote_action_get_quote', array(
    '#label' => t('Fetch a shipping quote'),
  ));
  $configurations['uc_usps_get_quote'] = workflow_ng_configure($configurations['uc_usps_get_quote'], $action, $us_area_condition);
  $configurations['uc_usps_get_intl_quote'] = workflow_ng_configure($configurations['uc_usps_get_intl_quote'], $action, $not_us_area_condition);

  return $configurations;
} 

*/
 




/*
* Implementation of hook_event_info()
*/

/* // функция, которая задаёт реакцию на событие "Отправлено сообщение с вебформы" для workflow_ng.
// Эта функция определяется в модуле zp_messenger

function zp_workflowng_intercept_event_info() {
  return array(
    'zp_workflowng_intercept_event_1' => array(
      '#label' => t('zp событие 1'),
      '#module' => 'zp_workflowng_intercept',
      '#arguments' => array(
        'arg A' => array('#entity' => 'user', '#label' => t('User arg A, which adds userB.')),
        'arg B' => array('#entity' => 'user', '#label' => t('User arg B, which is added to UserA\'s list.')),
      ),
      '#redirect' => TRUE,
    ),
  );
}
*/




// вызов этой функции должен быть вставлен после первой строчки в функции workflow_ng_invoke_event() в модуле workflow_ng
// там же можно сделать проверку возвращаемого этой функции значения и если будет возвращено 'cancel', выйти из функции workflow_ng_invoke_event()
// таким образом можно перехватывать и отменять события

function zp_workflowng_intercept_event($event_name, $args)
{
  
	switch($event_name)
  	{
  		case 'zp_webform_message_sent': // событие "Отправка письма пользователем через форму на странице контактов"
  		
  			drupal_set_message('Your message was successfully sent!', 'error');
  		
  			//echo '1----event_name = ' . $event_name . '<br>';
  			//drupal_set_message('event_name = ' . $event_name);

  			//print '<PRE>';
  			//print_r($args);
  			//print '</PRE>';
  			
  			// внимание, $args[0] в случае 'zp_webform_message_sent' - массив
  			
  			/*
  			zp_messenger_send_mail( $event_name,
									$from,
									$to, 
									$subject,  
									$message); 
			*/									
									
			// отправим sms, предварительно транслитерируем и урезаем длину (чтобы в мобильник поместилось)
			$message = zp_messenger_make_sms($args[0]['form_values']['submitted_tree']['message']);
			$subject = 'From ContactUs';
  			zp_messenger_send_mail( $event_name,
									$args[0]['form_values']['details']['email_from_address'],
									'right4business@gmail.com', 
									$subject,  
									$message); 
  		
  			break; // end of case 'zp_webform_message_sent': // событие "Отправка письма пользователем через форму на странице контактов"
  		

  		
  		case 'order_status_update': // событие "Изменение статуса заказа" (в том числе, появление нового заказа)
  		
  			//echo '3----event_name = ' . $event_name . '<br>';
  			//echo '3 ---args[0]->order_status = ' . $args[0]->order_status . '<br>';
  			//echo '32 ---args[1]->order_status = ' . $args[1]->order_status . '<br>';
  			
  			// внимание, $args[0] в случае 'order_status_update' - объект
  			
  			if(	$args[1]->order_status == 'pending' // новый статус ордера
  				 AND 
  				$args[0]->order_status == 'in_checkout' // предыдущий статус ордера
  			  )
  			  {
  			  	// имеем новый заказ
  				echo 'new order arrived!';
  				
  				// сообщаем админу по почте и через смс
  				
  				// формируем текст для письма и отсылаем письмо
  				$message = 'Новый заказ № ' . $args[1]->order_id . ' на сумму ' . uc_currency_format($args[1]->order_total)
  							. ' для магазина ' . $args[1]->data['shop_name'] . ' (адрес: ' . $args[1]->data['shop_address'] . ')'
  							. ' от клиента ' . $args[1]->delivery_last_name . ' ' . $args[1]->delivery_first_name . ' ( uid = ' . $args[1]->uid . ')'
  							. ', проживающего по адр. ' . $args[1]->delivery_city . ', ' . $args[1]->delivery_street1;
  							
  				$subject = 'Новый заказ № ' . $args[1]->order_id; 
  				zp_messenger_send_mail( $event_name,
									'alert@zapokupkami.com',
									'right4business@gmail.com', 
									$subject,  
									$message);
  			  	
									
									
									
				// формируем текст для смс и отсылаем смс
  				$message = 'Norder ' . $args[1]->order_id . ': ' . uc_currency_format($args[1]->order_total)
  							. ', ' . $args[1]->data['shop_name'] . ' (' . $args[1]->data['shop_address'] . ')'
  							. ' от клиента ' . $args[1]->delivery_last_name . ' ' . $args[1]->delivery_first_name . ' ( uid = ' . $args[1]->uid . ')'
  							. ', проживающего по адр. ' . $args[1]->delivery_city . ', ' . $args[1]->delivery_street1;
  							
  				$message = zp_messenger_make_sms($message);
  				$subject = 'Norder ' . $args[1]->order_id; 
  				zp_messenger_send_mail( $event_name,
									'alert@zapokupkami.com',
									'right4business@gmail.com', 
									$subject,  
									$message);
									
									
				// тут также необходимо будет выяснять ответственных менеджеров (они должны будут как-то описаны в базе)
				// и отсылать им также письмо и смс
				
				// также необходимо отсылать уведомление о любом изменении статуса заказа клиентом (например, отмена или приостановка заказа)
				
  			  }
  			
  			//print '<PRE>';
  			//print_r($args);
  			//print '</PRE>';  
  		
  			break; // end of case 'order_status_update': // событие "Изменение статуса заказа" (в том числе, появление нового заказа)
  			
  			
  			
  		default:
  			break;
  	
	} // end of switch($event_name)
  
  	
  return;
	
} // end of function zp_workflowng_event($event_name, $args)





?>