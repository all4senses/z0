<?php

function zp_workflowng_intercept_perm() {
  return array('manage ZP Messenger options');
}

/**
 * Implementation of hook_menu().
 */
/*
function zp_workflowng_intercept_menu($may_cache) {
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/store/settings/checkout/zp_workflowng_intercept',
      'title' => t('ZP Messenger settings'),
      'description' => t('Manage ZP Messenger options'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('zp_workflowng_intercept_settings_form'),
      'access' => user_access('manage ZP Messenger options'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}




function zp_workflowng_intercept_settings_form() {
  $per_item = variable_get('zp_workflowng_intercept_per_item', 1);
  $charge = variable_get('zp_workflowng_intercept_charge', 3.00);
  $form['per_item'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge per item rather than per order'),
    '#default_value' => $per_item,
    '#weight' => '1'
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Price per ZP Messenger'),
    '#default_value' => $charge,
    '#weight' => '2'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => '3'
  );
  return $form;
}

*/



/*
function zp_workflowng_intercept_settings_form_submit($form, $form_values) {
  //variable_set('zp_workflowng_intercept_per_item', $form_values['per_item']);
  //variable_set('zp_workflowng_intercept_charge', $form_values['charge']);
}
*/




/**
 * Implementation of hook_configuration().
 *
 * Connect the weightquote action and event.
 */

/*
function zp_workflowng_intercept_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_workflowng_intercept_workflow' => array(
      '#label' => t('Отправлено сообщение через webform'),
      '#event' => 'zp_workflowng_intercept_webform_sent_event',
      '#module' => 'zp_workflowng_intercept',
      '#active' => 0, //$enabled['weightquote'],
    ),
  );

  $action = workflow_ng_use_action('zp_workflowng_intercept_send_sms_action', array(
    '#label' => t('Send SMS to admin(s)'),
  ));
  $configurations['zp_workflowng_intercept_workflow'] = workflow_ng_configure($configurations['zp_workflowng_intercept_workflow'], $action);

  return $configurations;
}
*/  


/*



function uc_usps_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_workflowng_intercept_workflow' => array(
      '#label' => t('Shipping quote from USPS'),
      '#event' => 'get_quote_from_usps',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps'],
    ),
    'uc_usps_get_intl_quote' => array(
      '#label' => t('Shipping quote from USPS Intl.'),
      '#event' => 'get_quote_from_usps_intl',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps_intl'],
    ),
  );
  // Domestic areas include U.S., American Samoa, Guam, Puerto Rico, and the Virgin Islands
  $countries = array(16, 316, 630, 840, 850);
  $us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is in domestic US areas (US, AS, GU, PR, VI)'),
    '#settings' => array(
      'countries' => $countries,
    ),
  ));
  $not_us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is not in domestic US areas (US, AS, GU, PR, VI)'),
    '#negate' => true,
    '#settings' => array(
      'countries' => $countries,
    ),
  ));

  $action = workflow_ng_use_action('uc_quote_action_get_quote', array(
    '#label' => t('Fetch a shipping quote'),
  ));
  $configurations['uc_usps_get_quote'] = workflow_ng_configure($configurations['uc_usps_get_quote'], $action, $us_area_condition);
  $configurations['uc_usps_get_intl_quote'] = workflow_ng_configure($configurations['uc_usps_get_intl_quote'], $action, $not_us_area_condition);

  return $configurations;
} 

*/
 




/*
* Implementation of hook_event_info()
*/

/* // функция, которая задаёт реакцию на событие "Отправлено сообщение с вебформы" для workflow_ng.
// Эта функция определяется в модуле zp_messenger

function zp_workflowng_intercept_event_info() {
  return array(
    'zp_workflowng_intercept_event_1' => array(
      '#label' => t('zp событие 1'),
      '#module' => 'zp_workflowng_intercept',
      '#arguments' => array(
        'arg A' => array('#entity' => 'user', '#label' => t('User arg A, which adds userB.')),
        'arg B' => array('#entity' => 'user', '#label' => t('User arg B, which is added to UserA\'s list.')),
      ),
      '#redirect' => TRUE,
    ),
  );
}
*/




// вызов этой функции должен быть вставлен после первой строчки в функции workflow_ng_invoke_event() в модуле workflow_ng
// там же можно сделать проверку возвращаемого этой функции значения и если будет возвращено 'cancel', выйти из функции workflow_ng_invoke_event()
// таким образом можно перехватывать и отменять события

function zp_workflowng_intercept_event($event_name, $args)
{
  
	//echo 'event_name = ' . $event_name;
	
	switch($event_name)
  	{
  		
  		
  		case 'user_login': // перехватываем момент авторизации и сообщаем об этом админу
  		
  			// не сообщаем об авторизации самого админа
  			if($args[0]['account']->uid != 1)
  			{
  				//zp_functions_show($args);
  				//zp_messenger_inform_admin('user_login', $args[0]['account']->fio);
  				zp_messenger_inform_admin('user_login', array('nick' => $args[0]['account']->name, 'fio' => $args[0]['account']->profile_fio, 'firma' => $args[0]['account']->profile_firma));
  				
  			}
  		
  			break;
  		
  		
  		
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  			
  			
  			
  		case 'zp_webform_message_sent': // событие "Отправка письма пользователем через форму на странице контактов"
  		
  			
  			// это сообщение почему-то выводилось два раза подряд. Поэтому я его вообще убираю
  			//drupal_set_message(t('Your message was successfully sent!'), 'error');
  		
  			//echo '1----event_name = ' . $event_name . '<br>';
  			//drupal_set_message('event_name = ' . $event_name);

  			//print '<PRE>';
  			//print_r($args);
  			//print '</PRE>';
  			
  			// внимание, $args[0] в случае 'zp_webform_message_sent' - массив
  			
						
			zp_messenger_inform_admin('User message from site', $args[0]);
			
			//zp_functions_show($args);
			//return false;
  			
			/*
  			// отправим sms, предварительно транслитерируем и урезаем длину (чтобы в мобильник поместилось)
			$message = zp_messenger_make_sms($args[0]['form_values']['submitted_tree']['message']);
			$subject = 'From ContactUs';
  			zp_messenger_send_mail( $event_name, // $event_name,
									$args[0]['form_values']['details']['email_from_address'], // $from,
									'right4business@gmail.com', // $to, 
									$subject,  // $subject, 
									$message // $message
								  ); 
			*/
  		
								  
								  
  			break; // end of case 'zp_webform_message_sent': // событие "Отправка письма пользователем через форму на странице контактов"
  		
  		
  		
  			
  			
  			
  			
  			
  			
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  		
  			
  		case 'order_content_update': // событие "Изменение содержимого заказа", возникает при нажатии на кнопку "Сообшить об изменении заказа" на странице изменения заказа админом
  				
			  		
  			// сообщаем админу по почте и через смс
  			zp_messenger_inform_admin('Updated New order', $args[1]);
  		
  			
  			// тут также необходимо будет выяснять ответственных менеджеров (они должны будут как-то описаны в базе)
			// и отсылать им также письмо и смс
				
			// также можно отсылать уведомление о любом изменении статуса заказа клиентом (например, отмена или приостановка заказа)
  		
  			break;
  			
  			
  			
  			
  			
  			
  			
  		
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  

  		
  		case 'order_status_update': // событие "Изменение статуса заказа" (в том числе, появление нового заказа)
  		
  			// внимание, $args[0] в случае 'order_status_update' - объект, а не массив
  			
  			//echo '----event_name = ' . $event_name . '<br>';
  			//echo 'Before---args[0]->order_status = ' . $args[0]->order_status . '<br>';
  			//echo 'After---args[1]->order_status = ' . $args[1]->order_status . '<br>';
  			
  			
  			// при установке определённых статусов заказа проверить и обновить цены на товары в заказе
  			// вдруг в основной базе они успели измениться, пока заказ ждал своего выполнения...
  			if(	$args[1]->order_status == 'approved_waiting_delivery'
  				or
  				$args[1]->order_status == 'processing'
  				or
  				$args[1]->order_status == 'approved_waiting_delivery'
  				or
  				$args[1]->order_status == 'stopped'
  				or
  				$args[1]->order_status == 'canceled'
  				)
  				{
  					// загружаем заново заказ, только если изменились цены
  					if(zp_order_change_set_uptodate_prices_in_order($args[1]->order_id))	
  						$args[1] = uc_order_load($args[1]->order_id);
  				}
  				
  				
  				//zp_functions_show($args[1]);	
  				
  				
  			// реакция на подтверждённый и заказ, который передан на доставку
  			if(	$args[1]->order_status == 'approved_waiting_delivery' // новый статус ордера
  				 //AND 
  				//$args[0]->order_status == 'processing' // предыдущий статус ордера
  			  )
  			  {
  				// сообщаем админу по почте и через смс
  				zp_messenger_inform_admin('Approved New order', $args[1]);
  			  	
  			  	// теперь можно и клиенту отослать подтверждённый заказ
  			  	zp_messenger_inform_user('Approved New order', $args[1]);
  				
  				// тут также необходимо будет выяснять ответственных менеджеров (они должны будут как-то описаны в базе)
				// и отсылать им также письмо и смс
				
				// также можно отсылать уведомление о любом изменении статуса заказа клиентом (например, отмена или приостановка заказа)
  			  	
  			  }
  			
  			  
  			    
  		
  		// --------------------------------------------------------------------------------------------  
  			  
  			
  			// реакция на новый заказ, поступивший из корзины
  			else
  			if(	$args[1]->order_status == 'pending' // новый статус ордера
  				 AND 
  				$args[0]->order_status == 'in_checkout' // предыдущий статус ордера
  			  )
  			  {
  			  	
  			  	// имеем новый заказ
  				
  				
  				// сообщаем админу по почте и через смс
  				zp_messenger_inform_admin('New order', $args[1]);
  				
  			
				// клиенту отсылаем содержимое заказа для ознакомления
  			  	zp_messenger_inform_user('New order', $args[1]);			
									
				// тут также необходимо будет выяснять ответственных менеджеров (они должны будут как-то описаны в базе)
				// и отсылать им также письмо и смс
				
				// также можно отсылать уведомление о любом изменении статуса заказа клиентом (например, отмена или приостановка заказа)
				
  			  }
  			
  			//print '<PRE>';
  			//print_r($args);
  			//print '</PRE>';  
  		
  			break; // end of case 'order_status_update': // событие "Изменение статуса заказа" (в том числе, появление нового заказа)
  		
  				
		
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  
  		// --------------------------------------------------------------------------------------------  

  			 			
  			
  		default:
  			break;
  	
	} // end of switch($event_name)
  
  	
  return;
	
} // end of function zp_workflowng_event($event_name, $args)





?>