<?php  	

/**
 * Implements hook_menu().
 */


function zp_functions_menu() {
  
  $items = array();

  if (!$may_cache) {
  //if (1) { 
     
//    $items[] = array(
//      'path' => 'search', 
//      'title' => t('Поиск товаров и статей по сайту'), 
//      'callback' => 'zp_functions_searchPage', 
//      'access' => user_access('access content'), 
//      'type' => MENU_CALLBACK,
//    );
    
    $items[] = array(
      'path' => 'fix_tr', 
      'title' => t('Fix translation'), 
      'callback' => 'zp_functions_fix_tr_ajax', 
      'access' => user_access('access content'), 
      'type' => MENU_CALLBACK,
    );
    
    $items[] = array(
      'path' => 'get_header', 
      //'title' => t('Fix translation'), 
      'callback' => 'zp_functions_get_header_ajax', 
      'access' => user_access('access content'), 
      'type' => MENU_CALLBACK,
    );
    
    $items[] = array(
      'path' => 'get_user', 
      //'title' => t('Fix translation'), 
      'callback' => 'zp_functions_get_user_ajax', 
      'access' => user_access('access content'), 
      'type' => MENU_CALLBACK,
    );
    
    $items[] = array(
      'path' => 'get_gooimages', 
      'callback' => 'zp_functions_get_gooimages_ajax', 
      'access' => user_access('access content'), 
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}


function zp_functions_hide_gooimages_ajax($post) {
  if (!empty($post['bar'])) {
    if($google_images_object = db_fetch_object(db_query("SELECT * FROM {zp_google_images} WHERE bar = '%s'", $post['bar'])))
    {
        $clicks = $google_images_object->clicks;
        $google_responses = unserialize($google_images_object->json);
        $google_responses[$post['index_to_hide']]['hidden'] = ($post['op'] == 'unhide' ? FALSE : TRUE);
        //$other_data = unserialize($google_images_object->other_data);
        db_query("UPDATE {zp_google_images} SET json = '%s' WHERE bar = '%s'", serialize($google_responses), $post['bar']);
        
        global $user;
        if ($google_responses[$post['index_to_hide']]['hidden'] && $user->uid != 1) {
          zp_messenger_inform_admin('New hide on Google Search Images', array('nid' => $post['nid'], 'title' => str_replace('&quot;', '"', $post['title']), 'clicks' => $clicks, 'results_title' => $google_responses[$post['index_to_hide']]['title']));
        }
    }
  } 
  
  
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');
  echo json_encode(array('status' => TRUE
      //, 'data' => $out, 
      //'string' => $string, 'string_url' => $string_url,
      //'title' => $post['title'], 'title_corrected' => $post['title_corrected'], 
      //'title_rus' => $post['title_rus'], 'title_rus_corrected' => str_replace(array('&amp;', 'quot;'), '', $post['title_rus']),
      //'podgruppa' => $post['podgruppa']
      
    ));
  
}


function zp_functions_get_gooimages_ajax() {
  
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain($value);
  }
  
  if ($post['op'] == 'hide' || $post['op'] == 'unhide') {
    zp_functions_hide_gooimages_ajax($post);
    exit;
  }
  
  //global $user;
  //if ($user->uid == 1) 
  {
    zp_functions_get_gooimages_ajax_admin($post);
    exit;
  }
  
  if (empty($post['bar'])) {
    $out = '<div class="google-notice"><div class="google-not-found">Нет совпадений.</div></div>';
  }
  else {
    
    global $user;
    $clicks = 1;
    if($google_images_object = db_fetch_object(db_query("SELECT * FROM {zp_google_images} WHERE bar = '%s'", $post['bar'])))
    {
        $clicks = $google_images_object->clicks + 1;
        $google_data = unserialize($google_images_object->json);
        $other_data = unserialize($google_images_object->other_data);
        db_query("UPDATE {zp_google_images} SET clicks = '%d' WHERE bar = '%s'", $clicks, $post['bar']);
    }
    else {
      
      $other_data = array('ipath' => 'files/p_gooimages/' . $post['ipath']);
      
      $url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=' . urlencode($post['bar']);
      $json = zp_functions_curl_get($url);
      $google_data = json_decode($json);
    
      if (!empty($google_data->responseData->results)) {
        
        foreach ($google_data->responseData->results as $key => $result) {
          $file_local_abs = $other_data['ipath'] . '/' . $post['bar'] . '_' . $key . '.jpg';
          zp_functions_curl_file_from_remote_site_likeBrowser($result->tbUrl, $file_local_abs, $other_data['ipath']); 
        }
        
      }
      else {

        // Try to find images by title and topic
        
        if (strpos($post['podgruppa'], 'Прочее') === FALSE && strpos($post['podgruppa'], 'Прочие') === FALSE) {
          $post['podgruppa'] = $post['podgruppa'] . ' ';
        }
        else {
          $post['podgruppa'] = '';
        }
        
        $post['title_rus'] = str_replace(array('&amp;', 'quot;'), '', $post['title_rus']);
        $string_url = urlencode($post['podgruppa'] . $post['title_rus']);
                
        $url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=' . $string_url;
        
        $json = zp_functions_curl_get($url);
        $google_data = json_decode($json);
      
        if (!empty($google_data->responseData->results)) {
        
          foreach ($google_data->responseData->results as $key => $result) {
            $file_local_abs = $other_data['ipath'] . '/' . $post['bar'] . '_' . $key . '.jpg';
            zp_functions_curl_file_from_remote_site_likeBrowser($result->tbUrl, $file_local_abs, $other_data['ipath']); 
          }

        }
        
      }
      
      db_query("INSERT INTO {zp_google_images} (bar, clicks, title, nid, json, other_data, timestamp) VALUES ('%s', '%d', '%s', '%d', '%s', '%s', %d)", $post['bar'], $clicks, str_replace('&quot;', '"', $post['title']), $post['nid'], serialize($google_data), serialize($other_data), time());
      
    }  // End of else of if($google_object = db_fetch_object(db_query("SELECT * FROM {zp_google_images} WHERE nid = %d", $_POST['bar'])))
    
    $out = '<div class="google-notice">';
    if ($user->uid == 1) {$out .= '<div class="clicks">Кликов: ' . $clicks . '</div>';}
    
    $empty_results = FALSE;
    if (empty($google_data->responseData->results)) {
      $out .= '<div class="google-not-found">Нет совпадений.</div></div>';
      $empty_results = TRUE;
    }
    else {
      $out .= '<div class="explain">
                <strong>Внимание!</strong><br/> Некоторые или даже все найденные и показанные тут изображения <strong>могут не вполне или совсем не соответствовать</strong> реальному фото товара и <strong>не могут быть основанием для претензий</strong> к виду/дизайну/форме/размеру и т.д. реального товара!!!
            </div>
            </div>';

      foreach ($google_data->responseData->results as $key => $result) {
          $out .= '<div class="google-image"><img src="/' . $other_data['ipath'] . '/' . $post['bar'] . '_' . $key . '.jpg' . '" title="' . $result->contentNoFormatting . '"/></div>';
      }
    }
    
    if ($user->uid != 1) {
      zp_messenger_inform_admin('New click on Google Search Images', array('nid' => $post['nid'], 'title' => str_replace('&quot;', '"', $post['title']), 'clicks' => $clicks, 'empty_results' => $empty_results));
    }    
    

  }
  
  
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');
  echo json_encode(array('status' => TRUE, 'data' => $out, 
      //'string' => $string, 'string_url' => $string_url,
      //'title' => $post['title'], 'title_corrected' => $post['title_corrected'], 
      //'title_rus' => $post['title_rus'], 'title_rus_corrected' => str_replace(array('&amp;', 'quot;'), '', $post['title_rus']),
      //'podgruppa' => $post['podgruppa']
      
    ));
}


function zp_functions_get_gooimages_ajax_admin($post) {
  
  $out[0] = NULL;
  $out[1] = NULL;
  
  if (!empty($post['bar'])) {
    
    global $user;
    $clicks = 1;
    
    if (strpos($post['podgruppa'], 'Прочее') === FALSE && strpos($post['podgruppa'], 'Прочие') === FALSE) {
        $post['podgruppa'] = $post['podgruppa'] . ' ';
    }
    else {
      $post['podgruppa'] = '';
    }

    $post['title_rus'] = str_replace(array('&amp;', 'quot;'), '', $post['title_rus']);
    $string_url = urlencode($post['podgruppa'] . $post['title_rus']);
  
    if($google_images_object = db_fetch_object(db_query("SELECT * FROM {zp_google_images} WHERE bar = '%s'", $post['bar'])))
    {
        $clicks = $google_images_object->clicks + 1;
        $google_responses = unserialize($google_images_object->json);
        $other_data = unserialize($google_images_object->other_data);
        db_query("UPDATE {zp_google_images} SET clicks = '%d' WHERE bar = '%s'", $clicks, $post['bar']);
    }
    else 
    {
      
      // Try to find images by bar-code. ------------------------------------------------------------>
      
      $response_key = 0;
      
      $other_data = array('ipath' => 'files/p_gooimages/' . $post['ipath']);
      
      $url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=' . urlencode($post['bar']);
      $json = zp_functions_curl_get($url);
      $google_data = json_decode($json);
    
      
      
      if (!empty($google_data->responseData->results)) {
        
        foreach ($google_data->responseData->results as $key => $result) {
          $file_local_abs = $other_data['ipath'] . '/' . $post['bar'] . '_' . $response_key . '_' . $key . '.jpg';
          zp_functions_curl_file_from_remote_site_likeBrowser($result->tbUrl, $file_local_abs, $other_data['ipath']); 
        }
        
        $empty = FALSE;
      }
      else {
        $empty = TRUE;
      }
      
      $google_responses[$response_key] = array(
        'title' => 'Поиск по штрих-коду',
        'data' => $google_data,
        'empty' => $empty,
        'hidden' => FALSE,
      );
      
      
      // Try to find images by title and topic. ------------------------------------------------------------>
      
      $response_key = 1;
      
      
      $url = 'http://ajax.googleapis.com/ajax/services/search/images?v=1.0&q=' . $string_url;

      $json = zp_functions_curl_get($url);
      $google_data = json_decode($json);

      if (!empty($google_data->responseData->results)) {

        foreach ($google_data->responseData->results as $key => $result) {
          $file_local_abs = $other_data['ipath'] . '/' . $post['bar'] . '_' . $response_key . '_' . $key . '.jpg';
          zp_functions_curl_file_from_remote_site_likeBrowser($result->tbUrl, $file_local_abs, $other_data['ipath']); 
        }

        $empty = FALSE;
      }
      else {
        $empty = TRUE;
      }
      
      $google_responses[$response_key] = array(
        'title' => 'Поиск по названию',
        'data' => $google_data,
        'empty' => $empty,  
        'hidden' => FALSE,
      );
        
      
      db_query("INSERT INTO {zp_google_images} (bar, clicks, title, nid, json, other_data, timestamp) VALUES ('%s', '%d', '%s', '%d', '%s', '%s', %d)", $post['bar'], $clicks, str_replace('&quot;', '"', $post['title']), $post['nid'], serialize($google_responses), serialize($other_data), time());
      
    }  // End of else of if($google_object = db_fetch_object(db_query("SELECT * FROM {zp_google_images} WHERE nid = %d", $_POST['bar'])))
    
    
    
    // If not empty, show pictures. ------------------------------------------------------------>
    
    $empty_results = FALSE;
    foreach ($google_responses as $google_response) {
      if(!$google_response['empty'] && !$google_response['hidden']) {
        $empty_results = TRUE;
        break;
      }
    }
    
    foreach ($google_responses as $response_key => $google_response) {
      $google_data = $google_response['data'];
      if (!$google_response['empty'] && (!$google_response['hidden'] || $user->uid == 1)) {
        
        foreach ($google_data->responseData->results as $key => $result) {
            $out[$response_key] .= '<div class="google-image"><img src="/' . $other_data['ipath'] . '/' . $post['bar'] . '_' . $response_key . '_' . $key . '.jpg' . '" title="' . $result->contentNoFormatting . '"/></div>';
        }
      }
    }
    
    if ($user->uid != 1) {
      zp_messenger_inform_admin('New click on Google Search Images', array('nid' => $post['nid'], 'title' => str_replace('&quot;', '"', $post['title']), 'clicks' => $clicks, 'empty_results' => $empty_results));
    }    
    

  }
  
  
  drupal_set_header('Content-Type: text/javascript; charset=utf-8');
  echo json_encode(array('status' => TRUE, 'out_0' => $out[0], 'out_0_title' => $google_responses[0]['title'], 'out_1' => $out[1], 'out_1_title' => $google_responses[1]['title'], 'uid' => $user->uid, 'clicks' => $clicks, 'out_0_hidden' => $google_responses[0]['hidden'], 'out_0_hidden' => $google_responses[0]['hidden'],
      //'google_responses' => $google_responses
      'string' => $string, 'string_url' => $string_url,
      //'title' => $post['title'], 'title_corrected' => $post['title_corrected'], 
      //'title_rus' => $post['title_rus'], 'title_rus_corrected' => str_replace(array('&amp;', 'quot;'), '', $post['title_rus']),
      //'podgruppa' => $post['podgruppa']
      
    ));
}


/**
 * Socialite social buttons.
 */
function zp_functions_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://' . $_SERVER['SERVER_NAME'] . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  drupal_add_js('sites/all/modules/_ZP_modules/_JS/zp_addSocialite.js');
  
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
      <li class="social-divide"></li>
      <li><a href="http://vkontakte.ru/share.php?url=' . $url . '" class="socialite vkontakte-like" data-type="mini" data-text="Vkon" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on VK</span></a></li>
      <li><a href="http://connect.mail.ru/share?url=' . $url . '" class="socialite mailru-like mrc__plugin_uber_like_button" data-mrc-config=' . '"' . "{'nt' : '1', 'cm' : '3', 'ck' : '3', 'sz' : '20', 'st' : '2', 'tp' : 'combo'}" . '"' .  ' data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Mail.ru</span></a></li>  
		</ul>
  ';
  
  return $out;
}


function zp_functions_curl_get($url)
{
    $c = curl_init();

    curl_setopt($c, CURLOPT_URL, $url);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    //curl_setopt($c, CURLOPT_REFERER, "http://gritsinger.com");
    $b = curl_exec($c);
    curl_close($c);
    
    return $b;
}
    

/**
 * Get a picture from a remote server.
 */
function zp_functions_curl_file_from_remote_site_likeBrowser($url, $file_local_abs, $path_local_abs = NULL)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    if ($path_local_abs && !file_exists($path_local_abs)) {
      mkdir($path_local_abs, 0777, TRUE);
    }
    file_put_contents($file_local_abs, $data);

    return null; //OK
}



//function zp_functions_searchPage(){
//  return 'Поиск товаров и статей по сайту';
//}


function _dpr($var)
{
    echo '<PRE>' . print_r($var, true) . '</PRE>';
}



function zp_functions_get_user_ajax()
{
    global $user;
    $var = array();
    
    if($_POST['op'] == 'user')
    {
        if ($user->uid) {
          zp_functions_setUserMenu_andSession($user, $vars, NULL, $_POST['url']);
          $status = 1;
        }
        else {
          $status = 0;
        }
        
        drupal_set_header('Content-Type: text/javascript; charset=utf-8');
        echo json_encode(array('status' => TRUE, 
                               'user_menu' => $status ? $vars['user_menu'] : 0,
                               'status' => $status,
                               'url' => $_POST['url'],
                            )
                        );
        
    }
   
}




function zp_functions_get_header_ajax()
{
    global $user;
    $var = array();
    $cur_shop_info = $argument_shop_tid = $argument_rajon_tid = $argument_city_tid = $argument_country_tid = null;
    
    $linage = zp_functions_setCurrentPlaceLinage_andSession($_POST['zp_place_tid'], $_POST['zp_place_type']);
    zp_functions_setCitiesMenuSecond_andSession($vars);
    zp_functions_setSecondMenu_andSession('node', $_POST['zp_nid'], $_POST['zp_node_type'], $vars, $cur_shop_info, $argument_shop_tid, $argument_rajon_tid, $argument_city_tid, $argument_country_tid);
    zp_functions_setCurrentPlace_defaultSecondMenu_andSession($vars, true);
    
    if($_POST['op'] == 'breadcrumb')
    {
        
        //zp_functions_setPageInfo_andSession($vars, $cur_shop_info, $cur_shop_tid, $argument_rajon_tid, $argument_city_tid, $argument_country_tid);
        //zp_function_setHeaderPic($vars, $_POST['zp_nid'], true);
        zp_functions_setBreadCrumb_andSession($vars, 'node', $_POST['zp_nid'], $_POST['zp_node_type'], true);
        //$zp_place = zp_functions_getCurrentPlaceTid();

        drupal_set_header('Content-Type: text/javascript; charset=utf-8');
        echo json_encode(array('status' => TRUE, 
                                //'data' => $_POST, 
                                'c_breadcrumb' => $vars['c_breadcrumb'],
                                //'cities_menu_second' => $vars['cities_menu_second'],
                                'second_menu' => $vars['second_menu'],
                                //'current_place' => $vars['current_place'],
                                //'zp_place_tid' => $zp_place['tid'],
                            )
                        );
        
    }
    else
    {
        zp_functions_setPageInfo_andSession($vars, $cur_shop_info, $cur_shop_tid, $argument_rajon_tid, $argument_city_tid, $argument_country_tid);
        if($_POST['zp_nid'] != 1) // if not a home page, get pic
            zp_function_setHeaderPic($vars, $_POST['zp_nid'], true);
        zp_functions_setBreadCrumb_andSession($vars, 'node', $_POST['zp_nid'], $_POST['zp_node_type'], true);
        //$zp_place= zp_functions_getCurrentPlaceTid();

        drupal_set_header('Content-Type: text/javascript; charset=utf-8');
        echo json_encode(array('status' => TRUE, 
                                //'data' => $_POST, 
                                //'cities_menu_second' => $vars['cities_menu_second'],
                                'second_menu' => $vars['second_menu'],
                                'current_page_info' => $vars['current_page_info'],
                                //'current_place' => $vars['current_place'],
                                //'zp_place_tid' => $zp_place['tid'],
                                'header_pic' => $_POST['zp_nid'] != 1?$vars['header_pic']:null,
                                'c_breadcrumb' => $vars['c_breadcrumb'],
                                //'zp_place_nid' => $nodes = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $_POST['zp_place_tid'])),
                                //'linage' => $linage,
                            )
                        );
    }
}



function zp_functions_fix_tr_ajax(){
    
    global $user;
    
    /*
    // get current data
    $data = db_result(db_query("SELECT field_prodtype_pic_src_n_num_value FROM {content_field_prodtype_pic_src_n_num} WHERE nid = %d", $_POST['node_nid']));
    $data = explode(";", $data);

    if($_POST['op'] == 'fix')
        $string = str_replace(array('"', "'"), '', $_POST['string']);
    else
    {
        $string = explode('?', $data[4]);
        $string = str_replace(array('"', "'"), '', $string[1]);
    }
    if($user->uid == 1)
        zp_functions_saveTitleTranslation($_POST['node_nid'], $data, $string, 'zp');
    else
    {
        zp_functions_saveTitleTranslation($_POST['node_nid'], $data, $string, '?', true);
        // inform admin about new translation suggested
  	zp_messenger_inform_admin('New translation suggested', array('node_nid'=>$_POST['node_nid'], 'translation'=>$string));
    }
    */
    
   
    if($translate_object = db_fetch_object(db_query("SELECT * FROM {titles_translations} WHERE nid = %d", $_POST['node_nid'])))
    {
        if($_POST['op'] == 'agree')
            $suggested = str_replace('?', '', $translate_object->ru_suggested);
        else
            $suggested = $_POST['string'];
        
        if($user->uid == 1)
            zp_functions_saveTitleTranslation_separateDb($_POST['node_nid'], $translate_object->uk, $suggested, 'zp', false, true);
        else
        {
            zp_functions_saveTitleTranslation_separateDb($_POST['node_nid'], $translate_object->uk, $suggested, '?', true);
            // inform admin about new translation suggested
            zp_messenger_inform_admin('New translation suggested', array('node_nid'=>$_POST['node_nid'], 'translation'=>$suggested));
        }
     
        
    }
    
    
    
    drupal_set_header('Content-Type: text/javascript; charset=utf-8');
    echo json_encode(array('status' => TRUE, 'data' => $_POST));
}



function zp_functions_prepareSomeData(&$vars, $user_uid = null)
{
    $vars['photo_data'] = explode(";", $vars['node']->field_prodtype_pic_src_n_num[0]['view']);
    //$photo_data[0] - type of product
    //$photo_data[1] - source of pics
    //$photo_data[2] - num of pics
    
    //$photo_data[3] - uk-ru translation
    //$photo_data[4] - status of translation -> null - open for retranslate, zp - closed for retranslate
    
    $api = 'Google'; 
    //$api = 'Bing'; 
    
    //if($user_uid == 1)
    $vars['ukToRu_translate'] = null;
    $vars['translate_suggested'] = null;
    
    global $user;
    
    
    //if($vars['node']->nid == 19261 AND $api == 'Google')
    //if($user->uid ==1 AND $api == 'Google')
    if($api == 'Google')
    {
        
        
        //if(1)
        if(!$translate_object = db_fetch_object(db_query("SELECT * FROM {titles_translations} WHERE nid = %d", $vars['node']->nid)))
        {
            
            $s_text = trim($vars['node']->title);
            $translated = trim(zp_functions_googleTranslateV2($s_text));
            
            if($translated AND $translated == $s_text)
                $translated = '=';
            
            if($translated)
            {
                if($translated == $s_text)
                    $translated = '=';
                else
                    $vars['ukToRu_translate'] = $translated;
                
                zp_functions_saveTitleTranslation_separateDb($vars['node']->nid, $vars['node']->title, $vars['ukToRu_translate']);
            }
            

        }
        else
        {
            
            if($translate_object->ru != '=')
                $vars['ukToRu_translate'] = $translate_object->ru;

            $vars['translate_suggested'] = $translate_object->ru_suggested;
        }
        
    }
    elseif($api == 'Bing')
    {
        if(!$vars['ukToRu_translate'] = $vars['photo_data'][3])
        {
            // clear all ", because it cause problems later on while exploding data string by ;
            $s_text = str_replace('"', '', $vars['node']->title);
            $translated = str_replace('  ', ' ', trim(zp_functions_bingTranslate($s_text)));
            $vars['ukToRu_translate'] = ($translated == $s_text)?'=':$translated;
            zp_functions_saveTitleTranslation($vars['node']->nid, $vars['photo_data'], $vars['ukToRu_translate']);
        }
        
        $vars['translate_suggested'] = $vars['photo_data'][4];
            
        
    }
    
   

}



function zp_functions_googleTranslateV2($s_text, $s_lang = 'uk', $d_lang = 'ru') {

    //$url = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&amp;q=".urlencode($s_text)."&amp;langpair=".urlencode($s_lang.'|'.$d_lang); $c = curl_init();
    ////$url = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=" . urlencode($s_text) . "&langpair=" . urlencode($s_lang . '|' . $d_lang);
    
    $api_key = 'AIzaSyBbHSsRwh-AC9ge_qRRMdEzXYHpZ3GAOaA';
    
    $url = 'https://www.googleapis.com/language/translate/v2?key=' . $api_key . '&q=' . urlencode($s_text) . '&source=' . $s_lang . '&target=' . $d_lang;
    
    $c = curl_init();

    curl_setopt($c, CURLOPT_URL, $url);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    //curl_setopt($c, CURLOPT_REFERER, "http://gritsinger.com");
    $b = curl_exec($c);
    curl_close($c);
    $json = json_decode($b, true);
    
    //_dpr($json);
    //die;
    /*
    if ($json['responseStatus'] != 200)
        return false;
    return $json['responseData']['translatedText'];
    */
                        
    if(isset($json['data']['translations'][0]['translatedText']) AND $json['data']['translations'][0]['translatedText'])
        return $json['data']['translations'][0]['translatedText'];
    else
        return false;
}


function zp_functions_googleTranslate($s_text, $s_lang = 'uk', $d_lang = 'ru') {

    //$url = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&amp;q=".urlencode($s_text)."&amp;langpair=".urlencode($s_lang.'|'.$d_lang); $c = curl_init();
    $url = "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=" . urlencode($s_text) . "&langpair=" . urlencode($s_lang . '|' . $d_lang);
    $c = curl_init();

    curl_setopt($c, CURLOPT_URL, $url);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    //curl_setopt($c, CURLOPT_REFERER, "http://gritsinger.com");
    $b = curl_exec($c);
    curl_close($c);
    $json = json_decode($b, true);
    if ($json['responseStatus'] != 200)
        return false;
    return $json['responseData']['translatedText'];
}


function zp_functions_saveTitleTranslation_separateDb($node_nid, $title, $translation, $mark = '', $suggestion = false, $agree = false)
{
    
    if($suggestion)
    {
        $translation = $mark . $translation;
        
        db_query("UPDATE {titles_translations} SET ru_suggested = '%s' WHERE nid = %d", $translation, $node_nid);
    }
    elseif($agree)
    {
        db_query("UPDATE {titles_translations} SET ru = '%s', ru_suggested = '%s' WHERE nid = %d", $translation, $mark, $node_nid);
    }
    else
    {
        db_query("INSERT INTO {titles_translations} (uk, ru, ru_suggested, nid) VALUES ('%s', '%s', '%s', %d)", $title, $translation, $mark, $node_nid);
    }
   
}



function zp_functions_saveTitleTranslation($node_nid, &$data, $translation, $mark = null, $suggestion = false)
{
    
    // clear all ", because it cause problems later on while exploding data string by ;
    // doesn't need because we did it before translating
    //$translation = str_replace('"', '', $translation);
    
    if(!$suggestion)
    {
        $data[3] = $translation;
    
        if($mark)
            $data[4] = $mark;
    }
    else
    {
       $data[4] = $mark . $translation;
    }
    
    $new_data = implode(';',$data);
    
    db_query("UPDATE {content_field_prodtype_pic_src_n_num} SET field_prodtype_pic_src_n_num_value = '%s' WHERE nid = %d", $new_data, $node_nid);
    cache_clear_all('*', 'cache_content', true);
}




function zp_functions_win_utf8 ($in_text){
$output="";
$other[1025]="TА";
$other[1105]="TБ";
$other[1028]="TВ";
$other[1108]="TГ";
$other[1030]="I";
$other[1110]="i";
$other[1031]="TД";
$other[1111]="TЕ";

for ($i=0; $i<strlen($in_text); $i++){
if (ord($in_text{$i})>191){
  $output.="&#".(ord($in_text{$i})+848).";";
} else {
  if (array_search($in_text{$i}, $other)===false){
   $output.=$in_text{$i};
  } else {
   $output.="&#".array_search($in_text{$i}, $other).";";
  }
}
}
return $output;
}
   



function zp_functions_cp1251_to_utf8_recursive(/* mixed */ $data) {
    if (is_array($data)) {
        $d = array();
        foreach ($data as $k => &$v) {
            $d[cp1251_to_utf8_recursive($k)] = cp1251_to_utf8_recursive($v);
        }
        return $d;
    }
    if (is_string($data))
        return iconv('cp1251', 'utf-8//IGNORE//TRANSLIT', $data);
    if (is_scalar($data) or is_null($data))
        return $data;
    #throw warning, if the $data is resource or object:
    trigger_error('An array, scalar or null type expected, ' . gettype($data) . ' given!', E_USER_WARNING);
    return $data;
}


function zp_functions_utf8_win($s){
  $out="";
  $c1="";
  $byte2=false;
  for ($c=0;$c<strlen($s);$c++)
  {
  	$i=ord($s[$c]);
  	if ($i<=127) $out.=$s[$c];
  	if ($byte2){
  		$new_c2=($c1&3)*64+($i&63);
  		$new_c1=($c1>>2)&5;
  		$new_i=$new_c1*256+$new_c2;
  		if ($new_i==1025){
  			$out_i=168;
  		}else
  		{
  			if ($new_i==1105){
  				$out_i=184;
  			}else
  			{
  				$out_i=$new_i-848;
  			}
  		}
  		$out.=chr($out_i);
  		$byte2=false;
  	}
  	if (($i>>5)==6) {
  		$c1=$i;
  		$byte2=true;
  	}
 }
 return $out;
}



function zp_functions_bingTranslate($s_text, $from = 'uk', $to = 'ru', $preprocess_step = 1){
    
    // appId for www.zapokupkami.com
    $appId = 'B8FB23AA854F739111D3615CBB701579053E8DD7'; //go to http://msdn.microsoft.com/en-us/library/ff512386.aspx to obtain AppId.


    // some peprocess
    $nextStep = $preprocess_step + 1;
    switch($preprocess_step)
    {
        case 1:
            // change the type of a single quote
            $s_text = str_replace("`", "'", $s_text);
            
            
            // clear all ", because it cause problems later on while exploding data string by ;
            $s_text = str_replace('"', '', $s_text);
            
            // decrease 3 " to 2
            // doesn't need because of previous
            $s_text = preg_replace( '/(.*\".*)\"(.*\".*)/', '$1$2', $s_text);
            
            
            $translated = zp_functions_bingTranslate($s_text, $from, $to, $nextStep);
            
            break;


        case 2:
            // if contains measure like 0.75l, 1kg, etc
            // with floating point, coma number
            if(preg_match( '/(.*)\s([0-9]{1,}(\.|\,)?[0-9]{1,}\s?(л|мл|кг|гр|г|шт|g|kg|l|))(.*)/', $s_text, $results))
            {
                //zp_functions_show($results);
                $translated = zp_functions_bingTranslate(trim($results[1]), $from, $to, $nextStep);
                $translated .= ' ' . $results[2] . ' ';
                if($results[5] = trim($results[5]))
                    $translated .= zp_functions_bingTranslate($results[5], $from, $to, $nextStep);

            }
            // with integer number
            elseif(preg_match( '/(.*)\s([0-9]{1,}\s?(л|кг|гр|г|шт|g|kg|l|))(.*)/', $s_text, $results))
            {
                //zp_functions_show($results);
                $translated = zp_functions_bingTranslate(trim($results[1]), $from, $to, $nextStep);
                $translated .= ' ' . $results[2] . ' ';
                if($results[5] = trim($results[5]))
                    $translated .= zp_functions_bingTranslate($results[5], $from, $to, $nextStep);
            }
            else
                $translated = zp_functions_bingTranslate($s_text, $from, $to, $nextStep);
            
            break;
        /*
        case 3:
            // extract words in quotes
            if($count = preg_match( '/(.*)(\".*\")(.*)/', $s_text, $results))
            {
                //zp_functions_show($results);
                //$translated = zp_functions_bingTranslate_checkTranslateCheck($appId, trim($results[1]), $from, $to);
                //$translated .= ' ' . $results[2] . ' ';
                //$translated .= zp_functions_bingTranslate_checkTranslateCheck($appId, trim($results[3]), $from, $to);
                
                $translated = zp_functions_bingTranslate(trim($results[1]), $from, $to, $nextStep);
                $translated .= ' ' . $results[2] . ' ';
                $translated .= zp_functions_bingTranslate(trim($results[3]), $from, $to, $nextStep);
            }
            else
                $translated = zp_functions_bingTranslate($s_text, $from, $to, $nextStep);
            
            break;
        */
         
        default:
            // final iteration
            $translated = zp_functions_bingTranslate_checkTranslateCheck($appId, $s_text, $from, $to, $s_text_cleared);
    }
    
    
    
    return $translated;
}




function zp_functions_bingTranslate_checkTranslateCheck($appId, $s_text, $from, $to){
    

    // if phrase consists latin symbols
    // extract it
    /*
    if(preg_match('/[A-Za-z]/', $s_text))
    {
        $words = explode(' ',$s_text); 

        $translate_array = array();
        foreach($words as $key=>$word)
        {

            //Единственно нужно учесть, что для php если utf-8, то нужно добавлять модификатор u
            //Типа так: preg_match( '/[A-Яа-я]/u', $str )

            $translate_array[$key]['word'] = $word;
            if(preg_match( '/[A-Za-z]/', $word))
            {
                $translate_array[$key]['lat'] = 1;
                //$out .= $word . '=> latino<br>';
            }
            else
            {
                $translate_array[$key]['lat'] = 0;
                //$out .= $word . '=> cyr<br>';
                $substring_to_translate = ($substring_to_translate?$substring_to_translate . ' ':'') . $word;
                $substring_to_translate_array[] = $word;
            }

        }
        
        $translated_temp = zp_functions_bingTranslateOne($appId, $substring_to_translate, $from, $to);
        
        $words = explode(' ',$translated_temp); 
        $translated_count = 0;
        foreach($translate_array as $key => $word)
        {
            if($translate_array[$key]['lat'])
                $translated .= ($translated?' ':'') . $translate_array[$key]['word'];
            else
            {
                $translated_word = preg_match( '/[A-Za-z]/', $words[$translated_count])?$substring_to_translate_array[$translated_count]:$words[$translated_count];
                //echo '$translated_word = ' . $translated_word . '<br>';
                $translated .= ($translated?' ':'') . $translated_word;
                $translated_count++;
            }
                
        }
        
        //echo '$translated = ' . $translated . '<br>';
        //die;
        
    }
    else // of // if phrase consists latin symbols
    */    
    {
        //if phrase doesn't consists latin symbols
        
        $translated = zp_functions_bingTranslateOne($appId, $s_text, $from, $to);
        if(preg_match( '/[A-Za-z]/', $translated))
        {
            $before_translate = explode(' ',$s_text);
            $after_translate = explode(' ',$translated);

            $translated = null;
            foreach($after_translate as $key => $word)
            {
                $translated = ($translated?$translated . ' ' : '') . (preg_match( '/[A-Za-z]/', $word)?$before_translate[$key]:$word);
            }

        }
        
    }
    
    
    
    // Some postprocess
    
    // correct quotes back to original
    $translated = str_replace(array('»', '«'), '"', $translated);
    // change Вина to Вино
    $translated = preg_replace( '/(.*)(В|в)ина(.*)/', '$1$2ино$3', $translated);
    // correct 'ПК' back to 'шт'
    if(strpos($translated, 'ПК') !== false AND strpos($s_text, 'шт') !== false)
        $translated = str_replace("ПК", 'шт', $translated);
    
    return $translated;
     
     
}



function zp_functions_bingTranslateOne($appId, $s_text, $from, $to, $maxTranslations = 5){
    
$url = 
          //'http://api.microsofttranslator.com/v2/Http.svc/Translate?'
            'http://api.microsofttranslator.com/v2/Ajax.svc/Translate?'
            //'http://api.microsofttranslator.com/v2/Ajax.svc/GetTranslations?'
            
            . "appId=" . $appId 
            //. "&maxTranslations=" . $maxTranslations
            
            . "&from=" . $from 
            . "&to=" . $to
            //. "&contentType=text/plain"
            . "&text=" . urlencode($s_text);
            
    // prohibited operation on the server
    //$translated = file_get_contents($uri);
    
    $c = curl_init();
    curl_setopt($c, CURLOPT_URL, $url);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $translated = trim(curl_exec($c), ' ﻿"');
    //$translated = json_decode($translated, true); 
    curl_close($c);

    return $translated;    
    
}


function zp_functions_bingTranslateMany($appId, $s_text, $from, $to, $maxTranslations = 5){
$url = 
          //'http://api.microsofttranslator.com/v2/Http.svc/Translate?'
            //'http://api.microsofttranslator.com/v2/Ajax.svc/Translate?'
            'http://api.microsofttranslator.com/v2/Ajax.svc/GetTranslations?'
            
            . "appId=" . $appId 
            . "&maxTranslations=" . $maxTranslations
            
            . "&from=" . $from 
            . "&to=" . $to
            . "&contentType=text/plain"
            . "&text=" . urlencode($s_text);
            
    // prohibited operation on the server
    //$translated = file_get_contents($uri);
    
    $c = curl_init();
    curl_setopt($c, CURLOPT_URL, $url);
    curl_setopt($c, CURLOPT_RETURNTRANSFER, 1);
    $translated = json_decode(curl_exec($c), true); 
    //$translated['Translations'][0]['TranslatedText'] = trim($translated['Translations'][0]['TranslatedText'], ' ﻿"');
    curl_close($c);

    
    return $translated;    
    
}



function zp_functions_show_DrupalStatusMessages()
{
    
    if($_SESSION['messages'])
     foreach($_SESSION['messages'] as $key => $values)
     {
       switch($key)
        {
            case 'error':
                    foreach($values as $value)
                      echo '<div class="message_error">' . $value . '</div>';
                    break;

            case 'warning':
                    foreach($values as $value)
                       echo '<div class="message_warning">' . $value . '</div>';
                    break;	

            default:
                    foreach($values as $value)
                      echo '<div class="message_status">' . $value . '</div>';
                    break;	
        }
     }
    
}

function zp_functions_show_logoutAlert($time)
{
    drupal_add_js(	
                    '$(document).ready(
                                    function() 
                                    {
                                       alert("В целях безопасности после ' . $time . 'мин бездействия Вы были выгружены из своей учётной записи. Для продолжения полноценного использования сайта, пожалуйста, авторизуйтесь заново (верхний правый угол экрана).");
                                    }
                               );', 
        'inline');
  
}





function zp_functions_get_social_links($options = null)
{

    
    // блок AddThis
    //drupal_add_js('sites/all/modules/_SEO/addthis/addthis-config.js');
    //
    /*
     echo '<div class="addthis_toolbox addthis_default_style">
		<a href="http://addthis.com/bookmark.php?v=250&amp;pub=all4senses" class="addthis_button_compact">В закладки!</a>
		<a class="addthis_button_email" title="Переслать ссылку на эту страницу по E-mail"></a>
	</div>';
    */
    //$addthis .= '<script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pub=all4senses"></script>';
    $addthis .= '<a href="http://www.addthis.com/bookmark.php?v=250&amp;pub=all4senses" 
	        class="addthis_button' . (isset($options['class_head'])?$options['class_head']:''). '"><img 
	        src="http://s7.addthis.com/static/btn/v2/lg-share-ru.gif" 
	        width="125" height="16" border="0" alt="Share" /></a>';
    
    $plusone .= '<div class="plusone' . (isset($options['class_head'])?$options['class_head']:''). '"><div class="p1" style="float:left"><g:plusone size="small" annotation="none" ></g:plusone></div></div>'; 
    
    $out = /*$plusone . */$addthis;
    
    return $out;
    
}

function zp_functions_get_qr($name, $text)
{
    $qr_rel_path = 'files/qr/' . $name . '-qr.jpg';
    $qr_base_path = base_path() . $qr_rel_path;
    
    if (file_exists($_SERVER['DOCUMENT_ROOT'] . $qr_base_path))
        return $qr_rel_path;

    require_once("sites/all/libraries/pear-qrcode/QRCode.php");

    $qr = new Image_QRCode();
    $options = array(
        "output_type" => "return",
        "module_size" => 8,
        );

    $gd_object = $qr->makeCode($text, $options);
    imagejpeg($gd_object, $qr_rel_path);

    return $qr_rel_path;
}

function zp_functions_get_product_teaser_picture_path($field_prodtype_pic_src_n_num, $field_proizv, $field_zp_art_proizv, $field_postav, $field_zp_art_postav, $model, $field_zp_art_shop, $field_zp_bar_world, $target = 'product-page', $title = '', $imagecache = true)
{
    $photo_data = explode(';', $field_prodtype_pic_src_n_num); //$node->field_prodtype_pic_src_n_num[0]['view']
    //$photo_data[0] - type of product
    //$photo_data[1] - source of pics
    //$photo_data[2] - num of pics

    $photo_base_path = base_path() . 'files/p/' . $photo_data[0] . '/';

    switch ($photo_data[1]) { //$photo_data[1] - source of pics
        /*
          case '2': // 2 = источник названия картинок - штрих-код производителя
          $proizv_id = explode(';', $node->field_proizv[0]['view']); // считаем, что если источником картинок является поставщик, то данная переменная заполнена (т.е. для товара указан ид и название производителя)
          $proizv_id = trim($proizv_id[0]);

          //$photo_base_name = $photo_base_path . 'b' . $proizv_id . '-' . $node->field_zp_bar_proizv[0]['view']; //'bm = bar of manufacturer', вернее, внутренний номер производителя имеет вид m0034, т.е. название картинки имеет вид типа bm0034-2298094850938-1.jpg
          $photo_base_name = 'b' . $proizv_id . '/b' . $proizv_id . '-' . $node->field_zp_bar_proizv[0]['view']; //'bm = bar of manufacturer', вернее, внутренний номер производителя имеет вид m0034, т.е. название картинки имеет вид типа bm0034-2298094850938-1.jpg
          break;
         */

        case '3': // 3 = источник названия картинок - арт производителя
            $proizv_id = explode(';', $nfield_proizv); // считаем, что если источником картинок является поставщик, то данная переменная заполнена (т.е. для товара указан ид и название производителя) // $node->field_proizv[0]['view']
            $proizv_id = trim($proizv_id[0]);

            $photo_base_name = $proizv_id . '/a' . $proizv_id . '-' . $field_zp_art_proizv . '/a' . $proizv_id . '-' . $field_zp_art_proizv; //'bm = bar of manufacturer', вернее, внутренний номер производителя имеет вид m0034, т.е. название картинки имеет вид типа bm0034-2298094850938-1.jpg // $node->field_zp_art_proizv[0]['view']
            break;

        /*
          case '4': // 4 = источник названия картинок - штрих-код поставщика
          $postav_id = explode(';', $node->field_postav[0]['view']); // считаем, что если источником картинок является поставщик, то данная переменная заполнена (т.е. для товара указан ид и название поставщика)
          $postav_id = trim($postav_id[0]);

          //$photo_base_name = $photo_base_path . 'b' . $postav_id . '-' . $node->field_zp_bar_postav[0]['view']; //'bc = bar of caterer', вернее, внутренний номер поставшика имеет вид c0034, т.е. название картинки имеет вид типа bc0034-2298094850938-1.jpg
          $photo_base_name = 'b' . $postav_id . '/b' . $postav_id . '-' . $node->field_zp_bar_postav[0]['view']; //'bc = bar of caterer', вернее, внутренний номер поставшика имеет вид c0034, т.е. название картинки имеет вид типа bc0034-2298094850938-1.jpg
          break;
         */

        case '5': // 5 = источник названия картинок - арт поставщика
            $postav_id = explode(';', $field_postav); // считаем, что если источником картинок является поставщик, то данная переменная заполнена (т.е. для товара указан ид и название поставщика) // $node->field_postav[0]['view']
            $postav_id = trim($postav_id[0]);

            $photo_base_name = $postav_id . '/a' . $postav_id . '-' . $field_zp_art_postav . '/a' . $postav_id . '-' . $field_zp_art_postav; //'bc = bar of caterer', вернее, внутренний номер поставшика имеет вид c0034, т.е. название картинки имеет вид типа bc0034-2298094850938-1.jpg // $node->field_zp_art_postav[0]['view']
            break;
        /*
          case '6': //6 = источник названия картинок - штрих-код магазина
          //$photo_base_name = $photo_base_path  . 'b' . substr($node->model, 0, 8) . '-' . $node->field_zp_bar_shop[0]['view']; // bsh = bar of shop, вернее, в качестве номера магазина берём zp номер, т.е. получается картинка имеет название bz010014980-21394300900-1.jpg
          $photo_base_name = 'b' . substr($node->model, 0, 8) . '/b' . substr($node->model, 0, 8) . '-' . $node->field_zp_bar_shop[0]['view']; // bsh = bar of shop, вернее, в качестве номера магазина берём zp номер, т.е. получается картинка имеет название bz010014980-21394300900-1.jpg
          break;
         */

        case '7': //7 = источник названия картинок -  артикул магазина
            $photo_base_name = substr($model, 0, 8) . '/a' . substr($model, 0, 8) . '-' . $field_zp_art_shop . '/a' . substr($model, 0, 8) . '-' . $field_zp_art_shop; // bsh = bar of shop, вернее, в качестве номера магазина берём zp номер, т.е. получается картинка имеет название bz010014980-21394300900-1.jpg // $node->model // $node->field_zp_art_shop[0]['view']
            break;

        case '1': // 1 = источник названия картинок - штрих-код мировой
        default:
            $photo_base_name = $field_zp_bar_world . '/' . $field_zp_bar_world; // $node->field_zp_bar_world[0]['view']
            break;
    }


    //$photo_base_name = $photo_base_path . $photo_base_name . '/' . $photo_base_name;
    $photo_base_name = $photo_base_path . $photo_base_name;

    //echo 'photo_base_name = ' . $photo_base_name . '<BR>';
    //echo '<div class="image_big">';
    $photo_exist = 0; // первая (или первая существующая на сервере) картинка большая, остальные маленькие
    //for($i = 0; $i < $photo_data[1];) //$photo_data[1] - num of pics
    for ($i = 0; $i < $photo_data[2];)
    { //$photo_data[1] - num of pics
        $i++;
        $next_photo = $photo_base_name . '-' . $i . '.jpg';
        //echo '<div class="photo">' . 'photo_base_name = ' . $next_photo . '</div>';
        //clearstatcache(); // вроде как очищает кеш, но кажется это не нужно тут
        if (file_exists($_SERVER['DOCUMENT_ROOT'] . $next_photo)) {
            //echo '<a href="' . $next_photo . '" title="Увеличить и посмотреть другие фото..." rel="lightbox[roadtrip]['. $title . ' ' . $i .']">';
            
            $image = $next_photo;
            if($imagecache)
            {
                if ($photo_data[3] == 'h')
                    $imagecache_preset = 'product_teas_type1-h';
                else
                    $imagecache_preset = 'product_teas_type1-v';
                
                $image = theme('imagecache', $imagecache_preset, $next_photo, $title . ' ' . $i); // третий аргумент - alt
            }
                //echo '<a/>;
                //$photo_exist = 1;
            return $image;
            break;
        }
        // закомментировать, если захочется проверять, есть ли вторая картинка при отсутствующей первой
        break;
    }

    if ($target == 'top-list')
        return false; // в случае с топ-листом дефаултную картинку не показываем, а возвращаем ноль (чтобы вообще этот товар не показывать, раз у него картинки нет )
    else
    //if (!$photo_exist)
        //echo theme('imagecache', 'product_teas_type1-v', $photo_base_path . '/default.jpg');
        return theme('imagecache', 'product_teas_type1-default-v', $photo_base_path . '/default.jpg');

}





// получим список статей из того же раздела, что и текущая статья и напечатаем его
// эти данные будут встроены на страницу с помощью ajax или выведены обычным способом
function zp_functions_show_other_issues_list($node_nid, $keywords, $vid = 7){


	//$vid = 7; // словарь с содержанием (списком) статей
	foreach ($keywords as $category)
	{
		if($category->vid == $vid)
		{
			$issues_term['tid'] = $category->tid;
			$issues_term['name'] = $category->name;
			$cur_term_tids[] = $issues_term;
		}
	}

		
	foreach ($cur_term_tids as $issues_term)
	{
		// в общем списке статей этого же раздела не показываем ссылку на текущую статью
		$issues_nids = db_query("SELECT nid FROM {term_node} WHERE tid = %d AND nid <> %d", $issues_term['tid'], $node_nid);

		if($issues_nid = db_fetch_array($issues_nids))
		{
			if(is_array($nids_done))
				if(in_array($issues_nid, $nids_done))
					continue;
				
			$nids_done[] = $issues_nid;
			
			$flag_is_other_issues = 1;
				
			echo '<div class="issues_list_title">' .$issues_term['name'] . '</div>';
			
			echo '<div class="i_title other-issues">' . l(db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $issues_nid['nid'])), 'node/' . $issues_nid['nid'], array('title' => 'Перейти на страницу со статьёй')) . '</div>';
			echo '<div class="i_teaser">' . db_result(db_query("SELECT field_issue_teaser_value from {content_field_issue_teaser} WHERE nid = %d", $issues_nid['nid'])) . '</div>';

			while($issues_nid = db_fetch_array($issues_nids))
			{
				if(in_array($issues_nid, $nids_done))
					continue;
				
				$nids_done[] = $issues_nid;
				
				echo '<div class="i_title">' . l(db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $issues_nid['nid'])), 'node/' . $issues_nid['nid'], array('title' => 'Перейти на страницу со статьёй')) . '</div>';
				echo '<div class="i_teaser">' . db_result(db_query("SELECT field_issue_teaser_value from {content_field_issue_teaser} WHERE nid = %d", $issues_nid['nid'])) . '</div>';
			}
			
			
		}
		
		
	}
		
		
	if(!$flag_is_other_issues)
	{
		echo 'В этом разделе пока нет других статей или описаний.';	
	}

	
	
	return;
	
}

// конец формирования данных для выдачи ajax-функции
































// рекурсивная функция, выводящая на страницу со статьёй список отделов, в которых продаются товары или оказываются услуги, описанные в статье
// функция изначально получает уже сформированный массив с отделами
function zp_functions_make_where_to_buy_list($otdels, $count, $first){
	
	
	for($i = $first; $i <=$count-1; $i++)
	{
		if($otdels[$i]['processes'] == 1)
			continue;
			
		$otdels[$i]['processes'] = 1;
			
		if($otdels[$i]['leaf'])
		{
			//echo '<div class=lf>' . $otdels[$i]['name'] . '</div>';
		}
		else
		{
			echo '<fieldset class="collapsible where_to_buy"><legend><a href="#" id="otdel_parent">' . $otdels[$i]['name'] . '</a></legend>';
			
			for($j = $i+1; $j <=$count-1; $j++)
			{

				if($otdels[$j]['parent_tid'] == $otdels[$i]['tid'])
				{
									
					//$otdels[$j]['processes'] = 1;
					
					if(!$otdels[$j]['leaf'])
					{
						$otdels = zp_functions_make_where_to_buy_list($otdels, $count, $j);
					}
					else 
					{
						
						echo '<div class=lf>' . $otdels[$j]['link'] . '</div>';
						$otdels[$j]['processes'] = 1;
						
					}
				}
			
			}
			echo '</fieldset>';
		}
	}
	
	return $otdels;
}







// пытается найти по несуществующей ссылке похожую страницу на сайте
// ищет по zpid артикулу
// Используется на странице 404, чтобы предложить пользователю альтернативный вариант
function zp_functions_found_alike_link($main_link, &$new_link_array = array()){
	
	//global $user;
	//if($user->uid != 1)
		//return;
		
	$strings = explode('/', $main_link);
	foreach($strings as $str)
	{
		if($str[0] == 'z' AND ctype_digit($str[1]))
		{
			switch(strlen($str))
			{
				case 14:
					// это товар
					$new_link = 'tovar';
					
					if($new_nid = db_result(db_query("SELECT nid FROM {uc_products} WHERE model = '%s'", $str)))
						$new_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $new_nid));	
					
					break;
					
					
				case 11:
					// это отдел
					$new_link = 'otdel';
					
					if($new_nid = db_result(db_query("SELECT nid FROM {content_field_zp_art_place} WHERE field_zp_art_place_value = '%s'", $str)))
						$new_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $new_nid));	
					
					break;
			} // end of switch(strlen($str))
		}
	}
	
	//echo 'Main link = ' . $main_link;
	
	if($new_nid) 
	{
		$new_link_array['n'] = $new_nid; $new_link_array['t'] = $new_title; 
		return '&n=' . $new_nid . '&t=' . $new_title;
	}
	else
	{
		if($new_link)
		{
			$new_link_array['l']  = $new_link;
			return '&l=' . $new_link;
		}
		else						
			return '';
	}
	
	
}








function zp_functions_make_link_redirects($type = 'product_set_1'){

	//$type = 'c_department';
	//variable_set('zp_mlr_next_nid', 1);
	$node_nid = variable_get('zp_mlr_next_nid', 1);
	//$node_nid = 1;
	
	//$rid = db_next_id('{path_redirect}_rid');
	//echo 'rid = ' . $rid . '<br>';
	
	//for($node_nid = $next_nid; $node_nid < $next_nid + 100; $node_nid++)
	for($node_count = 1; $node_count <=2000;)
	{
		
		switch($type)
		{

			case 'product_set_1':
				
				//$node_nid = 771;
				//$zp_id = 'z1010101017081';
				//$node_nid = db_result(db_query("SELECT nid FROM {uc_products} WHERE model = '%s'", $zp_id));

				//db_result(db_query("SELECT count(1) FROM {url_alias} WHERE src LIKE '%s%%'", $internal_name));
				if($node_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d AND type = '%s'", $node_nid, $type)))
				{
					
				
					$zp_id = db_result(db_query("SELECT model FROM {uc_products} WHERE nid = %d", $node_nid));
					
					$vid2 = 1; // словарь с каталогом

					$category2 = db_fetch_object(db_query_range("SELECT t.tid, t.name FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.nid = %d ORDER BY weight", $vid2, $node_nid, 0, 1));
					//$category2->vid = $vid2;
					$all_linage = taxonomy_get_parents_all($category2->tid);


					// вычислим старую, уже не существующую (неправильную) ссылку
					$sokr_name = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $node_title)));
					$len = strlen($sokr_name);
					
					/*
					// v1 sokr 5 symb
					$sokr_name_1 = $sokr_name[0] . $sokr_name[4] . $sokr_name[7] . $sokr_name[$len - 5] . $sokr_name[$len - 3];
					$old_node_link = $zp_id . '/' . $sokr_name_1;

					// v2 а это для предыдущего полного названия, не сокращённого... и такое где-то в поисковиках пооставалось
					$old_node_link = $zp_id . '/' . $sokr_name;
					*/
					
					// v3 7 symb
					$sokr_name_2 = $sokr_name[0] . $sokr_name[3] . $sokr_name[6] . $sokr_name[10] . $sokr_name[$len - 12]  . $sokr_name[$len - 8] . $sokr_name[$len - 3];
					$old_node_link_2 = $zp_id . '/' . $sokr_name_2;
					//echo 'old_node_link = ' . $old_node_link_2 . '<br>';

					
					
					// v4 $values[$label .'-2-3-from-top-path---sokr']
					$path_1 = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $all_linage[1]->name)));
					$path_2 = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $all_linage[2]->name)));
					$len_1 = strlen($path_1);
					$len_2 = strlen($path_2);

					$sokr_name_5 = $path_2[0] . $path_2[3] . $path_2[$len_2 - 1] . '-' . $path_1[0] . $path_1[3] . $path_1[5] . $path_1[$len_1 - 1];
					$old_node_link_3 = 'p/s1/' . $sokr_name_5 . '/' . $zp_id ;
					
					// v5
					$old_node_link_3 = 'p/' . strtolower(pathauto_cleanstring(preg_replace('/\//', '', $node_title))) . '/' . $zp_id ;

					//echo 'old_node_link = ' . $old_node_link_3 . '<br>';
					//return;
					
					

					// вычислим новую ссылку
					$path_3 = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $all_linage[3]->name)));
					$len_3 = strlen($path_3);
					//$values[$label .'-4-from-top-path---sokr-4-symb'] = $path_3[0] . $path_3[4] . $path_3[7] . $path_3[$len_3 - 1];
					$new_node_link = $path_3[0] . $path_3[4] . $path_3[7] . $path_3[$len_3 - 1];
					$new_node_link = 'p/' . $new_node_link . '/' . $zp_id;
					
					
					
					$rid = db_next_id('{path_redirect}_rid');
					/*
					if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, $old_node_link, $new_node_link, 301))
					{
						
							echo '--------------Error on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
					}
					else
					{
						$rid = db_next_id('{path_redirect}_rid');
						if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, 'system/page-not-found?u=' . $old_node_link, $new_node_link, 301))
							echo '--------------*** Error 2 on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
						else	
							echo $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
					}
					*/
					
					if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, $old_node_link_3, $new_node_link, 301))
					{
						
							echo '--------------Error on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link_3 . '  ==>  ' . $new_node_link . '<br>';
					}
					else
					{
						$rid = db_next_id('{path_redirect}_rid');
						if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, 'system/page-not-found?u=' . $old_node_link_3, $new_node_link, 301))
							echo '--------------*** Error 2 on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link_3 . '  ==>  ' . $new_node_link . '<br>';
						else	
							echo $rid . '-> ' . $node_nid . ': ' . $old_node_link_2 . ',  ' . $old_node_link_3 . ' ==> ' . $new_node_link . '<br>';
					}
					
					/*
					if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, $old_node_link_3, $new_node_link, 301))
					{
						
							echo '--------------Error on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link_3 . '  ==>  ' . $new_node_link . '<br>';
					}
					else 
						echo $rid . '-> ' . $node_nid . ': ' . $old_node_link_3 . '  ==>  ' . $new_node_link . '<br>';
					*/
												
					$node_count++;
					variable_set('zp_mlr_next_nid', $node_nid + 1);
					
				}

				break;
				
				
				
				

			case 'c_department':
				
				

				//$node_nid = 3505;
				//db_result(db_query("SELECT count(1) FROM {url_alias} WHERE src LIKE '%s%%'", $internal_name));
				if($node_title = db_result(db_query("SELECT title FROM {node} WHERE nid = %d AND type = '%s'", $node_nid, $type)))
				{
					
				
					$zp_id = db_result(db_query("SELECT field_zp_art_place_value FROM {content_field_zp_art_place} WHERE nid = %d", $node_nid));
					
					$vid2 = 1; // словарь с каталогом

					$category2 = db_fetch_object(db_query_range("SELECT t.tid, t.name FROM {term_data} t INNER JOIN {term_node} r ON r.tid = t.tid WHERE t.vid = %d AND r.nid = %d ORDER BY weight", $vid2, $node_nid, 0, 1));
					//$category2->vid = $vid2;
					$all_linage = taxonomy_get_parents_all($category2->tid);


					// вычислим старую, уже не существующую (неправильную) ссылку
					$sokr_name = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $node_title)));
					$len = strlen($sokr_name);
					$sokr_name_1 = $sokr_name[0] . $sokr_name[4] . $sokr_name[7] . $sokr_name[$len - 5] . $sokr_name[$len - 3];
					$old_node_link = $zp_id . '/' . $sokr_name_1;
					
					// для предыдущего полного названия, не сокращённого... и такое где-то в поисковиках пооставалось
					//$old_node_link = $zp_id . '/' . $sokr_name;
					
					// для предыдущего полного названия, вместе с родительским отделом
					$old_node_link = $zp_id . '/' . strtolower(pathauto_cleanstring(preg_replace('/\//', '', $all_linage[1]->name))) . '/' . $sokr_name;



					// вычислим новую ссылку
					$sokr_name = strtolower(pathauto_cleanstring(preg_replace('/\//', '', $node_title)));
					$len = strlen($sokr_name);
					$sokr_name_0 = $sokr_name[0] . $sokr_name[4] . $sokr_name[7] . $sokr_name[$len - 1];
					$new_node_link = 'dpt/' . $sokr_name_0 . '/' . $zp_id;
					
					//echo 'old_node_link = ' . $old_node_link;
					//zp_functions_show($all_linage);
					
					//return;
					
					
					$rid = db_next_id('{path_redirect}_rid');
					if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, $old_node_link, $new_node_link, 301))
					{
						
							echo '--------------Error on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
					}
					else
					{
						$rid = db_next_id('{path_redirect}_rid');
						if(!db_query("INSERT INTO {path_redirect} (rid, path, redirect, type) VALUES (%d, '%s', '%s', %d)", $rid, 'system/page-not-found?u=' . $old_node_link, $new_node_link, 301))
							echo '--------------*** Error 2 on ' . $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
						else	
							echo $rid . '-> ' . $node_nid . ': ' . $old_node_link . '  ==>  ' . $new_node_link . '<br>';
					}
						
					$node_count++;
					variable_set('zp_mlr_next_nid', $node_nid + 1);
					
				}

				break;
				
						

			default:
				break;

		}
		
		
		$node_nid++;
	}
	
	//variable_set('zp_mlr_next_nid', $next_nid + 100);
	
	

}




// если данные по любимым магазинам пользователя ещё не заданы, задаются

// изначально эти данные считались одновременно с формированием пользовательского меню
// но когда меню было перекинуто в футер (ради SEO), появилась необходимость эти данные рассчитаывать ещё до формирования пользовательского меню... при первом е ним обращении

function zp_functions_get_user_shops_data($option = 'reset'){
	
	global $user;
	
	if($option == 'reset')
		unset($_SESSION['user_shops_data']);
	
	if(!($user_shops_data = $_SESSION['user_shops_data']))
	{

                if($user->uid)
                    $user_data_node_title = 'u'. $user->uid . '-hi';
                else
                    $user_data_node_title = 'u'. db_result(db_query("SELECT uid from {users} WHERE name = '%s'", 'guest')) . '-hi';            
                
                //if($results = db_query("SELECT r_id, r_text, description from {node_field_multireference_data} WHERE nid = %d", db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u'. $user->uid . '-hi'))))
		if($results = db_query("SELECT r_id, r_text, description from {node_field_multireference_data} WHERE nid = %d", db_result(db_query("SELECT nid from {node} WHERE title = '%s'", $user_data_node_title))))
                {

			while($result = db_fetch_object($results))
			{
				$shop_tid = db_result(db_query("SELECT tid from {term_data} WHERE vid = 1 AND name = '%s'", $result->r_text));

				$user_shops_data[$shop_tid] = array(
				't_name' => $result->r_text,
				//'tid' => $shop_tid, // tid выносим в ключ массива ($user_shops_data[$shop_tid])
				'nid' => $result->r_id,
				'price_factor' => $result->description,
				);

			}

			$_SESSION['user_shops_data'] = $user_shops_data;

		}
	}
	
	return $user_shops_data;
	
}






function zp_functions_update_xmlsitemap_pid(){

	$query1 = "
    INSERT INTO {xmlsitemap_node} (nid, last_changed, last_comment, previous_comment)
    SELECT n.nid, n.changed, s.last_comment_timestamp, MAX(c.timestamp) FROM {node} n
    LEFT JOIN {node_comment_statistics} s ON s.nid = n.nid
    LEFT OUTER JOIN {comments} c ON c.nid = n.nid AND c.timestamp < s.last_comment_timestamp
    LEFT JOIN {xmlsitemap_node} xn ON xn.nid = n.nid
    WHERE xn.nid IS NULL
    GROUP BY n.nid, n.changed, s.last_comment_timestamp
  ";

	/*
	$query2 = "
        UPDATE {xmlsitemap_node} xn INNER JOIN {url_alias} ua
        ON ua.src = CONCAT('node/', CAST(xn.nid AS CHAR))
        SET xn.pid = ua.pid
        WHERE xn.pid IS NULL
      ";
	*/
	$query2 = "
        UPDATE {xmlsitemap_node} xn INNER JOIN {url_alias} ua
        ON ua.src = CONCAT('node/', CAST(xn.nid AS CHAR))
        SET xn.pid = ua.pid
      ";
      
	db_query($query1);
  	db_query($query2);
  	//xmlsitemap_update_sitemap();
}




// выясняет страну-производитель по международному штрих-коду
function zp_functions_get_country_by_bar($bar){
	
	if(!$bar OR $bar == '')
		return false;
	
	$first_2symb = (int) $bar[0] . $bar[1];
	$first_3symb = (int) $bar[0] . $bar[1] . $bar[2];

	if($first_2symb === 0 OR ($first_2symb > 0 AND $first_2symb <= 13)) 
		return 'США / Канада';

	if($first_2symb >= 30 AND $first_2symb <= 37)
		return 'Франция';

	if($first_3symb >= 400 AND $first_3symb <= 440)
		return 'Германия';

	if($first_3symb >= 460 AND $first_3symb <= 469)
		return 'Россия';

	
	switch($first_2symb)
	{
		case 45:
		case 49:
			return 'Япония';
		
		case 50:
			return 'Великобритания';

		case 54:
			return 'Бельгия / Люксембург';
			
		case 57:
			return 'Дания';
			
		case 64:
			return 'Финляндия';
			
		case 70:
			return 'Норвегия';
			
		case 73:
			return 'Швеция';
			
		case 76:
			return 'Швейцария';
			
		case 80:
		case 81:
		case 82: 
		case 83:
			return 'Италия';
			
		case 84:
			return 'Испания';
			
		case 87:
			return 'Нидерланды';
			
		case 90:
		case 91:
			return 'Австрия';
			
		case 93:	
			return 'Австралия';
			
		case 94:
			return 'Новая Зеландия';
			
	}
	
	switch($first_3symb)
	{

		case 380:
			return 'Болгария';
		
		case 383:
			return 'Словения';
			
		case 385:
			return 'Хорватия';
			
		case 387: 
			return 'Босния-Герцеговина';
			
		case 471:
			return 'Тайвань';
			
		case 474:
			return 'Эстония';
		
		case 475:
			return 'Латвия';
			
		case 476:
			return 'Азербайджан';
			
		case 477:
			return 'Литва';
			
		case 478:	
			return 'Узбекистан';
			
		case 479:
			return 'Шри Ланка';
			
		case 480:
			return 'Филиппины';
			
		case 481:
			return 'Белоруссия';

		case 482:
			return 'Украина';
			
		case 484:
			return 'Молдова';

		case 485:
			return 'Армения';
			
		case 486:
			return 'Грузия';
			
		case 487:
			return 'Казахстан';
			
		case 489:
			return 'Гонконг';

		case 520:
			return 'Греция';

		case 528: 
			return 'Ливан';

		case 529:
			return 'Кипр';
			
		case 531:
			return 'Македония';
			
		case 535:
			return 'Мальта';
			
		case 539:
			return 'Ирландия';
			
		case 560:
			return 'Португалия';
			
		case 569:
			return 'Исландия';
			
		case 590: 
			return 'Польша';
			
		case 594:
			return 'Румыния';
		
		case 599:
			return 'Венгрия';
			
		case 600:
		case 601:
			return 'ЮАР';
			
		case 609:
			return 'Маврикий';
			
		case 611:
			return 'Марокко';
			
		case 613:
			return 'Алжир';

		case 616:
			return 'Кения';
			
		case 618:
			return 'Берег Слоновой Кости';
		
		case 619:
			return 'Тунис';
			
		case 621:
			return 'Сирия';
			
		case 622:
			return 'Египет';
			
		case 625:
			return 'Иордания';
			
		case 626:
			return 'Иран';
			
		case 628:
			return 'Саудовская Аравия';
			
		case 690:
		case 691:
		case 692:
		case 693:
			return 'КНР';
			
		case 729:
			return 'Израиль';

		case 740:
			return 'Гватемала';

		case 741:
			return 'Сальвадор';
			
		case 742:	
			return 'Гондурас';
			
		case 743:
			return 'Никарагуа';
			
		case 744:
			return 'Коста Рика';
			
		case 745:
			return 'Панама';
		
		case 746:
			return 'Доминиканская Республика';
			
		case 750:
			return 'Мексика';
		
		case 754:
		case 755:
			return 'Канада';
			
		case 759:
			return 'Венесуэла';

		case 770:	
			return 'Колумбия';
			
		case 773:
			return 'Уругвай';
			
		case 775:
			return 'Перу';
			
		case 779:
			return 'Аргентина';
			
		case 780:
			return 'Чили';
			
		case 784:
			return 'Парагвай';
			
		case 786:
			return 'Эквадор';
			
		case 789:
			return 'Бразилия';
			
		case 850:
			return 'Куба';
			
		case 858:
			return 'Словакия';
			
		case 859:
			return 'Чехия';

		case 860:
			return 'Сербия / Черногория';
		
		case 865:
			return 'Монголия';
			
		case 867:
			return 'Северная Корея';
			
		case 869:
			return 'Турция';
			
		case 880:	
			return 'Южная Корея';
			
		case 885:
			return 'Таиланд';
			
		case 888:
			return 'Сингапур';
			
		case 890:
			return 'Индия';
			
		case 893:
			return 'Вьетнам';
			
		case 899:
			return 'Индонезия';
			
		case 955:
			return 'Малазия';
			
		case 958:
			return 'Макау';
	}

	return false;
	
}







// показывает сообщение во всплывающем окошке после полной загрузки страницы
function zp_functions_jsalert($message, $after_pageload = TRUE){
	

	if($after_pageload) 
		drupal_add_js("

						$(document).ready(function()
						{
						
							alert('" . $message . "');
							
 						});
 	
	  			     ", 'inline');
	else 
		drupal_add_js("

						alert('" . $message . "');
 	
				   	  ", 'inline');
		
}





// Определить тип и версию браузера пользователя
function zp_functions_browser_info(){

	$agent = $_SERVER['HTTP_USER_AGENT'];
	//echo '$HTTP_USER_AGENT = ' . $agent . '<br>';	
	$browsers = array(  
        // закомментируем блок ниже ниже (до IE) для ускорения
        // так как всё равно нам нужно проверить только на IE
        /*
		'Opera' => 'Opera',  
        'Mozilla Firefox' => '(Firebird)|(Firefox)',
        'Galeon' => 'Galeon',
        'Mozilla'=> 'Gecko',
        'MyIE'=>'MyIE',
        'Lynx' => 'Lynx',  
        'Netscape' => '(Mozilla/4\.75)|(Netscape6)|(Mozilla/4\.08)|(Mozilla/4\.5)|(Mozilla/4\.6)|(Mozilla/4\.79)',
        'Konqueror' => 'Konqueror',
        'SearchBot' => '(nuhk)|(Googlebot)|(Yammybot)|(Openbot)|(Slurp/cat)|(msnbot)|(ia_archiver)',
		*/
        'IE' => '(MSIE [0-9]\.[0-9]+)',
        //'IE8' => '(MSIE 8\.[0-9]+)',
        //'IE4' => '(MSIE 4\.[0-9]+)',
    );  
   
    foreach($browsers as $browser=>$pattern)  
    {  
/////////        if (eregi($pattern, $agent))
        if (preg_match('/' . $pattern . '/i', $agent))
        {
            if($browser == 'IE') 
            	$ver = substr($agent,strpos($agent,"MSIE")+5,3);	
            
            // закомментируем условия ниже для ускорения
            // так как всё равно нам нужно проверить только на IE
            
            /*
            else if ($browser == 'Opera')
            	$ver = substr($agent,strpos($agent,"Opera")+6,4);
            else if ($browser == 'Netscape')
            	$ver = substr($agent,strpos($agent,"Mozilla")+8,3);
            else if ($browser == 'Mozilla Firefox')
            	$ver = substr($agent,strpos($agent,"Firefox")+8,3);
            */
            
        	return array($browser, $ver[0]);  
        }
    }  
    return null;
    
    
	/*
	
	// Искать сигнатуру Internet Explorer
	if(ereg('MSIE ([0-9].[0-9]{1,2})', $agent, $version))
	{
		$browse_type = "IE";
		$browse_version = $version[1];
	}
		// Искать сигнатуру Opera
	else if(ereg( 'Opera ([0-9].[0-9]{1,2})'. $agent, $version))
	{
		$browse_type = "Opera";
		$browse_version = $version[1];
	}
		// Искать сигнатуру Netscape. Проверка браузера Netscape
		// *должна* выполняться после проверки Internet Explorer и Opera,
		// поскольку все эти браузеры любят сообщать имя
		// Mozilla вместе с настоящим именем.
	else if(ereg( 'Mozilla/([0-9].[0-9]{1,2})'. $agent, $version))
	{
		$browse_type = "Netscape";
		$browse_version = $version[1];
	}
	return array ($browse_type, $browse_version);
	
	*/
	
}






// выведем любимые магазины клиента и расстояния от них до клиента
function zp_functions_distances_to_client_loveshops($user_id = null, $user_nid = null){

	// найдём нид ноды скрытых данных клиента, если он не передан как аргумент
	if($user_id != null)
	{
		$user_nid = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user_id . '-hi')); 
	}
		
	
	// найдём координаты клиента
	$u_location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $user_nid));
	$u_location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $u_location);
	$u_location = db_fetch_array($u_location);
	
	// найдём любимые магазины клиента и их координаты
	$loveplaces = db_query("SELECT r_id, r_text from {node_field_multireference_data} WHERE nid  = %d", $user_nid);
	while($loveplace = db_fetch_array($loveplaces))
	{
		// найдём тип места (координаты будем показывать только для магазинов)
		$place_zp_art = db_result(db_query("SELECT field_zp_art_place_value from {content_field_zp_art_place} WHERE nid = %d", $loveplace['r_id']));		

		if(strlen($place_zp_art) == 8) // если очередное доступное местоположение - магазин (длина артикула - 8 символов)
		{
			
			// найдём координаты очередного магазина
			$s_location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $loveplace['r_id']));
			$s_location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $s_location);
			$s_location = db_fetch_array($s_location);
			
			// найдём расстояние до клиента от этого магазина
			$shop['distance'] = zp_functions_mapdistance($s_location['latitude'], $s_location['longitude'], $u_location['latitude'], $u_location['longitude']);

			$shop['name'] = $loveplace['r_text'];
			$shop['address'] = db_result(db_query("SELECT field_place_address_value from {content_field_place_address} WHERE nid  = %d", $loveplace['r_id']));
			
			$places[] = $shop;
		}
		else 
		{	
			// вычислим магазина, в котороы находится указанный отдел
			$parent_shop_zp_art = substr($place_zp_art, 0, 8);
			$parent_shop_nid = db_result(db_query("SELECT nid from {content_field_zp_art_place} WHERE field_zp_art_place_value  = '%s'", $parent_shop_zp_art));
			$parent_shop_name = db_result(db_query("SELECT title from {node} WHERE nid  = %d", $parent_shop_nid));
			$parent_shop_address = db_result(db_query("SELECT field_place_address_value from {content_field_place_address} WHERE nid  = %d", $parent_shop_nid));

			$s_location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $parent_shop_nid));
			$s_location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $s_location);
			$s_location = db_fetch_array($s_location);
			
			// найдём расстояние до клиента от этого магазина
			$shop['distance'] = zp_functions_mapdistance($s_location['latitude'], $s_location['longitude'], $u_location['latitude'], $u_location['longitude']);
			
			$place['name'] = $loveplace['r_text'];
			$place['address'] = $parent_shop_name . '. ' . db_result(db_query("SELECT field_place_address_value from {content_field_place_address} WHERE nid  = %d", $loveplace['r_id'])) . '. ' . $parent_shop_address;
			
			$places[] = $place;
			
		}
		
		
	} // end of while($loveplace = db_fetch_array($loveplaces))
	
	return $places;
	
}






// получим координаты магазина или клиента
function zp_functions_get_location($target_type, $target_id){

	if($target_type == 'user')
     	{

   			// найдём нид ноды скрытых данных текущего клиента
			$target_nid = db_result(db_query("SELECT nid from {node} WHERE title  = '%s'", 'u' . $target_id . '-hi'));
		
			$location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $target_nid));
			$location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $location);
			$location = db_fetch_array($location);

     	}
     	else if($target_type == 'shop')
     	{
   			$target_nid = db_result(db_query("SELECT nid from {content_field_zp_art_place} WHERE field_zp_art_place_value  = '%s'", $target_id));
     			
   			$location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $target_nid));
			$location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $location);
			$location = db_fetch_array($location);

     	}
	
	return $location;
	
} // end of zp_functions_get_location($target_type = 'user', $target_id){






// получим карту расположения магазина или клиента
function zp_functions_get_location_map($target_type = 'user', $target_id, $location = false, $map_type = 'mail', $map_num = 1){


	// сформируем url файла с картой
    
 	if($target_type == 'user')
   	{
		// for Denver
    	// $zp_server_directory = 'D:\\WebServers\\home\\zapokupkami-x.com\\www\\zpmaps\\users\\';	

    	// for remote server
   		//$zp_server_directory = $_SERVER['DOCUMENT_ROOT'] . base_path() . 'zpmaps/users/';	
   		$zp_server_directory = 'zpmaps/users/';	
   		//$map_file = $zp_server_directory . 'u' . $args->uid . '_map' . '.gif';
   	}
   	else // иначе это магазин
   	{
   		//$zp_server_directory = $_SERVER['DOCUMENT_ROOT'] . base_path() . 'zpmaps/shops/';	
   		$zp_server_directory = 'zpmaps/shops/';	
   		
   		//$map_file = $zp_server_directory . $node->field_zp_art_place[0]['value'] . '_map' . '.gif';
   		//$map_file = $zp_server_directory . $target_id . '_map' . '.gif'; // $target_id = zp id магазина
   	}
   		
   		
   	$map_file = $zp_server_directory;
   		
   	if($target_type == 'user')
   		$map_file .= 'u';  // а для магазина букву не ставим, так как ид включает букву z в начале
   			
   		
   	$map_file .= $target_id . '-map'; // $target_id = uid клиента или zp id магазина
   		
   	if($map_type == 'wap')
   		$map_file .= '-wap'; // для карты для использования в wap, меньшего размера
   		
   	if($map_num > 1)
   		$map_file .= '-' . $map_num; // если имеется несколько карт с разными местами расположениями (для одного клиента, например), добавляем номер карты, если это не 1... для первой карты номера не добавляем, вторая будет -2
   				
   	$map_file .= '.gif';
  			
   			
	
     // если карта ещё не была сформирована и сохранена на сервере, получаем её от Гугля
     if(!file_exists($_SERVER['DOCUMENT_ROOT'] . base_path() . $map_file))
     //if(1)
     {
     					
     	
     	if($target_type == 'user')
     	{
     	
     		if(!$location) // если в параметрах не были переданы координаты клиента, получаем их из базы
     		{
     		
     			// найдём нид ноды скрытых данных текущего клиента
				$target_nid = db_result(db_query("SELECT nid from {node} WHERE title  = '%s'", 'u' . $target_id . '-hi'));
		
				$location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $target_nid));
  				$location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $location);
  				$location = db_fetch_array($location);
     		}
     		
     		$marker_type = 'blueu'; // маркер с буквой U
     	}
     	else 
     	{
     		if(!$location) // если в параметрах не были переданы координаты магазина, получаем их из базы
     		{
     			$target_nid = db_result(db_query("SELECT nid from {content_field_zp_art_place} WHERE field_zp_art_place_value  = '%s'", $target_id));
     			
     			$location = db_result(db_query("SELECT lid from {location_instance} WHERE nid  = %d", $target_nid));
  				$location = db_query("SELECT latitude, longitude from {location} WHERE lid  = %d", $location);
  				$location = db_fetch_array($location);
     		}
     		
     		$marker_type = 'blues'; // маркер с буквой S
     	}
     		
     		
  				
    	// статическая картинка карты, получаемая с гугля
   
    	$static_map_url = 'http://maps.google.com/staticmap?center=';
    	$static_map_url .= $location['latitude'].','.$location['longitude'];
   		//$static_map_url .= '&zoom=16&size=334x300&maptype=mobile';
   		
   		
   		
   		if($map_type == 'wap')
   		{
   			$static_map_url .= '&zoom=15&maptype=mobile'; // чуть отдалаяем, так как почти ничего не попадает в карту
   			$static_map_url .= '&size=120x120'; // для вапа делаем картинку поменьше
   		}
   		else
   		{
   			$static_map_url .= '&zoom=16&maptype=mobile';
   			$static_map_url .= '&size=334x300';
   		}
   		
    	$static_map_url .= '&markers='.$location['latitude'].','.$location['longitude'].','.$marker_type;
    	$static_map_url .= '&key='. variable_get('googlemap_api_key', ''); //keys_api_get_key('gmap', $_SERVER['HTTP_HOST']);
    	

    
    	
    
    	// скопируем картинку с гугля в локальный файл (локальный путь файла на только что был сформирован)
    
    	// var. 1 ----> Working on Denver
    	//file_put_contents($map_file, file_get_contents($static_map_url));
     					
    	// var. 2
    	//copy($map_file, file_get_contents($static_map_url));
     					
    	// var. 3
    	//$destination=fopen($map_file,"w");
		//$source=fopen($static_map_url,"r");
		//while ($a=fread($source,1024)) 
		//fwrite($destination,$a);
		//fclose($source);
		//fclose($destination);
     					

    
     	// по причине ограничений провайдера, все вышеперечисленные методы не работают на удалённом сервере (первый из них точно работает локально на денвере)				
    	// var. 4 ----> CURL, working on remote
    	$out = fopen($map_file, 'wb');
    	if ($out == FALSE)
    	{
    		echo "Error opening destination file";
    	}
    	else 
    	{
    		$ch = curl_init();
         
    		curl_setopt($ch, CURLOPT_FILE, $out);
    		curl_setopt($ch, CURLOPT_HEADER, 0);
    		curl_setopt($ch, CURLOPT_URL, $static_map_url);
             
		    if(curl_exec($ch) === false)
    		{
    			echo "<br>Error is : ".curl_error ($ch);
    		}
    		
   
    		curl_close($ch); 
    						
    	} // end of else
   
    } // end of if(!file_exists($map_file))
     			

	return $map_file;
}









// формирование рекламного блока на основе модуля ad
// может возвращать единичный рекламный блок, блок со сменной рекламой (стандартная возможность ротации блока ad) или динамически сменяющиеся рекламные блоки с заданным эффектом

function zp_functions_ad_block($amount = NULL, $ad_type = 'ad', $source_type = 'ad_group_title', $source = NULL, $effect = 'scrollDown', $effect_delay = 2000, $bounce = 0, $slideshow_block_id){
	
	switch($source_type)	
	{
		
		case 'node_titles':
			
			$old_source = $source;
			foreach($old_source as $key => $node_title)
			{
				if($node_nid = db_result(db_query("SELECT nid from {node_revisions} WHERE title = '%s'", $node_title)))
					$source[$key] = $node_nid;
					
			}
			
		 
		case 'node_nids':

			$ad_block = NULL;
			
			if($ad_type == 'slide_show' AND ($amount > 1 OR $amount == NULL)) // если нужно показать слайд-шоу и количество не задано или больше одного, формируем содержимое для слайдшоу из отдельных рекламных блоков
			{
				
				foreach($source as $key => $node_nid)
				{
					if($key+1 > $amount)
						break;
					$ad_block .= ad(NULL, 1, array('nids' => $node_nid));
				}
				
				if($ad_block)
				{
					$ad_block = '<div id="slide_ad_block_' . $slideshow_block_id . '">' . $ad_block . '</div>';	
			
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.cycle.all.min.js');
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.easing.js');
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.easing.compatibility.js');
					
					drupal_add_js(
						"$(document).ready(
      									function() 
      									{
        									//$('.jquery_slideshow').css({height:'200px'});
        									//$('.jquery_slideshow').css({width:'200px'});
        									
        									$('#slide_ad_block_" . $slideshow_block_id . "').cycle
        														({
          															//fx: 'toss',
          															//fx: 'fade',
          															//fx: 'blindX',
          															//fx: 'uncover',
          															//fx: 'scrollDown', 

          															fx: '" . $effect . "'," 
																	
																	.($bounce ? // если нужен отскок, добавляет этот кусок кода
          															
    	  															" 
          															speedIn:  2000, 
    	  															speedOut: 500, 
    	  															easeIn:  'bounceout', 
    	  															easeOut: 'backin', 
    	  															//delay:   -" . $effect_delay . " //-2000
    	  															" 
          															: // иначе этот
          															
          															" 
          															//speed: " . $effect_delay . ", //2000,
          															" ). // продолжается обычный код
          															
          															"
          															timeout: " . $effect_delay ."//1000
          															
        														});

      									});", 
						'inline');
					
				}
			
			}
			else 
			if($ad_type == 'ad' OR ($ad_type == 'slide_show' AND $amount == 1)) // если нужно показать рекламный блок или нужно показать слайд-шоу, но количество равно одному, значит игнорируем требование показать слайдшоу и показываем простой рекламный блок
			{

				// сформируем список нидов для передачи в функцию модуля ad
				foreach($source as $key => $nid)
				{
					if($key == 0)
						$nids = $nid;
					else
						$nids .= ', ' . $nid;
				}
				
				if($nids)
				{
					// если список не пустой, формируем рекламный блок
					if($ad_block = ad(NULL, $amount, array('nids' => $nids))) // игнорируем группу, указываем ноды + количество реклам, которые будут показаны олновременно
					{
						$ad_block = '<div id="ad_block">' . $ad_block . '</div>';
					}
					
				}

			}
			
			break;
			
			
			
			
		
		case 'ad_group_name': // в нулевом элементе массива $source помещено название терма рекламной группы (созданной с помощью модуля ad)
			// найдём тид и передадим управление следующему варианту этого switch($source_type)
			// тут не нужен break;
			
			$source[0] = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s'", $source[0]));
			
			
			
			
		
		case 'ad_group_tid': // в нулевом элементе массива $source помещен номер tid рекламной группы (созданной с помощью модуля ad)
			
			$ad_block = NULL;
			
			if($ad_type == 'slide_show' AND ($amount > 1 OR $amount == NULL)) // если нужно показать слайд-шоу и количество не задано или больше одного, формируем содержимое для слайдшоу из отдельных рекламных блоков
			{
				//получим все ноды с рекламой из этой группы
				$nodes = db_query("SELECT nid FROM {term_node} WHERE tid = %d", $source[0]);
			
				if($node = db_fetch_object($nodes))
				{
					// если есть хоть одна нода, открываем группу
					$ad_block .= '<div id="slide_ad_block_' . $slideshow_block_id . '">';
				
					// и помещаем в неё первый элемент
					$ad_block .= ad(NULL, 1, array('nids' => $node->nid));
					$ad_count = 1;
				}

				while($ad_count < $amount AND $node = db_fetch_object($nodes))
				{
					// если есть ещё ноды, добавляем их как остальные элементы группы
					$ad_block .= ad(NULL, 1, array('nids' => $node->nid));
					$ad_count++;
				}

				if($ad_block) //закрываем группу, если она была открыта
				{
					$ad_block .= '</div>';
					
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.cycle.all.min.js');
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.easing.js');
					drupal_add_js('sites/all/modules/_Jstools/jquery_plugin/jquery.easing.compatibility.js');
					
					drupal_add_js(
						"$(document).ready(
      									function() 
      									{
        									//$('.jquery_slideshow').css({height:'200px'});
        									//$('.jquery_slideshow').css({width:'200px'});
        									
        									$('#slide_ad_block_" . $slideshow_block_id . "').cycle
        														({
          															//fx: 'toss',
          															//fx: 'fade',
          															//fx: 'blindX',
          															//fx: 'uncover',
          															//fx: 'scrollDown', 

          															fx: '" . $effect . "'," 
																	
																	.($bounce ? // если нужен отскок, добавляет этот кусок кода
          															
    	  															" 
          															speedIn:  2000, 
    	  															speedOut: 500, 
    	  															easeIn:  'bounceout', 
    	  															easeOut: 'backin', 
    	  															//delay:   -" . $effect_delay . " //-2000
    	  															" 
          															: // иначе этот
          															
          															" 
          															//speed: " . $effect_delay . ", //2000,
          															" ). // продолжается обычный код
          															
          															"
          															timeout: " . $effect_delay ."//1000
          															
        														});

      									});", 
						'inline');
					
				}
			
			}
			else 
			if($ad_type == 'ad' OR ($ad_type == 'slide_show' AND $amount == 1)) // если нужно показать рекламный блок или нужно показать слайд-шоу, но количество равно одному, значит игнорируем требование показать слайдшоу и показываем простой рекламный блок
			{

				// открываем группу
				$ad_block .= '<div id="ad_block">';
				
				// и помещаем в неё рекламный блок
				$ad_block .= ad($source[0], $amount); // вся группа + количество реклам, которые будут показаны олновременно

				//закрываем группу
				$ad_block .= '</div>';

			}
			
				
			
			break;
			
			
		default:
			
			break;
			
	} // end of switch($source_type)
	
	
	return $ad_block;
	
	
}










// вспомогательная функция для отладки
function zp_functions_show($obj, $option = false){

	if($option)
		return '<PRE>' . print_r($obj, $option) . '</PRE>';
	else 
	{
		echo '<PRE>';
		print_r($obj);
		echo '</PRE>';
	}
	
}



// функция формирования содержания для каталога статей и описаний (товаров и услуг, производителей и брендов, магазинов и заведений)
function zp_functions_get_issues_content($view_name = 'zp_issues_all', $current_tid = NULL, $parent_tid = NULL, $vid = NULL, $step = 0){

	$current_tid_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $current_tid));
	
	// если терм имеет прямую ссылку на ноду, считаем, что этот терм не имеет детей, т.е. подразделов
	// и возвращаем вьюс с родительским термом в качестве аргумента,
	// обрамлённый филдсетом
	
	
	if($current_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid  = %d", $current_tid)))
	{
		if($step > 1  AND !$_GET['page']) // показывает закрытыми все филдсеты, кроме корневых, если не был использован переход на страницу во вьюсах (листание страниц со списком)
		//if(0)
			$out = '<fieldset class="collapsible collapsed"><legend><a href="#">' . $current_tid_name . '</a></legend>';
		else 
			$out = '<fieldset class="collapsible"><legend><a href="#">' . $current_tid_name . '</a></legend>';

		cache_clear_all('*', 'cache_views', true);
			
		$view = views_get_view($view_name);
		
		
		if($view)
		{
			//zp_functions_show($view);
		
    		$view->filter[1] = array (
     			//'vid' => 3,
    			'tablename' => '',
      			'field' => 'term_node_7.tid',
      			'value' => array (
  						0 => $current_tid, 
						),
      			'operator' => 'AND',
      			'options' => '',
      			'position' => 1,
      			'id' => 'term_node_7.tid',
      			
    			);	
		
			//$limit = 0;
			//$out .= views_build_view('embed', $view, array(), FALSE, $limit);
			$out .= views_build_view('embed', $view, array(), $view->use_pager, $view->nodes_per_page);
		}

		
		$out .= '</fieldset>';
		
		
		return $out;
	}
	
	// иначе считаем, что это раздел
	// открываем филдсет с заголовком в виде названия текущего терма
	// получаем всех потомков, передаём каждого в эту же функцию рекурсивно
	// и закрываем филдсет
	
	$out = NULL;

	$childrens = db_query("SELECT tid FROM {term_hierarchy} WHERE parent  = %d", $current_tid);
	
	while($children = db_fetch_object($childrens))
		$out .= zp_functions_get_issues_content($view_name, $children->tid, $current_tid, $vid, $step + 1);

	
	if($out AND $step)
	{
		
		if($step > 1 AND !$_GET['page']) // показывает закрытыми все филдсеты, кроме корневых
		//if(0)
			$out = '<fieldset class="collapsible collapsed"><legend><a href="#">' . $current_tid_name . '</a></legend>' . $out . '</fieldset>'; 
		else 
			$out = '<fieldset class="collapsible"><legend><a href="#">' . $current_tid_name . '</a></legend>' . $out . '</fieldset>'; 
	}
		
	return $out;
	
}

















// группируем магазины по районам для second menu города
function zp_functions_shops_by_rajons($items)
{
	foreach($items as $type_tid => $type)
    {
    	if(is_array($type['children']))
    	{
    		foreach ($type['children'] as $stid => $shop)
    		{
    			
    			$rajon_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $stid));
    	 				
    			if(!$rajons[$rajon_tid]['data'])
    			{
    				$rname = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $rajon_tid));
    				$rnid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $rajon_tid));
    				$rajons[$rajon_tid]['data'] = l($rname, 'node/' . $rnid);
    			}
    	 				
    			$rajons[$rajon_tid]['children'][$stid]['data'] = $shop['data'];
    			$rajons[$rajon_tid]['children'][$stid]['children'] = array();

    		}
    	 			 	
    		//unset($items[$type_tid]['children']);
    	 	$items[$type_tid]['children'] = $rajons;
    	}
    	else 
    		unset($items[$type_tid]); // убираем пункт меню типа магазина, если в этом типе нет магазинов	
    }
	
	return $items;
}







//  функция для определения минимальной суммы покупки в магазине, в котором продаётся товар, nid которого передаётся как аргумент
// возвращается минимальная сумма покупки для этого магазина для текущего клиента
function zp_functions_shop_min_sum($c_nid, $uid)
{

	

	
	    	//найти тид продукта, продающегося в этом магазине
            //$c_tid = db_result(db_query("SELECT tid FROM {term_node} WHERE nid = %d", $c_nid));
            
            $c_tids = taxonomy_node_get_terms_by_vocabulary($c_nid, 1); 
      		foreach($c_tids as $c_tid)
          		$c_tid = $c_tid->tid;
	    	
            
            $term_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid = %d", $c_tid));
            
 	   		// задаём массив тидов продукта и первым элементом делаем терм самого продукта
        	$linage_c_tids = array($c_tid);
        
        	$count = 1;
        	while(($c_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $c_tid))) != 0)
	         {
    	       $linage_c_tids[] = $c_tid;
        	   $count++;
         	 } 
        
	        // для примерного понимания... 
    	    //$item_shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин. 
        	//$item_rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
	        //$item_city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом после страны
    	    //$item_country_tid = $linage_tids[$count-1];


// переопределяем минимальную сумму покупки в зависимости от настроек системы:
// мин.сумма покупки по умолчанию указывается на ноде настроек по умолчанию

// но каждая страна, город, район, магазин и клиент имеет свой коэффициент 
// - все кофээфициенты перемножаются и умножаются на значение минимальной суммы
// в итоге получаем значение минимальной суммы покупки в конкретном магазине
    
// коэффициент определяется при определении текущего магазина корзины 
// и заносится в массив под ключом 'min_sum'    
    
 			// найдём минимальную сумму покупки по умолчанию
 			// найдём номер ноды с настройками магазина по умолчанию
			//$zp_default_set_nid = db_result(db_query("SELECT nid from {node} WHERE type  = '%s'", 'zp_default_set'));
			//$min_sum_default = db_result(db_query("SELECT field_cart_min_sum_value from {content_type_zp_default_set} WHERE nid  = %d", $zp_default_set_nid));
			
			$zp_default_set = zp_functions_get_zp_default_set(); 
			

			
			$final_min_sum = $zp_default_set['cart_min_sum_default']; // зададим сначала минимальную стоимость покупки равную стоимости по умолчанию
			$user_min_sum_f = $zp_default_set['user_cart_min_sum_f'];
			
			//а затем перемножим её на коэффициенты страны, города, района и магазина
		    
			//переребираем страну, город, район, магазин (их тиды сохранены у нас в массиве $linage_c_tids[])
			//выясняем для каждого коэффициент минимальной стоимости и перемножаем между собой
			for($i = 1; $i <= 4; $i++)
 			 {
 			 	// найдём нид очередного элемента (страна, город, район или магазин)
 				$next_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid  = '%s'", $linage_c_tids[$count - $i]));
 				
 				// найдём его коэффициент мин. суммы корзины
 				$next_min_sum_f = db_result(db_query("SELECT field_cart_min_sum_f_value from {content_field_cart_min_sum_f} WHERE nid  = %d", $next_nid));
 				
 			 	//умножим найденный коэффициент на общий коэффициент
 				$final_min_sum  *= $next_min_sum_f; 
 			 }
 			 
			// домножим получившуюся сумму на ещё один коэффициент - конкретного клиента
			
			// найдём нид ноды скрытых данных текущего клиента
			//$u_hi_nid = db_result(db_query("SELECT nid from {node} WHERE title  = '%s'", 'u' . $uid . '-hi'));
			// получим значение коэффициента минимальной суммы покупки для текущего клиента из этой ноды
			//$user_min_sum_f = db_result(db_query("SELECT field_cart_min_sum_f_value from {content_field_cart_min_sum_f} WHERE nid  = %d", $u_hi_nid));
			
			
			
			//и теперь домножим получившуюся сумму на полученный коэффициент конкретного клиента 
			$final_min_sum *= $user_min_sum_f;
			
			// теперь переменная $final_min_sum содержит минимальную сумму покупки для этого магазина
		
			$data['final_min_sum'] = round($final_min_sum, 2);   
			$data['linage_c_tids'] = $linage_c_tids;
			$data['count'] = $count;

			return $data;
}





function zp_functions_shop_info($argument_shop_tid, $user_id = 0, $argument_shop_nid = 0)
{
	
	if(!$user_id)
	{
		global $user;
		$user_id = $user->uid;
	}
		
	

    //echo 'xxx ' . $user_id . ', ' . $argument_shop_tid; 
// зададим переменные для логотипа, адреса и прочих данных магазина
// будем сохранять в сессии данные (вернее, данные по файлам логотипов, по адресу маназина и т.д.) для всех просмотренных магазинов, в название данных в сессии будем вставлять тид магазина, 
// таким образом, не придётся каждый раз заново рассчитывать данные по магазину, если они уже были однажды определёны

	//if(!($cur_shop_info = $_SESSION[$argument_shop_tid . '_shop_info'] AND ($user_id > 0 AND $cur_shop_info['shop_min_sum'] AND $cur_shop_info['shop_min_sum'] != 0))) // если данные ещё не были рассчитаны, рассчитаем их и зададим соответствующие переменные сессии и для файла шаблона
	
	//if(!($cur_shop_info = $_SESSION[$argument_shop_tid . '_shop_info'])) // если данные ещё не были рассчитаны, рассчитаем их и зададим соответствующие переменные сессии и для файла шаблона	
	if(!($cur_shop_info = $_SESSION[$argument_shop_tid . '_shop_info']) OR ($cur_shop_info AND $user_id AND !$cur_shop_info['shop_min_sum'])) // если данные ещё не были рассчитаны, рассчитаем их и зададим соответствующие переменные сессии и для файла шаблона
    {
         	
          	// выясним ноду магазина по её тиду
      	    if(!$argument_shop_nid AND $argument_shop_tid)
          		$argument_shop_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $argument_shop_tid));
      	    
      	    //определим внутренний ZP артикул магазина
      	    $cur_shop_info['shop_id'] = db_result(db_query("SELECT field_zp_art_place_value from {content_field_zp_art_place} WHERE nid = %d", $argument_shop_nid));
      	    
      	    //определим название магазина
      	    $cur_shop_info['shop_name'] = db_result(db_query("SELECT title from {node} WHERE nid = %d", $argument_shop_nid));
      	    
      	    //вариант написания типа магазина в родительном падеже ("магазина")
      	    $cur_shop_info['shop_type_spell_2'] = explode(';', db_result(db_query("SELECT field_placetype_n_numofphotos_value from {content_field_placetype_n_numofphotos} WHERE nid = %d", $argument_shop_nid)));
            $cur_shop_info['shop_type_spell_2'] = explode('***', $cur_shop_info['shop_type_spell_2'][0]);
      	    
            $cur_shop_info['shop_type_spell_1'] = $cur_shop_info['shop_type_spell_2'][0];
            $cur_shop_info['shop_type_spell_2'] = $cur_shop_info['shop_type_spell_2'][1];
            //echo '--------------cur_shop_info[shop_type_spell_2] = ' . $cur_shop_info['shop_type_spell_2'] . '<br>';
      	    
      	    
      	    $cur_shop_info['shop_nid'] = $argument_shop_nid;
            $cur_shop_info['shop_tid'] = $argument_shop_tid;
            
            $cur_shop_info['shop_address'] = db_result(db_query("SELECT field_place_address_value from {content_field_place_address} WHERE nid = %d", $argument_shop_nid));
            

            
            //if($user_id > 0 AND $cur_shop_info['shop_min_sum'] AND $cur_shop_info['shop_min_sum'] != 0)
            if($user_id > 0 AND !$cur_shop_info['shop_min_sum'])
            {
            	//$data = zp_functions_shop_min_sum($argument_shop_nid, $user_id); // потом надо перенести эту функцию из phptemplate сюда, но чтобы и все остальные модули вызывали именно отсюда функцию, а не из phptemplate
            	$data = zp_functions_shop_min_sum($argument_shop_nid, $user_id);
            	$cur_shop_info['shop_min_sum'] = $data['final_min_sum'];

            }
          	

            
            $_SESSION[$argument_shop_tid . '_shop_info'] = $cur_shop_info;
	}         

	return $cur_shop_info;	
}




function zp_functions_get_cart_shop_data($cid = null, $user_id = null, $c_nid = null){


	//if(!($c_shop_tids = $_SESSION['c_shop_tids'])) // если не определена сессионная переменная с тидами магазина корзины, пытаемся её определить

	if(!($c_shop_tids = $_SESSION['c_shop_tids']) OR ($c_shop_tids AND $user_id AND !$c_shop_tids['shop_min_sum'])) // если не определена сессионная переменная с тидами магазина корзины, пытаемся её определить{
	{	
	// если id текущей корзины не указан,
		// считаем, что номер корзины в базе равен номеру юзера
		
		if(!$cid OR !$user_id)
			global $user;
			
		if(!$cid)
			$cid = $user->uid;
		
		if(!$user_id)
			$user_id = $user->uid;
			
	
		if(!$c_nid)
			$c_nid = db_result(db_query("SELECT nid FROM {uc_cart_products} WHERE cart_id = %d", $cid));
			
		if($c_nid)   // т.е. если корзина не пуста
		{

			// если корзина при этом не пустая, то определяем сессионную переменную $_SESSION['c_shop_tids'] и название магазина в ней
			$c_tids = taxonomy_node_get_terms_by_vocabulary($c_nid, 1);
			foreach($c_tids as $c_tid)
				$c_tid = $c_tid->tid;

			$term_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid = %d", $c_tid));

			// задаём массив тидов продукта и первым элементом делаем терм самого продукта
			$linage_c_tids = array($c_tid);

			$count = 1;
			while(($c_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $c_tid))) != 0)
			{
				$linage_c_tids[] = $c_tid;
				$count++;

			}

			// определим данные по текущему магазину
			$c_shop_tids = zp_functions_shop_info($linage_c_tids[$count-4], $user_id);

			// сохраняем данные в сессионной переменной
			$_SESSION['c_shop_tids'] = $c_shop_tids;


		} // end of if(!($c_nid = db_result(db_query("SELECT nid FROM {uc_cart_products} WHERE cart_id = %d", $cid))))   // т.е. если корзина пуста
		else
			return null; 
			
	}
	
	return $c_shop_tids;

}







// генерация нового заказа с зарезервированным номером, указанным аргументом $r_order_id

function zp_function_order_new_reserved_id($uid = 0, $order, $r_order_id, $state = 'in_checkout') {
  
  if ($uid > 0) {
    $user = user_load(array('uid' => $uid));
    $email = $user->mail;
  }

  $order->order_id = $r_order_id;
  
  $order->uid = $uid;
  $order->order_status = uc_order_state_default($state);
  $order->primary_email = $email;

  
  if(!db_result(db_query("SELECT order_id from {uc_orders} WHERE order_id = %d", $order->order_id)))
  {
  	db_query("INSERT INTO {uc_orders} (order_id, uid, order_status, order_total, "
          ."primary_email, delivery_first_name, delivery_last_name, delivery_phone, "
          ."delivery_company, delivery_street1, delivery_street2, delivery_city, "
          ."delivery_zone, delivery_postal_code, delivery_country, billing_first_name, "
          ."billing_last_name, billing_phone, billing_company, billing_street1, "
          ."billing_street2, billing_city, billing_zone, billing_postal_code, "
          ."billing_country, payment_method, data, created, modified) VALUES "
          ."(%d, %d, '%s', 0, '%s', '', '', '', '', '', '', '', 0, '', 0, '', "
          ."'', '', '', '', '', '', 0, 0, 0, '', '', %d, %d)", $order->order_id,
           $uid, $order->order_status, $email, time(), time());

  	module_invoke_all('order', 'new', $order, NULL);
  }

  return $order;
}








function zp_functions_product_d_factor($nid, $user_id){
		
		// разные продукты даже в одном магазине могут иметь разные коэффициенты доставки
		// т.к. могут находиться в разных отделах с разными коэффициентами доставик

	
 
        // вычисляем коэффициент доставки
        // равный перемноженным коэффициентам страна*город*район*магазин*отдел(ы)*клиент-общий*клиент-по-всей-иерархии-от-отдела-до-страны
        // выясним всю последовательность до страны, затем тиды страны, города, района и магазина
  

        //$node_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid)); 
        $node_tids = taxonomy_node_get_terms_by_vocabulary($nid, 1); 
      	
        // определим терм ноды продукта
        foreach($node_tids as $node_tid)
          $node_tid = $node_tid->tid;
      	
      	// определим родителя терма данной ноды. Это будет как раз терм отдела, в котором продаётся этот продукт
        $parent_otdel_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid));
        $parent_otdel_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $parent_otdel_tid)); 

		
    	//$d_factor_otdel = zp_functions_d_factor_otdel($node_tid, $parent_otdel_nid, $user_id);
		//return $d_factor_otdel
		return zp_functions_d_factor_otdel($parent_otdel_tid, $parent_otdel_nid, $user_id);

}








//function zp_functions_get_zp_default_set($option = 'reset')
function zp_functions_get_zp_default_set($option = null) {

    if ($option == 'reset')
        unset($_SESSION['zp_default_set']);



    // загружаем из базы массив с переменными по умолчанию

    global $user;

    // если массив пока не определён или в нём не определён параметр nid (номер ноды с параметрами по умолчанию),
    // находим параметр nid и добавляем его в массив
    //////////if(!($zp_default_set = $_SESSION['zp_default_set']))
    if (!($zp_default_set = $_SESSION['zp_default_set']) OR $zp_default_set['user_real_uid'] != $user->uid) {
        $zp_default_set['nid'] = db_result(db_query("SELECT nid from {node} WHERE type = '%s'", 'zp_default_set'));

        // заносим в сессионную переменную значение ноды скрытых данных пользователя
        // считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
        // но для анонимуса поставляем специальный нид с отдельными настройками
        if ($user->uid)
            $user_virtual_uid = $user->uid;
        else
            $user_virtual_uid = db_result(db_query("SELECT uid from {users} WHERE name = '%s'", 'guest'));

        $user_data_node_title = 'u' . $user_virtual_uid . '-hi';

        $zp_default_set['user_real_uid'] = $user->uid;
        $zp_default_set['user_virtual_uid'] = $user_virtual_uid;
        $zp_default_set['user_data_node_title'] = $user_data_node_title;


        //$zp_default_set['user_data_hi_nid'] = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi')); 
        $zp_default_set['user_data_hi_nid'] = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", $user_data_node_title));

        // значение по умолчанию для минимальной стоимости "дорогого" товара и способа его отображения может переопределяться для конкретного юзера
        // поэтому выясним сначала, заданы ли эти переменные для текущего пользователя
        // если заданы, то используем их значения, а не значения по умолчанию для всего сайта

        $user_costly_data = db_fetch_array(db_query("SELECT field_u_show_costly_value, field_u_costly_level_value FROM {content_type_u_hidden_i} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));
        $zp_default_set['u_show_costly'] = $user_costly_data['field_u_show_costly_value'];
        $zp_default_set['u_costly_level'] = $user_costly_data['field_u_costly_level_value'];


        if ($user->uid) {
            // moved upper
            ///////////$zp_default_set['user_data_hi_nid'] = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi')); 
            // основной город юзера
            $zp_default_set['main_place_user']['tid'] = db_result(db_query("SELECT field_user_main_place_tid from {content_type_u_hidden_i} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));
            $zp_default_set['main_place_user']['nid'] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $zp_default_set['main_place_user']['tid']));
            //$zp_default_set['main_place_user']['name'] = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $zp_default_set['main_place_user']['tid']));
            $main_place_user = db_fetch_array(db_query("SELECT title, type from {node} WHERE nid = %d", $zp_default_set['main_place_user']['nid']));
            $zp_default_set['main_place_user']['name'] = $main_place_user['title'];
            $zp_default_set['main_place_user']['type'] = $main_place_user['type'];

            // коэффициент минимальной суммы корзины для конкретного пользователя
            // считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
            $zp_default_set['user_cart_min_sum_f'] = db_result(db_query("SELECT field_cart_min_sum_f_value from {content_field_cart_min_sum_f} WHERE nid  = %d", $zp_default_set['user_data_hi_nid']));

            // общий коэффициент доставки конкретного клиента
            // считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
            $zp_default_set['user_d_factor_global'] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));


            // moved upper
            /*
              // значение по умолчанию для минимальной стоимости "дорогого" товара и способа его отображения может переопределяться для конкретного юзера
              // поэтому выясним сначала, заданы ли эти переменные для текущего пользователя
              // если заданы, то используем их значения, а не значения по умолчанию для всего сайта

              $user_costly_data = db_fetch_array(db_query("SELECT field_u_show_costly_value, field_u_costly_level_value FROM {content_type_u_hidden_i} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));
              $zp_default_set['u_show_costly'] = $user_costly_data['field_u_show_costly_value'];
              $zp_default_set['u_costly_level'] = $user_costly_data['field_u_costly_level_value'];

             */
        }



        if (isset($zp_default_set['main_place_user']))
            $zp_default_set['main_place_default'] = $zp_default_set['main_place_user'];
        else {
            // основной город пользователя по умолчанию, который показывается при входе на сайт без авторизации или если город авторизованного пользователя не задан
            //$zp_default_set['main_city_default']['name'] = 'Харьков';

            $zp_default_set['main_place_default']['tid'] = db_result(db_query("SELECT field_default_main_place_tid from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid']));
            $zp_default_set['main_place_default']['nid'] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $zp_default_set['main_place_default']['tid']));
            //$zp_default_set['main_place_user']['name'] = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $zp_default_set['main_place_default']['tid']));
            $main_place_default = db_fetch_array(db_query("SELECT title, type from {node} WHERE nid = %d", $zp_default_set['main_place_default']['nid']));
            $zp_default_set['main_place_default']['name'] = $main_place_default['title'];
            $zp_default_set['main_place_default']['type'] = $main_place_default['type'];
        }

        // значение по умолчанию для минимальной стоимости "дорогого" товара и способа его отображения
        // данные переменные могут переопределяться для конкретных юзеров, поэтому если эти переменные для текущего пользователя (вычислены выше)
        // если заданы, то используем их значения, а не значения по умолчанию для всего сайта
        if ($user_costly_data['field_u_show_costly_value'] > 0) {
            $zp_default_set['show_costly'] = $user_costly_data['field_u_show_costly_value'];
            $zp_default_set['u_costly'] = 1; // флаг, показывающий, что юзер имеет персональные настройки по дорогому товару
        }
        else
            $zp_default_set['show_costly'] = db_result(db_query("SELECT field_show_costly_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid']));

        if ($user_costly_data['field_u_costly_level_value'] > 0) {
            $zp_default_set['costly_level'] = $user_costly_data['field_u_costly_level_value'];
            $zp_default_set['u_costly'] = 1; // флаг, показывающий, что юзер имеет персональные настройки по дорогому товару
        }
        else
            $zp_default_set['costly_level'] = db_result(db_query("SELECT field_costly_level_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid']));

        // делим значение процента доставки на 100 и получаем коэффициент
        // добавляем пустую строку к числу, тем самым преобразуя это число в строку, чтобы поменьше знаков сохранять в базе (без этого сохраняло 20 знаков после запятой почему-то, даже с функцией round)
        // заодно округляем до 2 знаков после запятой
        $zp_default_set['d_f'] = round(db_result(db_query("SELECT field_d_percents_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid'])) / 100, 2) . '';

        // значение по умолчанию для минимальной суммы корзины по умолчанию
        $zp_default_set['cart_min_sum_default'] = db_result(db_query("SELECT field_cart_min_sum_value from {content_type_zp_default_set} WHERE nid  = %d", $zp_default_set['nid']));

        // значение по умолчанию для минимальной стоимости доставки по умолчанию
        $zp_default_set['min_dost_price_default'] = db_result(db_query("SELECT field_min_dost_price_default_value from {content_type_zp_default_set} WHERE nid  = %d", $zp_default_set['nid']));



        // стоимость надбавки за заказ по телефону по умолчанию (используется при формировании стоимости заказа)
        $zp_default_set['phone_order_fee'] = round(db_result(db_query("SELECT field_phone_order_fee_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid'])), 2) . '';

        // сохраняем значение коэффициента доставки по умолчанию в базе (чтобы заново не вычислять для каждого продукта)
        $_SESSION['zp_default_set'] = $zp_default_set;
    }
    else if (!isset($zp_default_set['user_data_hi_nid'])) 
    {
        ////////////else if($user->uid AND !isset($zp_default_set['user_data_hi_nid'])) {

        $zp_default_set['nid'] = db_result(db_query("SELECT nid from {node} WHERE type = '%s'", 'zp_default_set'));

        // если после первого запуска этой функции данные по юзеру всё же не были почему-то инициализированы
        // (а это почему-то получается, как я ни бился, так и не понял, почему, придумал только такую повторную проверку)
        // то тогда инициализируем данные по юзеру заново
        // но для анонимуса поставляем специальный нид с отдельными настройками

        if ($user->uid)
            $user_virtual_uid = $user->uid;
        else
            $user_virtual_uid = db_result(db_query("SELECT uid from {users} WHERE name = '%s'", 'guest'));

        $user_data_node_title = 'u' . $user_virtual_uid . '-hi';

        $zp_default_set['cur_user_uid'] = $user->uid;
        $zp_default_set['user_real_uid'] = $user->uid;
        $zp_default_set['user_virtual_uid'] = $user_virtual_uid;
        $zp_default_set['user_data_node_title'] = $user_data_node_title;


        //////////$zp_default_set['user_data_hi_nid'] = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi')); 
        $zp_default_set['user_data_hi_nid'] = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user_data_node_title . '-hi'));


        if ($user->uid) 
        {
            // основной город юзера
            if ($zp_default_set['main_place_user']['tid'] = db_result(db_query("SELECT field_user_main_place_tid from {content_type_u_hidden_i} WHERE nid = %d", $zp_default_set['user_data_hi_nid']))) 
            {
                $zp_default_set['main_place_user']['nid'] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $zp_default_set['main_place_user']['tid']));
                //$zp_default_set['main_place_user']['name'] = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $zp_default_set['main_place_user']['tid']));
                $main_place_user = db_fetch_array(db_query("SELECT title, type from {node} WHERE nid = %d", $zp_default_set['main_place_user']['nid']));
                $zp_default_set['main_place_user']['name'] = $main_place_user['title'];
                $zp_default_set['main_place_user']['type'] = $main_place_user['type'];

                $zp_default_set['main_place_default'] = $zp_default_set['main_place_user'];
            }

            $zp_default_set['user_cart_min_sum_f'] = db_result(db_query("SELECT field_cart_min_sum_f_value from {content_field_cart_min_sum_f} WHERE nid  = %d", $zp_default_set['user_data_hi_nid']));
            $zp_default_set['user_d_factor_global'] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));
        }

        $user_costly_data = db_fetch_array(db_query("SELECT field_u_show_costly_value, field_u_costly_level_value FROM {content_type_u_hidden_i} WHERE nid = %d", $zp_default_set['user_data_hi_nid']));
        $zp_default_set['u_show_costly'] = $user_costly_data['field_u_show_costly_value'];
        $zp_default_set['u_costly_level'] = $user_costly_data['field_u_costly_level_value'];


        if ($user_costly_data['field_u_show_costly_value'] > 0) 
        {
            $zp_default_set['show_costly'] = $user_costly_data['field_u_show_costly_value'];
            $zp_default_set['u_costly'] = 1; // флаг, показывающий, что юзер имеет персональные настройки по дорогому товару
        }
        else
            $zp_default_set['show_costly'] = db_result(db_query("SELECT field_show_costly_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid']));

        if ($user_costly_data['field_u_costly_level_value'] > 0) 
        {
            $zp_default_set['costly_level'] = $user_costly_data['field_u_costly_level_value'];
            $zp_default_set['u_costly'] = 1; // флаг, показывающий, что юзер имеет персональные настройки по дорогому товару
        }
        else
            $zp_default_set['costly_level'] = db_result(db_query("SELECT field_costly_level_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid']));

        // сохраняем значение коэффициента доставки по умолчанию в базе (чтобы заново не вычислять для каждого продукта)
        $_SESSION['zp_default_set'] = $zp_default_set;
    }

    //zp_functions_show($zp_default_set);

    return $zp_default_set;
}
        
       


// найти родительский отдел ноды (продукта обычно)
function zp_functions_get_parent_otdel($node_nid, $where = 'product'){
	
	// если находимся в товаре, а не в отделе, то нид обрабатываемого товара будет соответствовать текущему url (node/node_nid)
	if($node_nid == arg(1) or $where == 'cart') // проверяем на 'cart', так как в корзине мы не можем быстро определить родителя, так как в url указан не родительский отдел продукта, а ссылка на корзину - поэтому определяем родительский отдел длинным путём, а не коротким
	{
		// определим терм ноды продукта   
     	$node_tids = taxonomy_node_get_terms_by_vocabulary($node_nid, 1); 
     
     	// тут возвращается один терм, но в таком формате, из которого данные удобно вытаскивать через удну итерацию foreach
     	foreach($node_tids as $node_tid)
       		$node_tid = $node_tid->tid;
      	
     	// определим родителя терма данной ноды. Это будет как раз терм отдела, в котором продаётся этот продукт
     	$parent_otdel['tid'] = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid));
     
     	$parent_otdel['nid'] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $parent_otdel['tid'])); 
	}
	else 
	{
		// иначе находимся в отделе и обрабатываемый сейчас товар является тизером в отделе или в корзине
		// поэтому номер ноды с текущего url и является номером ноды родительского отдела
		
		$parent_otdel['nid']= arg(1); 
        $node_tids = taxonomy_node_get_terms_by_vocabulary($parent_otdel['nid'], 1);

        // определим терм ноды продукта
        foreach($node_tids as $node_tid)
          //$node_tid = $node_tid->tid;
          $parent_otdel['tid'] = $node_tid->tid;
	}
	
	 return $parent_otdel;
}




//function zp_functions_d_factor_otdel($node_tid, $parent_otdel_nid, $user_id)
function zp_functions_d_factor_otdel($parent_otdel_tid, $parent_otdel_nid, $user_id)
{
	
	//echo '$parent_otdel_tid = ' . $parent_otdel_tid . '<br>';
	//echo '$parent_otdel_nid = ' . $parent_otdel_nid . '<br>';
	
	// определение коэффициента доставки для конкретного юзера и конкретного отдела (с учётом коэф. доставки всех его родительских отделов) 
 	   
	// если уид не передан или передан 0 (незалогиненный юзер), пытаемся выяснить виртуального юзера
        if(!$user_id)
        {
            // загружаем из базы массив с переменными по умолчанию
            $zp_default_set = zp_functions_get_zp_default_set();

            // если виртуальный uid не определён почему-то, используем уид текущего юзера
            if(!$user_id = $zp_default_set['user_virtual_uid'])

            {
                    global $user;
                    $user_id = $user->uid;
            }
        }
	
	if(!($d_factor_otdel = $_SESSION['df-u' . $user_id . '-' . $parent_otdel_nid]) OR $_SESSION['masquarade'])
 	{
 	   	// esli factor dlia otdela eshio ne opredelen, opredeliaem ego (polnostiu copiruem block iz modulia uc_cart.module)
 	   	// задаём массив и первым элементом делаем терм первого отдела, в котором продаётся этот продукт
        
 	   	// массив с тидами родительских отделов пока вроде не нужен
        //$linage_tids = array($parent_otdel_tid);
        
 	   	// начинаем формировать массив с родительскими отделами товара
 	   	$d_f_nids[] = $parent_otdel_nid; // первый родительский отдел, в котором собственно и содержится товар
        
        // поле с фактором стоимости доставки во всех типах нод называется d_factor
        // соответственно, когда таких полей несколько (одинаковые в разных типах нодов), эти значения хранятся в таблице content_field_d_factor
        // а значение этой переменной содержится в поле field_d_factor_value таблицы которое можно вычислить по номеру ноды nid
        // начинаем формировать массив с коэффициентами стоимости доставки
        $d_f_vals[] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $parent_otdel_nid)); 
        

        //while(($node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0)
        while(($parent_otdel_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $parent_otdel_tid))) != 0)
         {
           // массив с тидами родительских отделов пока вроде не нужен
           //$linage_tids[] = $parent_otdel_tid;
           
           $d_f_nids[] = $d_f_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $parent_otdel_tid)); 
           
           /*
           if($_SESSION['df' . $d_f_nid])
           {
           	 	echo 'Есть посчитанный коэф. для не ближайшего родительского отдела ' . db_result(db_query("SELECT title from {node} WHERE nid = %d", $d_f_nid)); 
           		zp_functions_show($_SESSION['df' . $d_f_nid]);
           }
           */
           
           $d_f_vals[] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $d_f_nid)); 
         } 

        // для примерного понимания... 
        //$item_shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин. 
        //$item_rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
        //$item_city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом после страны
        //$item_country_tid = $linage_tids[$count-1];

  		// загружаем из базы массив с переменными по умолчанию, если он ещё не загружен вначале функции
  		if(!$zp_default_set)
                    $zp_default_set = zp_functions_get_zp_default_set();
  		
 		// дополняем массив с коэффициентами стоимости доствки общим коэффициентом доставки конкретного клиента
  		// считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
        // в принципе, можно потом сделать сложнее - определить пользователя текущей корзины и работать с ним (если админские права позволяю).
        //$user_hi_nid = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user_id . '-hi')); 
        //$d_f_vals[++$i] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $user_hi_nid));
  		$d_f_vals[++$i] = $zp_default_set['user_d_factor_global'];
		
  		// определим для конкретного клиента отличные от единицы коэффициенты для любимых магазинов, отделов и т.д. , в которых находится этот продукт 
		// и затем добавим их в список коэффициентов для этого продукта (отдела, в котором содержится этот продукт, вообще-то)
		
		// структура сохранённой сессионной переменной для конкретного юзера
		// по идее, она формируется при формировании меню пользователя

		//$user_shops_data = $_SESSION['user_shops_data']; // эта переменная устанавливается при формировании шапки, до нодов, так что она к этому моменту точно задана		
		$user_shops_data = zp_functions_get_user_shops_data(); // эта переменная устанавливается при формировании шапки, до нодов, так что она к этому моменту точно задана		
		
		
		foreach($user_shops_data as $user_shops)
		{
		   if(in_array($user_shops['nid'], $d_f_nids))
		   		$d_f_vals[++$i] = $user_shops['price_factor'];	
		}

        // перемножаем все коэффициенты и получаем финальный коэффициент
        $final_d_f = 1; 
  		foreach($d_f_vals as $d_f_val)
  			$final_d_f *= $d_f_val;

        //получим из базы значение процента, который определяет стоимость доставки по умолчанию
        //стоимость доставки товара по умолчанию равна стоимости товара, умноженной на процент по умолчанию 
        //и затем умноженной на только что посчитанный финальный коэффициент доставки
        
        // процент доставки по умолчанию берётся с поля типа d_percents (поле field_d_percents_value в таблице content_type_zp_default_set)
        
        // в этом поле значение содержится в виде процента. Поэтому чтобы получить коэффициент, делим это значение на 100.
 
        // окончательный коэффициент доставки равен коэффициенту по умолчанию $zp_default_set['d_f'], 
        // умноженному на перемноженные все остальные коэффициенты доставки для данного юзера $final_d_f 
        // заодно округляем до 2 знаков после запятой
        $d_factor_otdel = round($final_d_f * $zp_default_set['d_f'], 2) . '';
        
        // сохраним коэффициент доставки для данного отдела в сессионной переменной
        //if(!$_SESSION['masquarade'])
        	$_SESSION['df-u' . $user_id . '-' . $parent_otdel_nid] = $d_factor_otdel;

        //echo $_SESSION['df' . $parent_otdel_nid]; 	
 	   	 	
	} // end of if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))   

	// teper' u nas opredel`n factor dostavki $d_factor_otdel dlia otdela
 	   	 

	return $d_factor_otdel;
	
}























function zp_functions_continue_shopping_link()
{
	

// определим ссылку для линка "Continue shopping" (Продолжить покупки)

// - если прошлая страница была продуктом, отделом, магазином и т.д., значит показываем ссылку на это

// - если прошлая страница какого-то другого типа, значит показываем:

// отдел, если переменная текущего отдела установлена в сессиях
// если отдел не задан, показываем магазин, если переменная текущего магазина установлена в сессиях
// если магазин не задан, показываем текущий город
// или если город не задан... страну, но для страны я пока переменную не задал

    	//$page = uc_referer_uri(); // показывает предыдущую ссылку, но уже испорченную by pathauto
    	
    	
    	
    	//$otd = $_SESSION['current_otdel'];
    	//$sho = $_SESSION['current_shop'];
    	//$cit = $_SESSION['current_city'];
    	//drupal_set_message("0 - otd = $otd, sho = $sho, cit = $cit, page = $page", 'error');
    	
    	$current_tid = NULL;
    	
    	if($current_tid = $_SESSION['current_otdel'])
    	{
    	  
    		$nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid  = %d", $current_tid));
    		//drupal_set_message("1 - otd = $otd, sho = $sho, cit = $cit, page = $page", 'error');
         }
    	else 
    	 if($current_tid = $_SESSION['current_shop'])
    	 {
			
    	 	$nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid  = %d", $current_tid));
    	 	//drupal_set_message("2 - otd = $otd, sho = $sho, cit = $cit, page = $page", 'error');
    	 }
    	else 
    	 if($current_tid = $_SESSION['current_rajon'])
    	 {
    	  
    	 	$nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $current_tid));
    	  //drupal_set_message("3 - otd = $otd, sho = $sho, cit = $cit, page = $page", 'error');
    	 }
    	else 
    	 if($current_tid = $_SESSION['current_city'])
    	 {
    	  
    	 	$nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $current_tid));
    	  //drupal_set_message("3 - otd = $otd, sho = $sho, cit = $cit, page = $page", 'error');
    	 }
    	 else 
    	 {
    	 	//иначе пока не выбрано ни одно место для покупок, поэтому указываем для перехода ноду главной страницы
    	 	$nid = db_result(db_query("SELECT nid FROM {node} WHERE title = '%s' AND type = '%s'", 'Home', 'home_page'));
    	 	
    	 }
    	
    	$continue_shopping['nid'] = $nid;
    	$continue_shopping['tid'] = $current_tid;
    	
    	return $continue_shopping;
    	   
    	//return l(variable_get('uc_continue_shopping_text', t('Continue shopping')), 'node/' . $page); 	

}





function zp_functions_renew_product_data($unser_data, $order_product_nid)
{

// ----------------------------- изменение формата поля data продукта, возвращаемого в корзину


// сейчас формат атрибутов в заказе слегка отличается от стандартного формата атрибутов в корзине
// поэтому при возврате в корзину формат нужно изменить на стандартный

   	        
/*  

// стандартный формат поля data корзины

Array
(
    [attributes] => Array
        (
            [1] => Нет
            [2] => 3
        )

    [model] => 
    [shippable] => 1
    [module] => uc_product
)


// изменённый мною формат поля data корзины

Array
(
    [attributes] => Array
        (
            [Ваши пожелания к товару (укажите)] => Нет
            [Подарочная упаковка (выберите)] => Обёртка
        )

    [model] => 
    [shippable] => 1
    [module] => uc_product
    [#opt_price] => 3
    [#dost_price] => 7.8
)


*/ 	        
	
	
$aids = array();

unset($unser_data['#opt_price']);
unset($unser_data['#dost_price']);

foreach($unser_data['attributes'] as $name => $option)
  {
  	
  	// сохраняем все полученных из базы соответствия aid и oid, а затем считываем их из массива, чтобы лишний раз не обращаться к базе, если в заказе много однотипных товаров с однотипными атрибутами
  	if(!isset($aids[$name]['aid']))
  	{ 
 	  	
  	  	$attrs = db_query("SELECT aid, display from {uc_attributes} WHERE name = '%s'", $name);
        
        while($aid = db_fetch_array($attrs))
        {
        	if($oid = db_result(db_query("SELECT oid FROM {uc_attribute_options} WHERE name = '%s' AND aid = %d", $option, $aid['aid'])))
        	{
        		if(db_result(db_query("SELECT oid FROM {uc_product_options} WHERE oid = %d AND nid = %d", $oid, $order_product_nid)))
        		{
        			$aids[$name]['aid'] = $aid['aid'];
  	  				$aids[$name]['display'] = $aid['display'];
  	  				$aids[$name]['oid'] = $oid;
        			break;
        		}
        	}
        }

  	}
  	
   	if($aids[$name]['display'] == 0) // если этот атрибут - просто текстовое поле
  	 {
  	   unset($unser_data['attributes'][$name]); // удаляем этот элемент из массива и меняем его на другой
  	   
  	   // если эта переменная до сих пор не определена
  	   // значит не было найдено совпадение по опциям атрибута, а это возможно только тогда, когда опция - текст, введённый пользователем
  	   // тогда просто находим атрибут с текущим названием, а если их несколько, то выбираем из них именно текстовый тип
  	   if(!$aids[$name]['aid'])
  	   	$aids[$name]['aid'] = db_result(db_query("SELECT aid FROM {uc_attributes} WHERE name = '%s' AND display = %d", $name, 0));
  	 
  	   $unser_data['attributes'][$aids[$name]['aid']] = $option; // просто меняем название элемента в массиве (имя атрибута меняем на его aid)
  	   continue; 
  	 
  	 } 
  	else
  	//if($aids[$name]['display'] == 1)
  	{
	  unset($unser_data['attributes'][$name]); // удаляем этот элемент из массива и меняем его на другой	

	  // сохраняем все полученных из базы соответствия aid и oid, а затем считываем их из массива, чтобы лишний раз не обращаться к базе, если в заказе много однотипных товаров с однотипными атрибутами
	  if(!isset($aids[$name]['oid']))
  	    {
  	   	  	$aids[$name]['oid'] = db_result(db_query("SELECT oid from {uc_attribute_options} WHERE name  = '%s' AND aid = %d", $option, $aids[$name]['aid']));
  	    }
	  
	  $unser_data['attributes'][$aids[$name]['aid']] = $aids[$name]['oid']; // меняем название элемента в массиве (имя атрибута меняем на его aid)
  	  continue;
  	}

  }

// ----------------------------- конец изменения формата поля data        
  return $unser_data;
}











// ------------ функции определения расстояния

function zp_functions_mapdistance($StartLat = 0, $StartLong = 0, $EndLat = 0, $EndLong = 0)
{

//echo 'StartLat = ' . $StartLat . ', StartLong = ' . $StartLong . ', EndLat = ' . $EndLat . ', EndLong = ' . $EndLong;
	
	
/*
// исходные данные (тестовые) Далее закомментированные результаты показаны именно для этих тестовых координат
$StartLat = 55.45;   // Начальная широта
$StartLong = 37.38;  // Начальная долгота
$EndLat =  52.3;     // Конечная широта
$EndLong = 13.22;    // Конечная долгота

// исходные данные новые
$StartLat = 55.45;   // Начальная широта
$StartLong = 37.38;  // Начальная долгота
$EndLat =  -22.53;     // Конечная широта
$EndLong = -43.14;    // Конечная долгота

// do daninogo
$StartLat = "40°34'" . '46.22"С';
$StartLong = "73°58'" . '6.48"З';
$EndLat = "40°37'" . '53.22"С';
$EndLong = "74° 0'" . '26.93"З';
*/

/*
// do mam inogo
$StartLat = "59°57'" . '23.22"С';
$StartLong = "30°21'" . '17.02"В';
$EndLat = "40°37'" . '53.22"С';
$EndLong = "74° 0'" . '26.93"З';
*/

if(strpos($StartLat, '°') !== FALSE)
	$StartLat =  zp_functions_mapcoord_switch($StartLat);
if(strpos($StartLong, '°') !== FALSE)	
	$StartLong =  zp_functions_mapcoord_switch($StartLong);
if(strpos($EndLat, '°') !== FALSE)	
	$EndLat =  zp_functions_mapcoord_switch($EndLat);
if(strpos($EndLong, '°') !== FALSE)	
	$EndLong =  zp_functions_mapcoord_switch($EndLong);


//echo 'StartLat = ' . $StartLat . ', StartLong = ' . $StartLong . ', EndLat = ' . $EndLat . ', EndLong = ' . $EndLong . '<br><br>';



// Переменные, используемые для вычисления смещения и расстояния

/*
fPhimean  		: Double;                           // Средняя широта
fdLambda  		: Double;                           // Разница между двумя значениями долготы
fdPhi     		: Double;                           // Разница между двумя значениями широты
fAlpha    		: Double;                           // Смещение
fRho      		: Double;                           // Меридианский радиус кривизны
fNu       		: Double;                           // Поперечный радиус кривизны
fR        		: Double;                           // Радиус сферы Земли
fz        		: Double;                           // Угловое расстояние от центра сфероида
fTemp     		: Double;                           // Временная переменная, использующаяся в вычислениях
Distance  		: Double;                           // Вычисленное расстояния в метрах
Bearing   		: Double;                           // Вычисленное от и до смещение

*/


// Константы, используемые для вычисления смещения и расстояния

$D2R = 0.017453;           // Константа для преобразования градусов в радианы
$R2D = 57.295781;          // Константа для преобразования радиан в градусы
$a = 6378137;              // Основные полуоси
$b = 6356752.314245;	   // Неосновные полуоси
$e2 = 0.006739496742337;   // Квадрат эксцентричности эллипсоида
$f = 0.003352810664747;    // Выравнивание эллипсоида


// Вычисляем разницу между двумя долготами и широтами и получаем среднюю широту

$fdLambda = ($StartLong - $EndLong) * $D2R;   // 0,422
$fdPhi = ($StartLat - $EndLat) * $D2R;	      // 0,05497695
$fPhimean = (($StartLat + $EndLat)/2)*$D2R;	  // 0,940280375


// Вычисляем меридианные и поперечные радиусы кривизны средней широты

$fTemp = 1 - $e2*(pow(sin($fPhimean), 2));                	       //0,995603037
$fRho = ($a * (1 - $e2)) / pow($fTemp, 1.5);                 	   //6377165,541
$fNu = $a / (sqrt(1 - $e2 * (sin($fPhimean) * sin($fPhimean))));   //6392205,628


// Вычисляем угловое расстояние

$fz = sqrt(pow(sin($fdPhi / 2.0), 2) + cos($EndLat * $D2R) * cos($StartLat * $D2R) * pow(sin($fdLambda / 2.0), 2));	// 0,126273167
$fz = 2 * asin($fz);	// 0,253222333


// Вычисляем смещение

$fAlpha = cos($EndLat * $D2R) * sin($fdLambda) * (1 / sin($fz));	// 0,999064896	ВНИМАНИЕ! провврить!! яя взялл в скобки  последнее выражение 1/ .in
$fAlpha = asin($fAlpha);	// 1,527547044

//echo 'Смещение fAlpha = ' . $fAlpha . '<br>';

// Вычисляем радиус Земли

$fR = ($fRho * $fNu) / (($fRho * pow(sin($fAlpha), 2))+($fNu * pow(cos($fAlpha), 2)));	//6392177,447

//echo 'радиус Земли fR = ' . $fR . ' м<br>';

// Получаем смещение и расстояние
$Distance = $fz * $fR; // Distance, m, 1618642,088

//echo 'Distance = '. $Distance/1000 . ' км<br>';

if(($StartLat < $EndLat) and ($StartLong < $EndLong))
 {
   $Bearing = abs($fAlpha * $R2D);	// 87,52200088
   //echo '<br>1. ($StartLat < $EndLat) and ($StartLong < $EndLong) => ';
 }
  else
   if(($StartLat < $EndLat) and ($StartLong > $EndLong))
     {
      $Bearing = 360 - abs($fAlpha * $R2D);	//272,4779991
      //echo '<br>2. ($StartLat < $EndLat) and ($StartLong > $EndLong) => ';
     }
      else
        if(($StartLat > $EndLat) and (StartLong>EndLong))
          {
            $Bearing = 180 + abs($fAlpha * $R2D); // 267,5220009
            //echo '<br>3. ($StartLat > $EndLat) and (StartLong>EndLong) => ';
          }
            else
              if(($StartLat > $EndLat) and ($StartLong < $EndLong))
                {
                  $Bearing = 180 - abs($fAlpha * $R2D); // 92,47799912
                  //echo '<br>4. ($StartLat > $EndLat) and ($StartLong < $EndLong) => ';
                }
//echo 'Азимут/Bearing = ' . $Bearing . ' градусов <br>';




$distance_data['distance'] = round($Distance/1000, 2);
$distance_data['bearing'] = round($Bearing, 2);

return $distance_data;
//return $Distance/1000;
}




// изменение входного представления координат

function zp_functions_mapcoord_switch($coord)
{
  //echo 'test 0 = ' . $coord . '<br>';

  $replace1 = array ("°" => " ", "''" => " ", "'" => " ", '"' => ' ');
  $replace2 = array ("  " => " ");

  $coord = strtr(strtr($coord, $replace1), $replace2);

  //echo 'test 1 = ' . $coord . "<br>";

  $coord = explode(" ", $coord);
  $coordNapr = $coord[3];
  $coord = $coord[0]+($coord[1]*60+$coord[2])/3600;

  //echo $coord[0] . ' ' . $coord[1] . ' ' . $coord[2] . '<br>';


  if($coordNapr == 'Ю' OR $coordNapr == 'S' OR $coordNapr == 'З' OR $coordNapr == 'W')
   $coord = -1*$coord;

  //echo 'New $coord = ' . $coord . '<br>';
  //echo '$coordNapr = ' . $coordNapr . '<br>';



  return $coord;

}

  


// make user_menu variable
function zp_functions_setUserMenu_andSession($user, &$vars, $target = NULL, $current_url = NULL)
{
    //$masquarade = $_SESSION['masquarade']; // флаг, использовался ли модуль маскарад в сессии
    //$cur_user = $user->uid;
    //drupal_set_message("cur user id = $cur_user, masquarade = $masquarade", 'error');

    if ($user->uid && $target != 'logged out') 
    { // if user is logged in
      
        if (!$current_url) {
          $current_url = $_SERVER['REQUEST_URI'];
        }
        else {
          if ($current_url == 'http://www.zapokupkami.com/') {
            $current_url = '/';
          }
        }
        
        if (!$_SESSION['masquarade']) 
        {
            //drupal_set_message("0", 'error');
            //if(db_result(db_query("SELECT uid_as FROM {masquerade} WHERE sid = '%s' AND uid_from = %d ", session_id(), $user->uid)))
            if (db_result(db_query("SELECT uid_from FROM {masquerade} WHERE uid_as = %d ", $user->uid))) {
                $_SESSION['masquarade'] = 1;
                //drupal_set_message("1", 'error');
            }
        }

        if (!($vars['user_menu'] = $_SESSION['user_menu']) OR $_SESSION['masquarade']) 
        { // если меню пользователя уже сформировано в этой сессии, загрузить его, а не формировать заново
            //drupal_set_message("-1", 'error'); 
            //if(!$masquarade) $masquarade = 0;
            //drupal_set_message("masquarade = $masquarade", 'error');
            if ($items = nice_tax_menu_build_items(2, 0, 0, 0)) {

                // затем сформируем для пунктов Личные данные и Жалобы и предложения подпукты и ссылку соответственно
                // для текущего пользователя
                // затем найдём номера tid для этих пунктов и по этим номерам исправим ссылки в сФормированном меню $items
                $items_personal = array();



                // страница с настройками доступа пользователя - почта, пароль и т.д.

                $items_personal['access'] = array(
                    //'data' => l('Настройки доступа', 'node/73'),
                    'data' => l('Настройки доступа', MY_USER_SETTINGS_NODE),
                    //'children' => nice_tax_menu_add_kids($term->tid, $vid, $mydepth),
                    'children' => array(),
                );



                // страница с открытывми собственными данными пользователя, которые он может сам заполнять (интересы, возраст и пр.)
                /* пока не даём клиентам заводить такие страницы
                    $items_personal['open_info'] = array(
                    'data' => l('Открытые данные', 'node/'.db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u'. $user->uid . '-info'))),
                    //'children' => nice_tax_menu_add_kids($term->tid, $vid, $mydepth),
                    'children' => array(),
                    );
                    */


                $items_personal['prefer'] = array(
                    'data' => l('Мои предпочтения', 'node/' . db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-pp'))),
                    //'children' => nice_tax_menu_add_kids($term->tid, $vid, $mydepth),
                    'children' => array(),
                );


                // сформируем меню Любимые магазины (если выполняются эти строки, значит они выполняются первый и единственный раз за сессию)
                // а значит и меню с любимыми магазинами будет формироваться первый и единственный за сессию раз
                // данные находятся на ноде со скрытыми данными пользователя, на которых указаны любимые магазины



                ////if ($results = db_query("SELECT r_id, r_text, description from {node_field_multireference_data} WHERE nid = %d", db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi')))) 
                if ($results = db_query("SELECT r.r_id, r.r_text, r.description FROM {node_field_multireference_data} r LEFT JOIN {node} n ON n.nid = r.nid WHERE n.title = 'u$user->uid-hi'")) 
                {
                    //$result = db_query("SELECT pcid, name FROM {uc_product_classes}");
                    while ($result = db_fetch_object($results)) 
                    {
                        //$classes[$c->pcid] = $c->name;


                        $shop_tid = db_result(db_query("SELECT tid from {term_data} WHERE vid = 1 AND name = '%s'", $result->r_text));


                        // теперь эта переменная вычисляется отдельно в функции zp_functions_get_user_shops_data(), ещё до формирования пользовательского меню
                        // так как польз. меню было перекинуто в футер и рассчитывается в самом конце формирования страницы, а данные нужны раньше
                        /*
                            $user_shops_data[$shop_tid] = array(
                            't_name' => $result->r_text,
                            //'tid' => $shop_tid, // tid выносим в ключ массива ($user_shops_data[$shop_tid])
                            'nid' => $result->r_id,
                            'price_factor' => $result->description,
                            );
                            */


                        $count = 0;
                        $linage_tids = array($shop_tid);
                        while (($shop_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $shop_tid))) != 0) {
                            $linage_tids[] = $shop_tid;
                            $count++;
                        }

                        $current_name = $result->r_text;

                        if ($count >= 4) { // отдел
                            /*
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            $shop_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $linage_tids[$count - 3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            $rajon_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $linage_tids[$count - 2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            $city_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $linage_tids[$count - 1]));
                            */
                            $love_place = db_fetch_object(db_query("SELECT city.name AS city, rajon.name AS rajon, shop.name AS shop FROM {term_data} city LEFT JOIN {term_data} shop ON shop.tid = " . $linage_tids[$count - 3] . "  LEFT JOIN {term_data} rajon ON rajon.tid = " . $linage_tids[$count - 2] . " WHERE city.tid  = " . $linage_tids[$count - 1]));

                            ////$hint = $city_name . '->' . $rajon_name . '->' . $shop_name . '->' . $current_name . ' (только этот отдел)';
                            $hint = $love_place->city . '->' . $love_place->rajon . '->' . $love_place->shop . '->' . $current_name . ' (только этот отдел)';
                        }
                        /*
                            if($count == 4) // отдел
                            {
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            $shop_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            $rajon_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            $city_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-1]));

                            $hint = $city_name . '->' . $rajon_name . '->' . $shop_name . '->' . $current_name;
                            }
                            */
                        if ($count == 3) {  // магазин
                            /*
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            //$shop_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            $rajon_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count - 2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            $city_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count - 1]));
                            */
                            $love_place = db_fetch_object(db_query("SELECT city.name AS city, rajon.name AS rajon FROM {term_data} city LEFT JOIN {term_data} rajon ON rajon.tid = " . $linage_tids[$count - 2] . " WHERE city.tid  = " . $linage_tids[$count - 1]));

                            ////$hint = $city_name . '->' . $rajon_name . '->' . $current_name;
                            $hint = $love_place->city . '->' . $love_place->rajon . '->' . $current_name;
                        }

                        if ($count == 2) { // район
                            /*
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            //$shop_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            //$rajon_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            $city_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count - 1]));
                            */
                            $love_place = db_fetch_object(db_query("SELECT city.name AS city FROM {term_data} city WHERE city.tid  = " . $linage_tids[$count - 1]));

                            ////$hint = $city_name . '->' . $current_name . ' (все магазины района)';
                            $hint = $love_place->city . '->' . $current_name . ' (все магазины района)';
                        }

                        if ($count == 1) { // город
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            //$shop_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            //$rajon_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            //$city_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-1]));

                            $hint = $current_name . ' (все магазины города)';
                        }


                        if ($count == 0) { // страна
                            //$shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин, магазин стоит 4-м по списку (в этом массива - с конца)
                            //$shop_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-3]));
                            //$rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
                            //$rajon_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-2]));
                            //$city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом с конца (после страны)
                            //$city_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $linage_tids[$count-1]));

                            $hint = $current_name . ' (все магазины страны)';
                        }




                        //drupal_set_message("current_name = $current_name, shop_name = $shop_name, rajon_name = $rajon_name, city_name = $city_name", 'error');
                        //drupal_set_message("hint = $hint", 'error');


                        $items_user_shops[$result->r_id . '-s'] = array(
                            'data' => l($result->r_text, 'node/' . $result->r_id, array('title' => $hint)),
                            'children' => array());
                    }

                    // теперь эта переменная вычисляется отдельно в функции zp_functions_get_user_shops_data(), ещё до формирования пользовательского меню
                    // так как польз. меню было перекинуто в футер и рассчитывается в самом конце формирования страницы, а данные нужны раньше
                    //$_SESSION['user_shops_data'] = $user_shops_data;

                    /*
                        foreach($user_shops_data as $key => $value)
                        drupal_set_message("key = $key, value = $value", 'error');
                        */

                    //$q_get = $_GET['q'];
                    //drupal_set_message("q_get = $q_get ", 'error');
                    // терм для меню Любымые магазины
                    $tid_favorite_shops = db_result(db_query("SELECT tid from {term_data} WHERE vid = 2 AND name = '%s'", 'Любимые магазины'));

                    $items[$tid_favorite_shops] = array(
                        //'data' => l('Любимые магазины', 'node/'.db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $tid_favorite_shops)), array('title' => 'Магазины, доступные Вам для покупок через наш сервис')),
                        'data' => '<div class="user-menu-button" title="Магазины, доступные Вам для покупок через наш сервис">Любимые магазины</div>',
                        'children' => $items_user_shops,
                    );
                }




                // прицепим сформированные пункты к основному меню
                ///////$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 2 AND name = '%s'", 'Личные данные'))]['children'] = $items_personal;
                $items[1]['children'] = $items_personal;
                // зададим ссылку для пункта меню Жалобы и предложения
                ////$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 2 AND name = '%s'", 'Жалобы и предложения'))]['data'] = l('Жалобы и предложения', 'node/' . db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-pc')));
                $items[4]['data'] = l('Жалобы и предложения', 'node/' . db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-pc')));





                // если это админ, добавим в меню пункт для администрации сайта
                if ($user->uid == 1) 
                {

                    $items['admin'] = array(
                        'data' => l(t('Admin'), 'admin/', array('title' => t('Site administration'), 'class' => 'site_admin')),
                        'children' => array(),
                    );
                }



                // поместим все пункты в один родительский пункт
                $items_root['root'] = array(
                    //'data' => l('Ваше личное меню', '', array('title' => 'Личное меню пользователя', 'id' => 'user-menu-button')),
                    'data' => '<div class="user-menu-button capt" title="Личное меню пользователя">Ваше личное меню</div>',
                    'children' => $items,
                );



                $vars['user_menu'] = theme('nice_tax_menu', $items_root, array('class' => 'ddmenu', 'id' => 'user_menu'), 'down', 'left');
                // добавим приветствие и логаут для пользователя

                $output = '<div id="user-bar-logged">';

                //$output .= t('<p class="user-info">Здравстуйте, !user, добро пожаловать на сайт zapokupkami.com</p>', array('!user' => theme('username', $user))); 
                $output .= t('<p class="user-info">Здравствуйте, !user, <br>добро пожаловать на наш сайт!</p>', array('!user' => $user->name));
                /*
                    $output .= theme('item_list',
                    array(l(t('Sign out'), 'logout', array('class' => 'sign_out'), drupal_get_destination()),),
                    NULL,
                    'ul',
                    array('class' => 'logged_user_buttons'));
                    */

                // добавим палочки между блоками текста для красоты :)
                $output .= '<div id="delim1">|</div> <div id="delim2">|</div>';






                // оригинальная версия, отправляющая пользователя при выходе на страницу, на которой он когда-то залогинился
                // это не есть правильно
                //$output .= l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашего экаунта'), drupal_get_destination());
                //$output .= l(t(' '), 'node/75', array('id' => 'help_button', 'title' => 'Помощь'), drupal_get_destination());		   
                //$output .= '</div>';
                //$lout .= l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашего экаунта'), drupal_get_destination());
                
                
                
                if ($current_url != '/')
                    $lout .= l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашей учётной записи'), 'destination=' . $current_url);
                else
                    $lout .= l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашей учётной записи'), 'destination=' . '');


                //$hlp .= l(t(' '), 'node/75', array('id' => 'help_button', 'title' => 'Помощь')); //, drupal_get_destination());		   
                //$lout_help_closediv = $lout . $hlp . '</div>';
                $lout_help_closediv = $lout . '</div>';


                $vars['user_menu'] .= $output;

                // добавим к меню остальные пункты блока пользователя
                //$vars['user_menu'] .= $output;
                // сохраним сформированное меню пользователя в переменной сессии для дяльнейшего повторного использования
                $_SESSION['user_menu'] = $vars['user_menu'];


                // добавим хелп и выход, формирующийся заново для каждой страницы 
                $vars['user_menu'] .= $lout_help_closediv;


                // сохраним также боковое меню в раскрытом виде для использования позже
                $_SESSION['user_menu_side'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'user_menu_side'), 'right');

                //$um = $vars['user_menu'];
                //drupal_set_message("um = $um", 'error');
            }
        } // end of if(!$_SESSION['user_menu'])
        else 
        {
            // если меню уже было сформировано, просто выводим его
            //$vars['user_menu'] = $_SESSION['user_menu'];
            //drupal_set_message("user menu recreate", 'error'); 
            //$lout = l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашего экаунта'), drupal_get_destination());
            if ($current_url != '/')
                $lout = l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашей учётной записи'), 'destination=' . $current_url);
            else
                $lout = l(t('Выйти'), 'logout', array('id' => 'logout_button', 'title' => 'Выйти из Вашей учётной записи'), 'destination=' . '');

            //$hlp = l(t(' '), 'node/75', array('id' => 'help_button', 'title' => 'Помощь')); //, drupal_get_destination());		   
            //$lout_help_closediv = $lout . $hlp . '</div>';
            $lout_help_closediv = $lout . '</div>';


            // добавим к меню остальные пункты блока пользователя
            //$vars['user_menu'] .= $output;

            $vars['user_menu'] .= $lout_help_closediv;
        }
    }
    else 
    { // if not logged in, show login form
        $output = '<div id="user-bar-notlogged">';
        $output .= t('<p class="login-invite">Для пользования сервисом "zapokupkami.com" введите свои данные...</p>');
        $output .= '<div class="input">' . drupal_get_form('custom_user_login_blocks') . '</div>';
        //$output .= '<div class="input">' . '' . '</div>'; 
        $output .= '</div>';

        $vars['user_menu'] = $output; // заменить на показ формы с логином
    }

    
} // end of function zp_functions_getUserMenu($user, &$vars)




// glavnoe menu first_menu 
function zp_functions_setFirstMenu_andSession(&$vars)
{
    if (!($vars['first_menu'] = $_SESSION['first_menu'])) 
    {
        if (!($vars['first_menu'] = variable_get('zp_first_menu', null))) 
        {
                if ($items = nice_tax_menu_build_items(4, 0, 0, 0)) 
                {

                    // так как для первой страницы мы не можем просто назначить пункт меню, изменим данные для этого пункта в меню
                    // для этого определим тид пункта "На главную", так как по этому тиду (как ключу в массиве) и можно обратиться в массив с пунктами меню

                    ////$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'На главную'))] = array(
                    $items[11] = array(
                        'data' => l('На главную', 'http://www.zapokupkami.com/', array('title' => 'Перейти на главную страницу сайта')),
                        'children' => array(),
                    );


                    // зададим ссылку для пункта меню Возврат / обмен, так как просто присвоить её нельзя, ибо это ссылка на главу в другой странице
                    ////$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Инфо'))]['children'][db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Возврат / обмен'))] = array(
                    $items[15]['children'][31] = array(
                        'data' => l('Возврат / обмен', 'http://' . $_SERVER['HTTP_HOST'] . '/help/pravila-i-osobennosti-raboty-nashego-servisa#vozvrat-i-obmen', array('title' => 'Правила возврата и обмена доставленных товаров')),
                        'children' => array(),
                    );


                    //$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Инфо'))]['children'][db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Конфиденциальность'))] = array(
                    $items[15]['children'][33] = array(
                        'data' => l('Конфиденциальность', 'http://' . $_SERVER['HTTP_HOST'] . '/help/pravila-i-osobennosti-raboty-nashego-servisa#konfidencialnost', array('title' => 'Вопросы конфиденциальности и безопасности')),
                        'children' => array(),
                    );


                    ///////$items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Помощь'))] = array(
                    $items[38] = array(
                        'data' => l('Помощь', 'http://' . $_SERVER['HTTP_HOST'] . '/help/pravila-i-osobennosti-raboty-sluzhby-dostavki-za-pokupkami', array('title' => 'Правила и особенности работы нашего сервиса')),
                        'children' => array(),
                    );

                    /*
                        // зададим ссылку для пункта меню Жалобы и предложения
                        $items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 2 AND name = '%s'", 'Жалобы и предложения'))]['data'] = l('Жалобы и предложения', 'node/'.db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u'. $user->uid . '-pc')));

                        */

                    /*
                        // терм для меню Любимые магазины
                        $tid_favorite_shops = db_result(db_query("SELECT tid from {term_data} WHERE vid = 2 AND name = '%s'", 'Любимые магазины'));
                        // нода, прицепленная к этому терму
                        $nid_favorite_shops = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $tid_favorite_shops));
                        $items[$tid_favorite_shops] = array(
                        'data' => l('Любимые магазины', 'node/'.$nid_favorite_shops, array('title' => 'Магазины, доступные Вам для покупок через наш сервис')),
                        'children' => $items_user_shops,
                        );
                        */



                    // ВРЕМЕННО уберём пункт меню "Блог"     
                    /////unset($items[db_result(db_query("SELECT tid from {term_data} WHERE vid = 4 AND name = '%s'", 'Блог'))]);
                    unset($items[14]);



                    $vars['first_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'first_menu'), 'down');
                    variable_set('zp_first_menu', $vars['first_menu']);
                    
                } // end of if ($items = nice_tax_menu_build_items(4, 0, 0, 0)) 
        
        } // end of if (!($vars['first_menu'] = variable_get('zp_first_menu', null))) 
        
        $_SESSION['first_menu'] = $vars['first_menu'];
        
    } // end of if (!($vars['first_menu'] = $_SESSION['first_menu'])) 

} // end of function zp_functions_getFirstMenu()




function zp_functions_setSecondMenu_andSession_forProdOrDept($node, &$vars, &$cur_shop_info, &$argument_shop_tid, &$argument_rajon_tid, &$argument_city_tid)
{
    global $user;
    
    // если находимся в продукте, найдём по товару текущий магазин и установим меню товаров текущего магазина
    // также установим текущий город и магазин
    //$node_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid)); 
    if(!$linage_tids = unserialize($_SESSION[$node->nid.'tids']))
    {
        $node_tids = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        foreach ($node_tids as $node_tid)
            $node_tid = $node_tid->tid;

        $linage_tids = array();
        //$linage_tids[] = $node_tid;
        $save_node_tid = $node_tid;

        $count = 0;
        while (($node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0) {
            $linage_tids[] = $node_tid;
            $count++;
        }
        $_SESSION[$node->nid.'tids'] = serialize($linage_tids);
    }
    else
        $count = count($linage_tids);
    
    //$argument_shop_tid = $linage_tids[$count-3]; // вариант город-магазин
    $argument_shop_tid = $linage_tids[$count - 4]; // вариант город-район-магазин. Третьим элементом в этом варианте становится район
    $argument_rajon_tid = $linage_tids[$count - 3];
    $argument_city_tid = $linage_tids[$count - 2]; // при любом варианте город будет вторым элементом после страны
    // зададим переменную текущего магазина        
    $_SESSION['current_shop'] = $argument_shop_tid;
    $_SESSION['current_rajon'] = $argument_rajon_tid;
    $_SESSION['current_city'] = $argument_city_tid;
    
    if(!$_SESSION['current_city_name'] = $_SESSION['citytid' . $argument_city_tid . 'name'])
    {
        $_SESSION['current_city_name'] = db_result(db_query("SELECT name from {term_data} WHERE tid  = %d", $argument_city_tid));
        $_SESSION['citytid' . $argument_city_tid . 'name'] = $_SESSION['current_city_name'];
    }

    //$argument_city_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $argument_shop_tid)); 
    // зададим переменные для логотипа, адреса и прочих данных магазина
    // будем сохранять в сессии данные (вернее, данные по файлам логотипов, по адресу магазина и т.д.) для всех просмотренных магазинов, в название данных в сессии будем вставлять тид магазина, 
    // таким образом, не придётся каждый раз заново рассчитывать данные по магазину, если они уже были однажды определёны

    $cur_shop_info = zp_functions_shop_info($argument_shop_tid, $user->uid);
    $_SESSION['current_shop_name'] = $cur_shop_info['shop_name'];
    $_SESSION['current_shop_type_sp2'] = $cur_shop_info['shop_type_spell_2'];

    if ($node->type == 'c_department')
    //$_SESSION['current_otdel'] = $linage_tids[0]; // если находимся в отделе, значит устанавливаем терм текущей ноды для переменной отдела
        $_SESSION['current_otdel'] = $save_node_tid; // поправка... так как в данной подпрограмме мы почему-то не сохранили терм текущей ноды в линедже, то берём оригинальную переменную, а не ищем её в массиве
    else
    //$_SESSION['current_otdel'] = $linage_tids[1]; // если находимся в продукт, значит устанавливаем терм родителя текущей ноды для переменной отдела
        $_SESSION['current_otdel'] = $linage_tids[0]; // поправка... так как в данной подпрограмме мы почему-то не сохранили терм текущей ноды в линедже, то нужно брать нулевой элемент

    if ($argument_shop = $_SESSION['n' . $cur_shop_info['shop_nid'] . '_shop'])
        $vars['second_menu'] = $argument_shop['smenu'];
    else 
    {
        /*
            if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $argument_shop_tid))
            {
            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'second_menu'), 'down');
            $argument_shop['smenu'] = $vars['second_menu'];
            }
            */

        // храним меню магазина в общей переменной для всех пользователей,  
        // чтобы заново каждый раз не генерировать меню из тысяч наименований
        // если меню нет в общей переменной, создаём его и помещаем в эту переменную
        //if(!($vars['second_menu'] = variable_get('n' . $cur_shop_info['shop_nid'] . '_shop_smenu', null)))
        // РАСКОММЕНТИРОВАТЬ ПОСЛЕ ТЕСТИРОВАНИЯ!
        if (!($vars['second_menu'] = variable_get('shop_smenu_nid' . $cur_shop_info['shop_nid'], null))) 
        {
            if ($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $argument_shop_tid)) 
            {
                //$vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu catalog', 'id' => 'second_menu'), 'down'); // без superfish
                $argument_shop['smenu'] = $vars['second_menu'];

                // сохраняе меню в общую переменную
                //variable_set('n' . $cur_shop_info['shop_nid'] . '_shop_smenu', $vars['second_menu']);
                variable_set('shop_smenu_nid' . $cur_shop_info['shop_nid'], $vars['second_menu']);
            }
        }
        else
            $argument_shop['smenu'] = $vars['second_menu'];


        $argument_shop['stid'] = $argument_shop_tid;
        $argument_shop['rtid'] = $argument_rajon_tid;
        $argument_shop['ci_tid'] = $argument_city_tid;
        $_SESSION['n' . $cur_shop_info['shop_nid'] . '_shop'] = $argument_shop;
    }
}




function zp_functions_setSecondMenu_andSession_forShop($node, &$vars, &$argument_shop_tid, &$argument_rajon_tid, &$argument_city_tid)
{
    // установим меню товаров текущего магазина
    // также установим текущий город и магазин
    // сбрасываем переменную отдела
    $_SESSION['current_otdel'] = NULL;


    if ($argument_shop = $_SESSION['n' . $node->nid . '_shop']) 
    {
        $_SESSION['current_shop'] = $argument_shop['stid'];
        $cur_shop_info = zp_functions_shop_info($argument_shop['stid'], $user->uid);
        $_SESSION['current_shop_name'] = $cur_shop_info['shop_name'];
        $_SESSION['current_shop_type_sp2'] = $cur_shop_info['shop_type_spell_2'];

        $_SESSION['current_city'] = $argument_shop['ci_tid'];
        
        if(!$_SESSION['current_city_name'] = $_SESSION['citytid' . $argument_shop['ci_tid'] . 'name'])
        {
            $_SESSION['current_city_name'] = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $argument_shop['ci_tid']));
            $_SESSION['citytid' . $argument_shop['ci_tid'] . 'name'] = $_SESSION['current_city_name'];
        }
        
        $_SESSION['current_rajon'] = $argument_shop['rtid'];

        $vars['second_menu'] = $argument_shop['smenu'];
    } 
    else 
    {
        // если просто запрашивать тид с базы, то по магазину хватается не тот тид, а ошибочный тид из другого каталога, поэтому меню не формируется, 
        // db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid));
        // поэтому воспользуемся функцией выбора тида из конкретного каталога, тогда всё работает
        $argument_shop_tids = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        foreach ($argument_shop_tids as $argument_shop_tid)
            $argument_shop_tid = $argument_shop_tid->tid;


        //if(!($current_shop_tid = variable_get('current_shop', NULL)) OR $argument_shop_tid != $current_shop_tid)
        //variable_set('current_shop', $argument_shop_tid);
        $_SESSION['current_shop'] = $argument_shop_tid;
        $argument_shop['stid'] = $argument_shop_tid; // вспомогательная переменная для сохранения в сессии
        // зададим переменные для логотипа, адреса и прочих данных магазина
        // будем сохранять в сессии данные (вернее, данные по файлам логотипов, по адресу маназина и т.д.) для всех просмотренных магазинов, в название данных в сессии будем вставлять тид магазина, 
        // таким образом, не придётся каждый раз заново рассчитывать данные по магазину, если они уже были однажды определёны

        $cur_shop_info = zp_functions_shop_info($argument_shop_tid, $user->uid);
        $_SESSION['current_shop_name'] = $cur_shop_info['shop_name'];
        $_SESSION['current_shop_type_sp2'] = $cur_shop_info['shop_type_spell_2'];

        // вариант город-магазин
        //$argument_city_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $argument_shop_tid)); 
        // вариант город-район-магазин

        //////$argument_rajon_tid = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid = %d", $argument_shop_tid));
        ///////$argument_city_tid = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid = %d", $argument_rajon_tid));
        $argument_rajonAndCity_tid = db_fetch_object(db_query("SELECT rajon.parent AS rajon, city.parent AS city FROM {term_hierarchy} rajon LEFT JOIN {term_hierarchy} city ON city.tid = rajon.parent WHERE rajon.tid = $argument_shop_tid" ));
        $argument_rajon_tid = $argument_rajonAndCity_tid->rajon;
        $argument_city_tid = $argument_rajonAndCity_tid->city;


        //variable_set('current_city', $argument_city_tid);
        $_SESSION['current_city'] = $argument_city_tid;
        $argument_shop['ci_tid'] = $argument_city_tid; // вспомогательная переменная для сохранения в сессии

        $_SESSION['current_rajon'] = $argument_rajon_tid;
        $argument_shop['rtid'] = $argument_rajon_tid; // вспомогательная переменная для сохранения в сессии


        /*
            if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $argument_shop_tid))
            {
            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'second_menu'), 'down');
            $argument_shop['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }
            */
        // храним меню магазина в общей переменной для всех пользователей,  
        // чтобы заново каждый раз не генерировать меню из тысяч наименований
        // если меню нет в общей переменной, создаём его и помещаем в эту переменную
        //if(!($vars['second_menu'] = variable_get('n' . $cur_shop_info['shop_nid'] . '_shop_smenu', null)))
        if (!($vars['second_menu'] = variable_get('shop_smenu_nid' . $cur_shop_info['shop_nid'], null))) {
            if ($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $argument_shop_tid)) {
                ///////////// 22222 ///////////$vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');       	 
                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu catalog', 'id' => 'second_menu'), 'down'); // без superfish
                $argument_shop['smenu'] = $vars['second_menu'];

                // сохраняе меню в общую переменную
                //variable_set('n' . $cur_shop_info['shop_nid'] . '_shop_smenu', $vars['second_menu']);
                variable_set('shop_smenu_nid' . $cur_shop_info['shop_nid'], $vars['second_menu']);
            }
        }
        else
            $argument_shop['smenu'] = $vars['second_menu'];


        $_SESSION['n' . $node->nid . '_shop'] = $argument_shop;

    } // end of else of if ($argument_shop = $_SESSION['n' . $node->nid . '_shop']) 

    
} // end of function zp_functions_setSecondMenu_andSession_forShop($node, &$vars)



function zp_functions_setSecondMenu_andSession_forRajon($node, &$vars)
{
    // если находимся в районе, установим меню c магазинами по группам товаров в городе, с ограничением на район
    // также установим текущий город. 
    // и СБРОСИМ магазин
    // район запоминать не будем, так как не понятно будет (при находжении не в каталоге), из какого района представлены магазины по группам
    //$argument_rajon_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid)); 

    $_SESSION['current_shop'] = NULL;
    $_SESSION['current_otdel'] = NULL;


    if ($argument_rajon = $_SESSION['n' . $node->nid . '_rajon']) 
    {
        $_SESSION['current_city'] = $argument_rajon['ci_tid'];
        
        if(!$_SESSION['current_city_name'] = $_SESSION['citytid' . $argument_rajon['ci_tid'] . 'name'])
        {
            $_SESSION['current_city_name'] = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $argument_rajon['ci_tid']));
            $_SESSION['citytid' . $argument_rajon['ci_tid'] . 'name'] = $_SESSION['current_city_name'];
        }
        
        $_SESSION['current_rajon'] = $argument_rajon['rtid'];
        $vars['second_menu'] = $argument_rajon['smenu'];
    } 
    else 
    {
        $argument_rajon_tids = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        foreach ($argument_rajon_tids as $argument_rajon_tid)
            $argument_rajon_tid = $argument_rajon_tid->tid;


        /*
        $argument_city_tid = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid = %d", $argument_rajon_tid));
        $argument_city_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid = %d and vid = 1", $argument_city_tid));
        $goods_groups_city_tid = db_result(db_query("SELECT tid FROM {term_data} WHERE name = '%s' and vid = 3", $argument_city_name));
        */
        $city_obj = db_fetch_object(db_query("SELECT city.parent AS city_tid, name.name AS city_name, goods.tid AS goods_groups_tid FROM {term_hierarchy} city LEFT JOIN {term_data} name ON (name.tid = city.parent AND name.vid = 1) LEFT JOIN {term_data} goods ON (goods.name = name.name AND goods.vid = 3) WHERE city.tid = $argument_rajon_tid"));
        $argument_city_tid = $city_obj->city_tid;
        $argument_city_name = $city_obj->city_name;
        $goods_groups_city_tid = $city_obj->goods_groups_tid;

        //if(!($current_city_tid = variable_get('current_city', NULL)) OR $argument_city_tid != $current_city_tid)
        //variable_set('current_city', $argument_city_tid);

        $_SESSION['current_city'] = $argument_city_tid;
        $argument_rajon['ci_tid'] = $argument_city_tid; // вспомогательная переменная для сохранения в сессии

        if(!$_SESSION['current_city_name'] = $_SESSION['citytid' . $argument_rajon['ci_tid'] . 'name'])
        {
            $_SESSION['current_city_name'] = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = %d", $argument_rajon['ci_tid']));
            $_SESSION['citytid' . $argument_rajon['ci_tid'] . 'name'] = $_SESSION['current_city_name'];
        }
        
        $_SESSION['current_rajon'] = $argument_rajon_tid;
        $argument_rajon['rtid'] = $argument_rajon_tid; // вспомогательная переменная для сохранения в сессии


        if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0, $argument_rajon_tid)) {
            foreach ($items as $type_tid => $type)
                if (empty($type['children']))
                    unset($items[$type_tid]); // убираем пункт меню типа магазина, если в этом типе нет магазинов	

            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
            $argument_rajon['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
        }

        // сохраним в сессиионной переменной данные по этому району (second меню, тиды этого района и его города), ориентир - номер ноды района (чтобы быстрее вычислять, взяв номер прямо с командрой строки)
        $_SESSION['n' . $node->nid . '_rajon'] = $argument_rajon;

    } // end of else of if ($argument_rajon = $_SESSION['n' . $node->nid . '_rajon']) 

    return $argument_rajon_tid;
    
} // end of zp_functions_setSecondMenu_andSession_forRajon($node, &$vars)






function zp_functions_setSecondMenu_andSession_forCity($node, &$vars)
{
    // если находимся в городе, установим меню c магазинами по группам товаров в городе
    // также установим текущий город
    // и СБРОСИМ магазин

    $_SESSION['current_rajon'] = NULL;
    $_SESSION['current_shop'] = NULL;
    $_SESSION['current_otdel'] = NULL;


    if ($argument_city = $_SESSION['n' . $node->nid . '_city']) 
    {
        $_SESSION['current_city'] = $argument_city['ci_tid'];
        $vars['second_menu'] = $argument_city['smenu'];
    } 
    else 
    {
        //$argument_city_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid));
        $argument_city_tids = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        foreach ($argument_city_tids as $argument_city_tid)
            $argument_city_tid = $argument_city_tid->tid;

        //if(!($current_city_tid = variable_get('current_city', NULL)) OR $argument_city_tid != $current_city_tid)
        //variable_set('current_city', $argument_city_tid);

        $_SESSION['current_city'] = $argument_city_tid;
        $argument_city['ci_tid'] = $argument_city_tid; // вспомогательная переменная для сохранения в сессии


        /*
        $argument_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $argument_city_tid));
        $goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $argument_city_name));
        */
        $city_obj = db_fetch_object(db_query("SELECT city.name AS city_name, goods.tid AS goods_tid FROM {term_data} city LEFT JOIN {term_data} goods ON (goods.name = city.name AND goods.vid = 3) WHERE city.tid = $argument_city_tid AND city.vid = 1"));
        $argument_city_name = $city_obj->city_name;
        $goods_groups_city_tid = $city_obj->goods_tid;



        if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0)) {
            // собираем все магазины в районы (немного изменяя структуру сформированного меню)
            $items = zp_functions_shops_by_rajons($items);

            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
            $argument_city['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
        }

        // сохраним в сессиионной переменной данные по этому городу (second меню, тиды этого района и его города), ориентир - номер ноды района (чтобы быстрее вычислять, взяв номер прямо с командрой строки)
        $_SESSION['n' . $node->nid . '_city'] = $argument_city;
    }
    
    return $argument_city_tid;
} // end of zp_functions_setSecondMenu_andSession_forCity($node, &$vars)




function zp_functions_setSecondMenu_andSession_forCountry($node, &$vars)
{
    $_SESSION['current_shop'] = NULL;
    $_SESSION['current_city'] = NULL;
    $_SESSION['current_rajon'] = NULL;
    $_SESSION['current_otdel'] = NULL;

    $vars['second_menu'] = $vars['cities_menu_second'];

    if ($argument_country = $_SESSION['n' . $node->nid . '_country']) {
        $_SESSION['current_country'] = $argument_country['co_tid']; // похоже, что для страны не сохраняются другие переменные
    } else {
        $argument_country_tids = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        foreach ($argument_country_tids as $argument_country_tid)
            $argument_country_tid = $argument_country_tid->tid;
        
        $_SESSION['current_country'] = $argument_country_tid;

        $argument_country['co_tid'] = $argument_country_tid;
        $_SESSION['n' . $node->nid . '_country'] = $argument_country; //$argument_country_tid;
    }

    return $argument_country_tid;
    
} // end of zp_functions_setSecondMenu_andSession_forCountry($node, &$vars)





function zp_functions_setSecondMenu_andSession_forOtherNodeTypes($node, &$vars)
{
    //else with other node types

    // если в любом другом типе
    // выяснить, задан ли параметр current_shop
    // если да, то установаить в second_menu меню этого магазина
    // если нет...
    // выяснить, задан ли параметр current_city
    // если да, то установаить в second_menu магазины по группам товаров для этого города
    // если нет, установить в second_menu меню стран с городами    	
    //if($current_shop_tid = variable_get('current_shop', NULL)) // if $current_shop_tid is set 
    if ($cur_shop_tid = $_SESSION['current_shop']) 
    {
        if(!$cur_shop_nid = $_SESSION['shopNidOfTid' . $cur_shop_tid])
        {
            $cur_shop_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_shop_tid));
            $_SESSION['shopNidOfTid' . $cur_shop_tid] = $cur_shop_nid;
        }

        if ($cur_shop = $_SESSION['n' . $cur_shop_nid . '_shop'])
            $vars['second_menu'] = $cur_shop['smenu'];
        else 
        {
            /*
                //if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $current_shop_tid))
                if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $_SESSION['current_shop']))
                {
                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'second_menu'), 'down');
                $cur_shop['smenu'] = $vars['second_menu'];
                }
                */

            // храним меню магазина в общей переменной для всех пользователей,  
            // чтобы заново каждый раз не генерировать меню из тысяч наименований
            // если меню нет в общей переменной, создаём его и помещаем в эту переменную
            //if(!($vars['second_menu'] = variable_get('n' . $cur_shop_nid . '_shop_smenu', null)))
            if (!($vars['second_menu'] = variable_get('shop_smenu_nid' . $cur_shop_nid, null))) 
            {
                if ($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $cur_shop_tid)) {
                    ////////// 2222 ///////////$vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');       	 
                    $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu catalog', 'id' => 'second_menu'), 'down'); // без superfish
                    $cur_shop['smenu'] = $vars['second_menu'];

                    // сохраняе меню в общую переменную
                    //variable_set('n' . $cur_shop_nid . '_shop_smenu', $vars['second_menu']);
                    variable_set('shop_smenu_nid' . $cur_shop_nid, $vars['second_menu']);
                }
            }
            else
                $cur_shop['smenu'] = $vars['second_menu'];

            $cur_shop['stid'] = $cur_shop_tid;
            $_SESSION['n' . $cur_shop_nid . '_shop'] = $cur_shop;
        }
    }
    elseif ($cur_rajon_tid = $_SESSION['current_rajon']) 
    {
        if(!$cur_rajon_nid = $_SESSION['rajonNidOfTid' . $cur_rajon_tid])
        {
            $cur_rajon_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_rajon_tid));
            $_SESSION['rajonNidOfTid' . $cur_shop_tid] = $cur_rajon_nid;
        }
        
        if ($cur_rajon = $_SESSION['n' . $cur_rajon_nid . '_rajon'])
            $vars['second_menu'] = $cur_rajon['smenu'];
        else 
        {
            $cur_city_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $cur_rajon_tid));

            $_SESSION['current_city'] = $cur_city_tid;
            $cur_rajon['ci_tid'] = $cur_city_tid; // вспомогательная переменная для сохранения в сессии

            $cur_rajon['rtid'] = $cur_rajon_tid; // вспомогательная переменная для сохранения в сессии

            ////$cur_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $cur_city_tid));
            ////$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $cur_city_name));

            $city_obj = db_fetch_object(db_query("SELECT city.name AS city_name, goods.tid AS goods_tid FROM {term_data} city LEFT JOIN {term_data} goods ON (goods.name = city.name AND goods.vid = 3) WHERE city.tid = $cur_city_tid AND city.vid = 1"));
            $cur_city_name = $city_obj->city_name;
            $goods_groups_city_tid = $city_obj->goods_tid;

            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0, $cur_rajon_tid)) {
                foreach ($items as $type_tid => $type)
                    if (empty($type['children']))
                        unset($items[$type_tid]); // убираем пункт меню типа магазина, если в этом типе нет магазинов	

                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_rajon['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            // сохраним в сессиионной переменной данные по этому району (second меню, тиды этого района и его города), ориентир - номер ноды района (чтобы быстрее вычислять, взяв номер прямо с командрой строки)
            $_SESSION['n' . $node->nid . '_rajon'] = $cur_rajon;
        }
    }
    elseif ($cur_city_tid = $_SESSION['current_city']) 
    {
        if(!$cur_city_nid = $_SESSION['cityNidOfTid' . $cur_city_tid])
        {
            $cur_city_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $cur_city_tid));
            $_SESSION['cityNidOfTid' . $cur_city_tid] = $cur_city_nid;
        }

        if ($cur_city = $_SESSION['n' . $cur_city_nid . '_city'])
            $vars['second_menu'] = $cur_city['smenu'];
        else {

            //$current_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $current_city_tid));
            ////$current_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $cur_city_tid));
            ////$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $current_city_name));


            $city_obj = db_fetch_object(db_query("SELECT city.name AS city_name, goods.tid AS goods_tid FROM {term_data} city LEFT JOIN {term_data} goods ON (goods.name = city.name AND goods.vid = 3) WHERE city.tid = $cur_city_tid AND city.vid = 1"));
            $current_city_name = $city_obj->city_name;
            $goods_groups_city_tid = $city_obj->goods_tid;


            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0)) {

                // собираем все магазины в районы (немного изменяя структуру сформированного меню)
                $items = zp_functions_shops_by_rajons($items);

                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_city['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            $cur_city['ci_tid'] = $cur_city_tid;
            $_SESSION['n' . $cur_city_nid . '_city'] = $cur_city; // сохраняем в сессионной переменной
        }
    } 
    elseif ($cur_country_tid = $_SESSION['current_country']) 
    {
        // если текущий город и магазин не установлены, в second_menu устанавливаем меню городов (и стран), 
        // вернее просто копируем в него cities_menu, сформированного ранее в этой же функции
        //$vars['second_menu'] = $vars['cities_menu_second'];
        // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
        //if($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, -1))
        if ($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, $cur_country_tid)) {
            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
            $cur_country['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
        }

        $cur_country['co_tid'] = $cur_country_tid;
        $_SESSION['n' . $cur_country_nid . '_city'] = $cur_country; // сохраняем в сессионной переменной
    }
    else 
    {
        // если местоположение не установлено, прелагаем его выбрать
        //$vars['second_menu'] = 'Выберите магазин для покупок';
        $vars['second_menu'] = '<div id="second_menu"><div class="choose_place">< < < Пожалуйста, выберите место для покупок</div></div>';
    }
    
} // end of function zp_functions_setSecondMenu_andSession_forOtherNodeTypes($node, &$vars)





function zp_functions_setSecondMenu_andSession_forNotNodes($node, &$vars)
{
    // если находимся не в ноде

    // копируем полностью содержимое предыдущего блока block else with undefined node types
    // если находимся не в ноде
    // выяснить, задан ли параметр current_shop
    // если да, то установить в second_menu меню товаров текущего магазина
    // иначе выяснить, задан ли параметр current_city
    // если да, то установить в second_menu магазины по группам товаров для этого города
    // если нет, установить в second_menu меню стран с городами    	
    
    if ($cur_shop_tid = $_SESSION['current_shop']) 
    {

        $cur_shop_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_shop_tid));

        if ($cur_shop = $_SESSION['n' . $cur_shop_nid . '_shop'])
            $vars['second_menu'] = $cur_shop['smenu'];
        else {
            /*
                //if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $current_shop_tid))
                if($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $_SESSION['current_shop']))
                {
                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'second_menu'), 'down');
                $cur_shop['smenu'] = $vars['second_menu'];
                }
                */

            // храним меню магазина в общей переменной для всех пользователей,  
            // чтобы заново каждый раз не генерировать меню из тысяч наименований
            // если меню нет в общей переменной, создаём его и помещаем в эту переменную
            //if(!($vars['second_menu'] = variable_get('n' . $cur_shop_nid . '_shop_smenu', null)))
            if (!($vars['second_menu'] = variable_get('shop_smenu_nid' . $cur_shop_nid, null))) {
                if ($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $cur_shop_tid)) {
                    /////// 2222 //////////$vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');       	 
                    $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu catalog', 'id' => 'second_menu'), 'down'); // без superfish
                    $cur_shop['smenu'] = $vars['second_menu'];

                    // сохраняе меню в общую переменную
                    //variable_set('n' . $cur_shop_nid . '_shop_smenu', $vars['second_menu']);
                    variable_set('shop_smenu_nid' . $cur_shop_nid, $vars['second_menu']);
                }
            }
            else
                $cur_shop['smenu'] = $vars['second_menu'];


            $cur_shop['stid'] = $cur_shop_tid;
            $_SESSION['n' . $cur_shop_nid . '_shop'] = $cur_shop;
        }
    }
    elseif ($cur_rajon_tid = $_SESSION['current_rajon']) 
    {

        $cur_rajon_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_rajon_tid));

        if ($cur_rajon = $_SESSION['n' . $cur_rajon_nid . '_rajon'])
            $vars['second_menu'] = $cur_rajon['smenu'];
        else {
            $cur_city_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $cur_rajon_tid));

            $_SESSION['current_city'] = $cur_city_tid;
            $cur_rajon['ci_tid'] = $cur_city_tid; // вспомогательная переменная для сохранения в сессии

            $cur_rajon['rtid'] = $cur_rajon_tid; // вспомогательная переменная для сохранения в сессии

            ////$cur_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $cur_city_tid));
            ////$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $cur_city_name));


            $city_obj = db_fetch_object(db_query("SELECT city.name AS city_name, goods.tid AS goods_tid FROM {term_data} city LEFT JOIN {term_data} goods ON (goods.name = city.name AND goods.vid = 3) WHERE city.tid = $cur_city_tid AND city.vid = 1"));
            $cur_city_name = $city_obj->city_name;
            $goods_groups_city_tid = $city_obj->goods_tid;



            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0, $cur_rajon_tid)) {
                foreach ($items as $type_tid => $type)
                    if (empty($type['children']))
                        unset($items[$type_tid]); // убираем пункт меню типа магазина, если в этом типе нет магазинов	

                    $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_rajon['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            // сохраним в сессиионной переменной данные по этому району (second меню, тиды этого района и его города), ориентир - номер ноды района (чтобы быстрее вычислять, взяв номер прямо с командрой строки)
            $_SESSION['n' . $node->nid . '_rajon'] = $cur_rajon;
        }
    }
    elseif ($cur_city_tid = $_SESSION['current_city']) 
    {

        $cur_city_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_city_tid));

        if ($cur_city = $_SESSION['n' . $cur_city_nid . '_city'])
            $vars['second_menu'] = $cur_city['smenu'];
        else {

            //$current_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $current_city_tid));
            ////$current_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $_SESSION['current_city']));
            ////$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $current_city_name));

            $city_obj = db_fetch_object(db_query("SELECT city.name AS city_name, goods.tid AS goods_tid FROM {term_data} city LEFT JOIN {term_data} goods ON (goods.name = city.name AND goods.vid = 3) WHERE city.tid = " .$_SESSION['current_city'] . " AND city.vid = 1"));
            $current_city_name = $city_obj->city_name;
            $goods_groups_city_tid = $city_obj->goods_tid;

            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0)) {

                // собираем все магазины в районы (немного изменяя структуру сформированного меню)
                $items = zp_functions_shops_by_rajons($items);

                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_city['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            $cur_city['ci_tid'] = $cur_city_tid;
            $_SESSION['n' . $cur_city_nid . '_city'] = $cur_city; // сохраняем в сессионной переменной
        }
    } 
    elseif($cur_country_tid = $_SESSION['current_country']) 
    {
        // если текущий город и магазин не установлены, в second_menu устанавливаем меню городов (и стран), 
        // вернее просто копируем в него cities_menu, сформированного ранее в этой же функции
        //$vars['second_menu'] = $vars['cities_menu_second'];
        // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
        //if($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, -1))
        if ($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, $cur_country_tid)) {
            $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
            $cur_country['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
        }

        $cur_country['co_tid'] = $cur_country_tid;
        $_SESSION['n' . $cur_country_nid . '_city'] = $cur_country; // сохраняем в сессионной переменной
    } 
    else 
    {
        // если местоположение не установлено, прелагаем его выбрать
        //$vars['second_menu'] = 'Выберите магазин для покупок';
        $vars['second_menu'] = '<div id="second_menu"><div class="choose_place">< < < Пожалуйста, выберите место для покупок</div></div>';
    }

}



// menu s stranami i gorodami cities_menu 

function zp_functions_setCitiesMenu_andSession(&$vars)
{
    if (!($vars['cities_menu'] = $_SESSION['cities_menu']) OR $_SESSION['masquarade']) 
    {
        //$vid, $myflag = 0, $mydepth = 0, $upper_items = 0, $node = 0, $set_parent_tid = -1, $via_views = 1, $only_with_parent_tid_in_v1 = 0 
        
        if (!($vars['cities_menu'] = variable_get('zp_cities_menu', null))) 
        {
        
                if ($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, -1)) 
                {

                    // поместим все пункты в один родительский пункт
                    $items_root['root'] = array(
                        'data' => t('Выбрать город, район, магазин'),
                        'children' => $items,
                    );
                    $vars['cities_menu'] = theme('nice_tax_menu', $items_root, array('class' => 'sf-menu ddmenu', 'id' => 'cities_menu'), 'down', 'right');
                    $_SESSION['cities_menu'] = $vars['cities_menu'];

                    //$vars['cities_menu_second'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu', 'id' => 'second_menu'), 'down');
                    //$_SESSION['cities_menu_second'] = $vars['cities_menu_second'];
                    
                    variable_set('zp_cities_menu', $vars['cities_menu']);
                } // end of if ($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, -1)) 
        
        } // end of if (!($vars['cities_menu'] = variable_get('zp_cities_menu', null))) 
        
    } // end of if (!($vars['cities_menu'] = $_SESSION['cities_menu']) OR $_SESSION['masquarade']) 
    
} // end of function zp_functions_setCitiesMenu_andSession(&$vars)




function zp_function_setHeaderPic(&$vars, $node_nid, $ajax = false)
{
    // выводим логотип (вернее, заглавную картинку по магазину, которая может содержать и логотип, и иллюстрацию)
	if($node_nid != MY_HOME_PAGE_NODE_NUM) // если домашняя страница, там картинка выводится через css
	{
                //if(file_exists($_SERVER['DOCUMENT_ROOT'] . base_path() . 'files/shops/' . $shop_id . '/' . $shop_id . '-header-pic.jpg')) // если файл существует
                if(isset($vars['shop_id']) AND $vars['shop_id'] AND file_exists($_SERVER['DOCUMENT_ROOT'] . base_path() . 'files/shops/' . $vars['shop_id'] . '/' . $vars['shop_id'] . '-header-pic.jpg'))
                    $vars['header_pic'] = '<div id="shop_logo_upmenu">' . str_replace('http://www.zapokupkami.com', '', str_replace('//files', '/files', theme('imagecache', 'shop_header_pic', base_path() . 'files/shops/' . $vars['shop_id'] . '/' . $vars['shop_id'] . '-header-pic.jpg', "Служба доставки 'За Покупками!' - заказ и доставка продуктов и других товаров на дом и в офис из известных Вам магазинов, Харьков"))) . '</div>'; //, $attributes); 
		else
                    $vars['header_pic'] = '<div id="shop_logo_upmenu"><img alt="За Покупками! - Заказ и Доставка продуктов и других товаров на дом и в офис, Харьков" src="http://www.zapokupkami.com/sites/all/themes/zp-themes/zp-two/img4/main_pic_default.jpg"/></div>';
                
                if(!$ajax)        
                        $vars['header_pic'] .= '<div id="main_pic_default"><img alt="За Покупками! - Заказ и Доставка продуктов и других товаров на дом и в офис, Харьков" src="http://www.zapokupkami.com/sites/all/themes/zp-themes/zp-two/img4/main_pic_default.jpg"/></div>';
	}
        
} // end of function zp_function_setHeaderPic(&$vars, $node_nid, $ajax = false)



function zp_functions_setPageInfo_andSession(&$vars, $cur_shop_info = null, 
                                        $cur_shop_tid = null, 
                                        $argument_rajon_tid = null, 
                                        $argument_city_tid = null,
                                        $argument_country_tid = null
                               )
{
    // зададим строку подсказки в шапке сайта, в зависимости от текущего местонахождения (магазин, район, город и т.д.)         
    // а также логотип магазина для шапки сайта, если находимся в магазине, отделе или продукте
    // сначала возьмём местонахождение в магазине
    // если задана переменная с инфо о текущем магазине, значит она только что была рассчитана и можно выводить в шаблоне (в шапке страницы) данные по этому магазину (адрес, лого в шапке) 
    // значит зададим переменные для вывода инфы о текущем магазине (адрес, лого и т.д.) в верхней шапке сайта с меню

    if ($cur_shop_info) 
    {  // если эта переменная задана, значит используем её значения
        $vars['current_page_info'] = '<div class="prenote">Текущий или последний выбранный Вами для покупок магазин/заведение:</div>' . '<div class="caption">' . l($cur_shop_info['shop_name'], 'node/' . $cur_shop_info['shop_nid'], array('title' => 'Перейти на первую страницу каталога этого заведения')) . ',</div><div class="type">' . $cur_shop_info['shop_type_spell_1'] . '</div><div class="address">' . $cur_shop_info['shop_address'] . '</div><div class="postnote">Воспользуйтесь меню (ниже) для выбора в нём отделов и товаров/услуг или для смены магазина/заведения</div>';
        $vars['shop_id'] = $cur_shop_info['shop_id']; // на основе именно внутреннего артикула ZP магазина будем формировать название картинок и логотипов магазина
    } 
    elseif($cur_shop_tid = $_SESSION['current_shop']) 
    { // если задана сессионная переменная текущего магазина
        $cur_shop_info = zp_functions_shop_info($cur_shop_tid, $user->uid);

        $vars['current_page_info'] = '<div class="prenote">Текущий или последний выбранный Вами для покупок магазин/заведение:</div>' . '<div class="caption">' . l($cur_shop_info['shop_name'], 'node/' . $cur_shop_info['shop_nid'], array('title' => 'Перейти на первую страницу каталога этого заведения')) . ',</div><div class="type">' . $cur_shop_info['shop_type_spell_1'] . '</div><div class="address">' . $cur_shop_info['shop_address'] . '</div><div class="postnote">Воспользуйтесь меню (ниже) для выбора в нём отделов и товаров/услуг или для смены магазина/заведения</div>';
        $vars['shop_id'] = $cur_shop_info['shop_id']; // на основе именно внутреннего артикула ZP магазина будем формировать название картинок и логотипов магазина
    } 
    elseif($argument_rajon_tid OR ($argument_rajon_tid = $_SESSION['current_rajon'])) 
    { // если задана эта переменная, значит мы в районе
        if (!($cur_rajon_info = $_SESSION[$argument_rajon_tid . '_rajon_info'])) 
        { // если при этом в сессии ещё не сохранены данные для такого магазина
            // вычислим данные для этого района, внесём их в сессионную переменную и в переменную для файла шаблона              	 	
            // выясним ноду района по его тиду
            /*
            $cur_rajon_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $argument_rajon_tid));
            $cur_rajon_info['name'] = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $cur_rajon_nid));
            //определим адрес района
            $cur_rajon_info['address'] = db_result(db_query("SELECT field_place_address_value FROM {content_field_place_address} WHERE nid = %d", $cur_rajon_nid));
            */

            $cur_rajon_info = db_fetch_array(db_query("SELECT t.nid, n.title AS name, a.field_place_address_value AS address FROM {term_node} t LEFT JOIN {node} n ON n.nid = t.nid LEFT JOIN {content_field_place_address} a ON a.nid = t.nid WHERE t.tid = $argument_rajon_tid" ));
            $cur_rajon_nid = $cur_rajon_info['nid'];

            // также сохраним эти данные в сессионную переменную
            $_SESSION[$argument_rajon_tid . '_rajon_info'] = $cur_rajon_info;
        }

        // данные (в переменных шаблона страницы) по району для шапки страницы с меню
        $vars['current_page_info'] = '<div class="prenote">Текущий или последний выбранный Вами для покупок район:</div>' . '<div class="caption">' . $cur_rajon_info['name'] . '</div><div class="address">' . $cur_rajon_info['address'] . '</div><div class="postnote">Используйте меню (ниже) для выбора в этом районе магазина/заведения или для смены города/района</div>';
    } 
    elseif($argument_city_tid OR ($argument_city_tid = $current_city_tid) OR ($argument_city_tid = $_SESSION['current_city'])) 
    {

        if (!($cur_city_info = $_SESSION[$argument_city_tid . '_city_info'])) { // если при этом в сессии ещё не сохранены данные для такого города
            // вычислим данные для этого города, внесём их в сессионную переменную и в переменную для файла шаблона              	 	
            // выясним ноду города по его тиду
            /*
            $cur_city_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $argument_city_tid));
            $cur_city_info['name'] = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $cur_city_nid));
            //определим адрес города
            $cur_city_info['address'] = db_result(db_query("SELECT field_place_address_value from {content_field_place_address} WHERE nid = %d", $cur_city_nid));
            */
            $cur_city_info = db_fetch_array(db_query("SELECT t.nid, n.title AS name, a.field_place_address_value AS address FROM {term_node} t LEFT JOIN {node} n ON n.nid = t.nid LEFT JOIN {content_field_place_address} a ON a.nid = t.nid WHERE t.tid = $argument_city_tid" ));
            $cur_city_nid = $cur_city_info['nid'];

            // также сохраним эти данные в сессионную переменную
            $_SESSION[$argument_city_tid . '_city_info'] = $cur_city_info;
        }

        $vars['current_page_info'] = '<div class="prenote">Текущий или последний выбранный Вами для покупок населённый пункт:</div>' . '<div class="caption">' . $cur_city_info['name'] . '</div><div class="address">' . $cur_city_info['address'] . '</div><div class="postnote">Используйте меню (ниже) для выбора в этом населённом пункте магазина/заведения или для смены города</div>';
    } 
    else if ($argument_country_tid OR ($argument_country_tid = $current_country_tid) OR ($argument_country_tid = $_SESSION['current_country'])) 
    {

        if (!($cur_country_info = $_SESSION[$argument_country_tid . '_country_info'])) 
        {

            // вычислим данные для этой страны, внесём их в сессионную переменную и в переменную для файла шаблона              	 	
            // выясним ноду страны по её тиду
            /*
            $cur_country_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid = %d", $argument_country_tid)); // 28; //
            $cur_country_info['name'] = db_result(db_query("SELECT title FROM {node} WHERE nid = %d", $cur_country_nid));
            //определим адрес 
            $cur_country_info['address'] = db_result(db_query("SELECT field_place_address_value FROM {content_field_place_address} WHERE nid = %d", $cur_country_nid));
            */
            $cur_country_info = db_fetch_array(db_query("SELECT t.nid, n.title AS name, a.field_place_address_value AS address FROM {term_node} t LEFT JOIN {node} n ON n.nid = t.nid LEFT JOIN {content_field_place_address} a ON a.nid = t.nid WHERE t.tid = $argument_country_tid" ));
            $cur_country_nid = $cur_country_info['nid'];

            // также сохраним эти данные в сессионную переменную
            $_SESSION[$argument_country_tid . '_country_info'] = $cur_country_info;
        }

        $vars['current_page_info'] = '<div class="prenote">Текущая или последняя выбранная Вами для покупок страна:</div>' . '<div class="caption">' . $cur_country_info['name'] . '</div><div class="address">' . $cur_country_info['address'] . '</div><div class="postnote">Используйте меню (ниже) для выбора в этой стрране города/района/заведения или для смены города/района</div>';
    }

} // end of function setPageInfo_andSession(&$vars, $cur_shop_info = null, ...





function zp_functions_setCurrentPlace_defaultSecondMenu_andSession(&$vars, $ajax = false)
{
    // покажем в заголовке меню выбора города-страны текущий город (страну)
    // заодно установим текущий город или страну, если они ещё не установлены для текущего пользователя

    if ($current_city_tid = $_SESSION['current_city']) 
    { // если установлен текущий город, то указываем его основным в меню стран и городов
        // так как всё равно не показывается название текущего места, то закомментируем эти строки
        if(!isset($_SESSION['current_city_name']))
            $_SESSION['current_city_name'] = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $current_city_tid));
        $vars['current_place'] = $_SESSION['current_city_name'];
    } 
    else if ($current_country_tid = $_SESSION['current_country']) 
    { // если установлена текущая страна, то указываем её основной в меню стран и городов
        // так как всё равно не показывается название текущего места, то закомментируем эти строки
        if(!isset($_SESSION['current_country_name']))
            $_SESSION['current_country_name'] = $current_country_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $current_country_tid));
        $vars['current_place'] = $_SESSION['current_country_name'];
    } 
    else 
    {  // иначе, если не указано текущее местоположение (например, при первой загрузке сайта в новой сессии), то ставим текущим местоположение, указанное основным по умолчанию или у основным у текущего пользователя     // если местоположение не указано ни общее по умолчанию, ни для юзера, ничего не ставим, показываем пригашение выбрать местопложение
        // Получаем данные по городу (местоположению) по умолчанию (для авторизованного или не авторизованного юзера)         	
        $zp_default_set = zp_functions_get_zp_default_set();

        $vars['current_place'] = $zp_default_set['main_place_default']['name'];

        if ($zp_default_set['main_place_default']['type'] == 'c_city') 
        {
            $_SESSION['current_city'] = $zp_default_set['main_place_default']['tid'];
            $_SESSION['current_city_name'] = $zp_default_set['main_place_default']['name'];

            //$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $zp_default_set['main_city_default']['name']));
            $goods_groups_city_tid = db_result(db_query("SELECT tid FROM {term_data} WHERE name = '%s' and vid = 3", $zp_default_set['main_place_default']['name']));

            // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0)) {
                // собираем все магазины в районы (немного изменяя структуру сформированного меню)
                $items = zp_functions_shops_by_rajons($items);

                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_city['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            $cur_city['ci_tid'] = $zp_default_set['main_place_default']['tid'];
            $_SESSION['n' . $zp_default_set['main_place_default']['nid'] . '_city'] = $cur_city; // сохраняем в сессионной переменной
        } 
        elseif ($zp_default_set['main_place_default']['type'] == 'c_country') 
        {
            $_SESSION['current_country'] = $zp_default_set['main_place_default']['tid'];
            $_SESSION['current_country_name'] = $zp_default_set['main_place_default']['name'];

            // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
            //if($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, -1))
            if ($items = nice_tax_menu_build_items(1, 0, 4, 0, 0, $zp_default_set['main_place_default']['tid'])) {
                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_country['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            $cur_country['co_tid'] = $zp_default_set['main_place_default']['tid'];
            $_SESSION['n' . $zp_default_set['main_place_default']['nid'] . '_country'] = $cur_country; // сохраняем в сессионной переменной
        } 
        elseif ($zp_default_set['main_place_default']['type'] == 'c_rajon') 
        {

            //($cur_rajon_tid = $_SESSION['current_rajon'])

            //$cur_rajon_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $cur_rajon_tid));

            $_SESSION['current_rajon'] = $zp_default_set['main_place_default']['tid'];
            /*
            $cur_city_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid = %d", $zp_default_set['main_place_default']['tid']));
            $cur_city_name = db_result(db_query("SELECT name from {term_data} WHERE tid = %d and vid = 1", $cur_city_tid));
            $goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $cur_city_name));
            */
            $city_obj = db_fetch_object(db_query("SELECT city.parent AS city_tid, name.name AS city_name, goods.tid AS goods_groups_tid FROM {term_hierarchy} city LEFT JOIN {term_data} name ON (name.tid = city.parent AND name.vid = 1) LEFT JOIN {term_data} goods ON (goods.name = name.name AND goods.vid = 3) WHERE city.tid = " . $zp_default_set['main_place_default']['tid']));
            $cur_city_tid = $city_obj->city_tid;
            $cur_city_name = $city_obj->city_name;
            $goods_groups_city_tid = $city_obj->goods_groups_tid;


            $_SESSION['current_city'] = $cur_city_tid;
            $_SESSION['current_city_name'] = db_result(db_query("SELECT name from {term_data} WHERE tid = %d", $cur_city_tid));

            $cur_rajon['ci_tid'] = $cur_city_tid; // вспомогательная переменная для сохранения в сессии
            $cur_rajon['rtid'] = $zp_default_set['main_place_default']['tid']; // вспомогательная переменная для сохранения в сессии


            //$goods_groups_city_tid = db_result(db_query("SELECT tid from {term_data} WHERE name = '%s' and vid = 3", $zp_default_set['main_place_default']['name']));

            if ($items = nice_tax_menu_build_items(3, 0, 0, 0, $node, $goods_groups_city_tid, 0, $zp_default_set['main_place_default']['tid'])) {
                foreach ($items as $type_tid => $type)
                    if (empty($type['children']))
                        unset($items[$type_tid]); // убираем пункт меню типа магазина, если в этом типе нет магазинов

                $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                $cur_rajon['smenu'] = $vars['second_menu']; // вспомогательная переменная для сохранения в сессии
            }

            // сохраним в сессиионной переменной данные по этому району (second меню, тиды этого района и его города), ориентир - номер ноды района (чтобы быстрее вычислять, взяв номер прямо с командрой строки)
            $_SESSION['n' . $zp_default_set['main_place_default']['nid'] . '_rajon'] = $cur_rajon;
        }
        elseif ($zp_default_set['main_place_default']['type'] == 'c_shop') 
        {

            $_SESSION['current_shop'] = $zp_default_set['main_place_default']['tid'];
            // тут может понадобиться и установка всех данных по родителям этого магазина (район, город, страна) и её параметров
            // как это делается в других блоках (выше) при инициализации магазина
            // но пока вроде работает и без этого
            //if($cur_shop = $_SESSION['n' . $zp_default_set['main_place_default']['nid'] . '_shop'])
            //$vars['second_menu'] = $cur_shop['smenu'];
            //else 
            // пробуем получить уже сформированное меню из базы данных или формируем его, если нет в базе
            if (!($vars['second_menu'] = variable_get('shop_smenu_nid' . $zp_default_set['main_place_default']['nid'], null))) 
            {
                if ($items = nice_tax_menu_build_items(1, 0, 0, 0, 0, $zp_default_set['main_place_default']['tid'])) 
                {
                    //////////// 22222222 ////////////$vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');       	 
                    $vars['second_menu'] = theme('nice_tax_menu', $items, array('class' => 'ddmenu catalog', 'id' => 'second_menu'), 'down'); // без superfish
                    $cur_shop['smenu'] = $vars['second_menu'];

                    // сохраняе меню в общую переменную
                    variable_set('shop_smenu_nid' . $zp_default_set['main_place_default']['nid'], $vars['second_menu']);
                }
            }
            else
                $cur_shop['smenu'] = $vars['second_menu'];

            $cur_shop['stid'] = $zp_default_set['main_place_default']['tid'];
            $_SESSION['n' . $zp_default_set['main_place_default']['nid'] . '_shop'] = $cur_shop;
        }
        else 
        {
            // если местоположение не установлено, прелагаем его выбрать
            $vars['second_menu'] = '<div id="second_menu"><div class="choose_place">< < < Пожалуйста, выберите место для покупок</div></div>';
        }
    } // end of else  // иначе, если не указано текущее местоположение...

    if(!$ajax)
        $vars['second_menu'] .= '<div id="second_menu_def"><div class="choose_place">< < < Пожалуйста, выберите место для покупок</div></div>';
    
} // end of function setCurrentPlace_defaultSecondMenu_andSession(&$vars)




// menu s stranami i gorodami cities_menu, тут инициализируем меню для second_menu, а позже вычислим меню для отдельного меню городов
function zp_functions_setCitiesMenuSecond_andSession(&$vars)
{
    
    if (!($vars['cities_menu_second'] = $_SESSION['cities_menu_second'])) 
    { //OR $_SESSION['masquarade'])
        if (!($vars['cities_menu_second'] = variable_get('zp_cities_menu_second', null))) 
        {
            if ($items = nice_tax_menu_build_items(1, 0, 2, 0, 0, -1)) 
            {
                $vars['cities_menu_second'] = theme('nice_tax_menu', $items, array('class' => 'sf-menu ddmenu', 'id' => 'second_menu'), 'down');
                variable_set('zp_cities_menu_second', $vars['cities_menu_second']);
            }
        }
        
        $_SESSION['cities_menu_second'] = $vars['cities_menu_second'];
    }
    
} // end of function zp_functions_setCitiesMenuSecond_andSession(&$vars)





// make variable breadcrumb for catalog
function zp_functions_setBreadCrumb_andSession(&$vars, $entity_type, $node_nid, $node_type = null, $ajax = false)
{
    
    //echo '1 = ' . arg(0) . ', 2 = ' . arg(1) . '<br>';
    // если мы на первой странице или в форме контактов 
    //if(arg(0) == 'node' AND (arg(1) == 227 OR arg(1) == 224 OR arg(1) == 228)) 
    //$vars['c_breadcrumb'] = main_page_breadcrumb();
    //else 
    //$vars['c_breadcrumb'] = catalog_breadcrumb();    

    if ($entity_type == 'node') 
    {
        if(!$ntype = $node_type)
            $ntype = (db_result(db_query("SELECT type FROM {node} WHERE nid = '%s' ", $node_nid)));

        if ($ntype == 'home_page'
                OR $ntype == 'system_messages'
                OR $ntype == 'zp_default_set' // настройки, цены, проценты магазина по умолчанию
                OR $ntype == 'mc_descr' // описание производителя, поставщика
                OR $ntype == 'shop_descr' // описание и контакты магазинов
                OR $ntype == 'zp_issue' // статьи
                OR $ntype == 'zp_issue_spravka' // справочные данные, статьи
                OR $ntype == 'zp_help' // помощь 	 	
                //OR $ntype == 'webform' 
                //OR ($ntype == 'zp_user' AND arg(1) == 225) // если мы в своей переопределённой ноде создания-редактирования-удаления комментариев
                OR ($ntype == 'zp_user')// AND arg(1) == MY_ZP_COMMENTS_NODE_NUM) // если мы в своей переопределённой ноде создания-редактирования-удаления комментариев
                //OR $ntype == 'zp_cart'
                OR strpos($ntype, 'u_') !== FALSE
        )
            $vars['c_breadcrumb'] = zp_functions_main_page_breadcrumb();
        else
            $vars['c_breadcrumb'] = zp_functions_catalog_breadcrumb();
    }
    else
        $vars['c_breadcrumb'] = zp_functions_catalog_breadcrumb();
    
    if(!$ajax)
        $vars['c_breadcrumb'] .= '<div id="c_breadcrumb_def">' . l('Главная страница', 'http://www.zapokupkami.com') . '  &gt;&gt;</div>';

    
} // end of function zp_functions_setBreadCrumb_andSession(&$vars)






function zp_functions_main_page_breadcrumb() {
    
    $data = zp_functions_continue_shopping_link();

    if ($node_tid = $data['tid']) 
    { // если был последний переход по каталогу
        $node_nid = $data['nid'];

        $tid_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = '%s'", $node_tid));

        $linage_tids = array();

        $linage_tids[] = l($tid_name, 'node/' . $node_nid);
        //$linage_tids[] = t($tid_name); // ссылку на последний текущий элемент не показываем, так как у него нет своей родительской ноды... родительская нода есть только у следующего родителя-терма

        $count = 0;
        while (($node_tid = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0) 
        {
            $node_nid = db_result(db_query("SELECT nid FROM {term_node} WHERE tid  = '%s'", $node_tid));
            $tid_name = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = '%s'", $node_tid));

            if ($node_nid)
            //$linage_tids[] = l($tid_name, 'node/'.$node_nid);
                $linage_tids[] = l($tid_name, 'node/' . $node_nid); //, array('rel' => 'nofollow'));
            else
                $linage_tids[] = t($tid_name);
            $count++;
        }

//array_splice($linage_tids, -2, 2); // ������� ����� �� ����� � ������
        //drupal_set_message("bread Count = $count, linage_tid = $linage_tid", 'error');
        //for($count = $count-2; $count >= 0; $count--)
        $c_breadcrumb = '';
        for (; $count >= 0; $count--)
            $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count];


//drupal_set_message("c_breadcrumb = $c_breadcrumb", 'error');
//if($c_breadcrumb)

        $c_breadcrumb = '<div id="c_breadcrumb"><div id="title">История последнего перехода</div>' . $c_breadcrumb . '</div>';
        //$c_breadcrumb = '<div id="c_breadcrumb"><div id="title">Сейчас Вы здесь</div>' . $c_breadcrumb . '</div>';
        //$c_breadcrumb = '<div id="c_breadcrumb"><div id="title">Быстрый переход</div>' . $c_breadcrumb . '</div>';
    }
    else
    //$c_breadcrumb = '<div id="c_empty_breadcrumb"></div>';  
        $c_breadcrumb = '<div id="c_breadcrumb"><div id="title">Главная страница</div>' . ' >> ' . '</div>';


    return $c_breadcrumb;
}





function zp_functions_catalog_breadcrumb() 
{
    $linage_tids = array();

    $node = node_load(arg(1));

    // проверим, к какому меню относится элемент и установим соотвествующий словарь
    if ($node->type == 'blog_zp_post') {

        $linage_tids[] = l($node->title, 'node/' . $node->nid); //, array('rel' => 'nofollow'));
        // найдём родителя (сам блог), предполагая, что такого типа нода на сайте только одна
        $blog_data = db_fetch_array(db_query("SELECT nid, title from {node} WHERE type = '%s'", 'blog_zp'));
        $linage_tids[] = l($blog_data['title'], 'node/' . $blog_data['nid']); //, array('rel' => 'nofollow'));
        $linage_tids[] = l(t('Главная'), 'http://zapokupkami.com'); //, array('rel' => 'nofollow'));
        //foreach($linage_tids as $linage_tid)
        //$c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tid;
        $c_breadcrumb = ' >> ' . $linage_tids[2] . ' >> ' . $linage_tids[1] . ' >> ' . $linage_tids[0];
    } else
    if ($node->type == 'news_post') {

        $linage_tids[] = l($node->title, 'node/' . $node->nid); //, array('rel' => 'nofollow'));
        // найдём родителя (сам блог), предполагая, что такого типа нода на сайте только одна
        $blog_data = db_fetch_array(db_query("SELECT nid, title from {node} WHERE type = '%s'", 'news'));
        $linage_tids[] = l($blog_data['title'], 'node/' . $blog_data['nid']); //, array('rel' => 'nofollow'));
        $linage_tids[] = l(t('Главная'), 'http://zapokupkami.com'); //, array('rel' => 'nofollow'));
        //foreach($linage_tids as $linage_tid)
        //$c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tid;
        $c_breadcrumb = ' >> ' . $linage_tids[2] . ' >> ' . $linage_tids[1] . ' >> ' . $linage_tids[0];
    } else
    if ($node->type == 'zp_issue') {
        $linage_tids[] = l($node->title, 'node/' . $node->nid); //, array('rel' => 'nofollow'));
        $linage_tids[] = 'Статьи';
        $linage_tids[] = 'Полезно';
        $count = 2;

        while ($count >= 0)
            if ($linage_tids[$count] AND $linage_tids[$count] != '')
                $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count--];
    }
    else
    if ($node->nid == MY_CART_COMPLETE_NODE_NUM) {
        $linage_tids[] = 'Отчёт об отправке заказа на рассмотрение';
        $linage_tids[] = 'Ваша корзина';
        $linage_tids[] = 'Личное меню';
        $count = 2;

        while ($count >= 0)
            if ($linage_tids[$count] AND $linage_tids[$count] != '')
                $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count--];
    }
    else
    if ($node->nid == MY_ORDER_EDIT_NODE_NUM) {
        $linage_tids[] = 'Редактирование заказа';
        $linage_tids[] = 'Список заказов';
        $linage_tids[] = 'Личное меню';
        $count = 2;

        while ($count >= 0)
            if ($linage_tids[$count] AND $linage_tids[$count] != '')
                $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count--];
    }
    else {

        //print '<PRE>';
        //print_r($node->taxonomy);
        //print '<PRE>';

        foreach ($node->taxonomy as $taxonomy) {
            if (($vid = $taxonomy->vid) == 1)
                break;
        }



        //$current_node_tid = taxonomy_node_get_terms_by_vocabulary($node->nid, 1);
        $current_node_tid = taxonomy_node_get_terms_by_vocabulary($node->nid, $vid);

        foreach ($current_node_tid as $node_tid) {
            $tid_name = $node_tid->name;
            $node_tid = $node_tid->tid;
        }

        if ($node->nid)
            $linage_tids[] = l($tid_name, 'node/' . $node->nid); //, array('rel' => 'nofollow'));
        else
            $linage_tids[] = t($tid_name); // ссылку на последний текущий элемент не показываем, так как у него нет своей родительской ноды... родительская нода есть только у следующего родителя-терма

        $first_tid = $node_tid;
        $first_tid_name = $tid_name;

        $count = 0;
        while (($node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0) {

            $node_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid  = '%s'", $node_tid));
            $tid_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = '%s'", $node_tid));

            if ($node_nid)
                $linage_tids[] = l($tid_name, 'node/' . $node_nid); //, array('rel' => 'nofollow'));
            else
                $linage_tids[] = t($tid_name);


            if (!$count) {
                $first_parent_tid = $node_tid;
                $first_parent_nid = $node_nid;
                $first_parent_name = $tid_name;
            }

            $count++;
        }



        //array_splice($linage_tids, -2, 2); // ������� ����� �� ����� � ������
        //drupal_set_message("bread Count = $count, linage_tid = $linage_tid", 'error');
        //for($count = $count-2; $count >= 0; $count--)

        if ($vid == 1) {
            for ($count = $count - 0; $count >= 0; $count--) {
                if ($count > 0)
                    $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count];
                else {
                    if (strpos($node->type, 'product') !== FALSE) {
                        $c_breadcrumb = $c_breadcrumb . ' >> ' . '<a href="' . url('node/' . $first_parent_nid, 'tf=' . $first_tid) . '">' . $first_tid_name . '</a>';
                        $c_breadcrumb = $c_breadcrumb . ' >> ' . t($node->title);
                        //$_SESSION['cur_parent_otdel_name'] = $first_parent_name; // сохраняем текущий родительский отдел товара для использования его позже в мета-описании (чтобы заново не находить)
                    }
                    else
                        $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count];
                }
            }

            if ($_GET['tf'] > 0) {
                $tid_name = db_result(db_query("SELECT name from {term_data} WHERE tid  = '%s'", $_GET['tf']));

                //$c_breadcrumb = $c_breadcrumb . ' >> ' . l($tid_name, "http://".$_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI']);
                //ссылка на текущую страницу тут как раз не нужна
                $c_breadcrumb = $c_breadcrumb . ' >> ' . t($tid_name);
            }
        } else {
            // добавим корневой элемент бредкрамба - название каталога или известное название корневого кабинета
            switch ($vid) {
                case 2:
                    $linage_tids[] = 'Личное меню';
                    break;
                case 4:
                    $linage_tids[] = l(t('Home'), 'http://www.zapokupkami.com'); //, array('rel' => 'nofollow')); //t('Home');
                    break;
            }
            $count++;

            //print '<PRE>';
            //print_r($linage_tids);
            //print '</PRE>';

            if (!$linage_tids[1]) {

                //if($node->nid == 25) //  если это нода 'Проверка оформленного заказа'	
                if ($node->nid == MY_CART_REVIEW_NODE_NUM) { //  если это нода 'Проверка оформленного заказа'	

                    $linage_tids[] = 'Проверка оформленного заказа';
                    $linage_tids[] = 'Ваша корзина';
                    $linage_tids[] = 'Личное меню';
                    $count = 2;
                } else if (!$linage_tids[1] AND $node->nid == MY_ORDER_REVIEW_NODE_NUM) { //  если это нода 'Просмотр заказа из истории'
                    $linage_tids[] = 'Просмотр заказа из истории заказов';
                    $linage_tids[] = 'Ваша корзина';
                    $linage_tids[] = 'Личное меню';
                    $count = 2;
                }
            }

            while ($count >= 0)
                if ($linage_tids[$count] AND $linage_tids[$count] != '')
                    $c_breadcrumb = $c_breadcrumb . ' >> ' . $linage_tids[$count--];
        }
    }






//drupal_set_message("c_breadcrumb = $c_breadcrumb", 'error');

    if ($c_breadcrumb)
        $c_breadcrumb = '<div id="c_breadcrumb"><div id="title">Сейчас Вы здесь</div>' . $c_breadcrumb . '</div>';
    else
        $c_breadcrumb = '<div id="c_empty_breadcrumb"></div>';


    return $c_breadcrumb;
}





// make side menu block variable 
function zp_functions_setSideMenu_andSession(&$vars)
{
    if ($vars['node']->type == 'zp_side_block' AND $vars['node']->title == 'Zp side menu 01') 
    {

        if (!(arg(0) == 'node' AND is_numeric(arg(1))))
            return 0;

        $node = new stdClass();
        $node->nid = arg(1);
        $node->type = db_result(db_query("SELECT type FROM {node} WHERE nid = '%s' ", $node->nid));

        if ($node->type == 'zp_cart') { // esli nahodimsia v korzine, pokazati menu korziny zi user_menu
            if ($user->uid) // if user is logged in  
            // лучше покажем полное меню пользователя, сформированное ранее для верхней шапки и сохранённое в сессии
                $vars['zp_side_menu_01'] = '<div class="smenu_header toggle-anchor user"></div><div class="toggle-content"><div class="upper_items user">Личное меню</div>' . $_SESSION['user_menu_side'] . '</div><div class="sidemenu_bottom"></div>';
        }
        else
        if (strpos($vars['node']->type, 'u_') !== FALSE OR $node->type == 'zp_user') 
        {// OR $node->type == 'webform') 
            if ($user->uid) // if user is logged in
            // считаем, что если загрузилась одна из страниц этого типа, значит уже есть и меню
                $vars['zp_side_menu_01'] = '<div class="smenu_header toggle-anchor user"></div><div class="toggle-content"><div class="upper_items user">Личное меню</div>' . $_SESSION['user_menu_side'] . '</div><div class="sidemenu_bottom"></div>';
        }

        else
        if ($node->type == 'mc_descr' OR $node->type == 'shop_descr' OR $node->type == 'zp_issue' OR $node->type == 'zp_issue_spravka') 
        {

            // для любого материала этих типов покажем общее для них меню 
            // для этого возьмём за ноду по умолчанию, например, "Товары и услуги. Все статьи и обзоры"
            // и будем сохранять и загружать боковое меню этой ноды для любого материала указанных выше типов

            $work_node = new stdClass();
            $work_node->nid = db_result(db_query("SELECT nid FROM {node} WHERE title = '%s'", "Товары и услуги. Все статьи и описания"));
            $work_node->type = 'zp_issue';

            if ($side_menu = $_SESSION['n' . $work_node->nid . '_sidemenu'])
                $vars['zp_side_menu_01'] = $side_menu;
            else 
            {
                /*
                    //один из рабочих вариантов - передавать на формирование меню не ноду, а тид родителя по меню
                    $work_vid = 4; // это словарь главного меню, к которому прицеплена эта рабочая нода
                    $work_tids = taxonomy_node_get_terms_by_vocabulary($work_nid, $work_vid);
                    foreach($work_tids as $work_tid)
                    $work_tid = $work_tid->tid;
                    $parent_work_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $work_tid));
                    //if($items = nice_tax_menu_build_items(4, 1, 2, 1, 0, $parent_work_tid))
                    */

                // определяем меню с указанием конкретного пункта родительского меню
                $parent_menu_tid = db_result(db_query("SELECT tid from {term_data} WHERE name  = '%s'", "Полезно!"));
                //if($items = nice_tax_menu_build_items(4, 1, 2, 1, 0, $parent_menu_tid))
                if ($items = nice_tax_menu_build_items(4, 1, 2, 1, 0, $parent_menu_tid, 1, 0)) {//, array('rel' => 'nofollow')))
                // вариант с определением меню по ноде
                //if($items = nice_tax_menu_build_items(4, 1, 2, 1, $work_node))
                // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
                //if($items = nice_tax_menu_build_items(4, 1, 2, 1, $node))
                    //$vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, array('class' => 'ddmenu')) . '</div><div class="sidemenu_bottom"></div>';
                    $vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, /* array('class' => 'ddmenu') */ null, 0, 0, 0, 0, 'exp-menu', 'exp-side-menu') . '</div><div class="sidemenu_bottom"></div>';
                    //$_SESSION['n' . $node->nid . '_sidemenu'] = $vars['zp_side_menu_01'];	
                    $_SESSION['n' . $work_node->nid . '_sidemenu'] = $vars['zp_side_menu_01'];
                }
            }
        } else
        //if(strpos($node->type, 'c_') !== FALSE OR strpos($node->type, 'product_') !== FALSE) // esli v kataloge
        if (strpos($node->type, 'c_') === 0 OR strpos($node->type, 'product_') !== FALSE) { // esli v kataloge

            if ($side_menu = $_SESSION['n' . $node->nid . '_sidemenu'])
                $vars['zp_side_menu_01'] = $side_menu;
            else 
            {
                // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
                //if($items = nice_tax_menu_build_items(1, 'department', 2, 1, $node))
                if ($items = nice_tax_menu_build_items(1, 'department', 2, 1, $node, -1, 1, 0)) {//, array('rel' => 'nofollow')))
                    //$vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, array('class' => 'ddmenu')) . '</div><div class="sidemenu_bottom"></div>';
                    $vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, /* array('class' => 'ddmenu') */ null, 0, 0, 0, 0, 'exp-menu', 'exp-side-menu') . '</div><div class="sidemenu_bottom"></div>';
                    $_SESSION['n' . $node->nid . '_sidemenu'] = $vars['zp_side_menu_01'];
                }
            }
        } 
        else 
        { // esli nahodimsia v lubom drugom meste, pokazivaem подменю first menu (no nado otdelno nastroit' i drugie tipy)
            if ($side_menu = $_SESSION['n' . $node->nid . '_sidemenu'])
                $vars['zp_side_menu_01'] = $side_menu;
            else 
            {
                // (myflag, level of start items, depth, show upper_items link, argument node, parent tid to start from)
                //if($items = nice_tax_menu_build_items(4, 1, 2, 1, $node, -1, 1, 0, array('rel' => 'nofollow')))
                //if($items = nice_tax_menu_build_items(4, 1, 2, 1, $node))
                if ($items = nice_tax_menu_build_items(4, 1, 2, 1, $node, -1, 1, 0)) {//, array('rel' => 'nofollow')))
                    //$vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, array('class' => 'ddmenu')) . '</div><div class="sidemenu_bottom"></div>';
                    $vars['zp_side_menu_01'] = '<div class="smenu_header catalog toggle-anchor"></div><div class="toggle-content">' . theme('nice_tax_menu', $items, /* array('class' => 'ddmenu') */ null, 0, 0, 0, 0, 'exp-menu', 'exp-side-menu') . '</div><div class="sidemenu_bottom"></div>';
                    $_SESSION['n' . $node->nid . '_sidemenu'] = $vars['zp_side_menu_01'];
                }
            }
        }
    } // end of if ($vars['node']->type == 'zp_side_block' AND $vars['node']->title == 'Zp side menu 01') 
    
} // end of function zp_functions_setSideMenu_andSession(&$vars)



function zp_functions_getDefaultWelcomeAndExplain(&$vars, $entity_type, $node_nid)
{
    // если первая страница
    if ($entity_type == 'node' AND $node_nid == MY_HOME_PAGE_NODE_NUM) 
    { 
        $vars['welcome'] = '<div class="welcome"><div class="caption">' . 'Ваша Персональная Служба Доставки' . '</div>' . 'продуктов и других товаров или услуг 
из известных Вам магазинов и прочих заведений  к Вам домой или в офис.' . '</div>';

        $vars['explain'] = '<div class="head_explain" id="e_main"><div class="caption">' . ' <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">Делать покупки с нами удобнее!</a>' . '</div>' . 'У нас Вы можете <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#my-vybiraem-luchshee">регулярно заказывать</a> товары <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#lubimye-magaziny">из магазинов в вашем районе</a>, быстро <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#servisy-saita">находить полезную информацию</a> по товарам, услугам, производителям и магазинам из наших каталогов, повторно <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#istoriya-zakazov">использовать свои списки заказов</a>... и  <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">многое другое!</a>' . '</div>';
        //$vars['explain'] = '<div class="head_explain" id="current_page_info"><div class="caption">' . ' <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">Делать покупки с нами удобнее!</a>' . '</div>' . 'У нас Вы можете <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#my-vybiraem-luchshee">регулярно заказывать</a> товары <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#lubimye-magaziny">из магазинов в вашем районе</a>, быстро <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#servisy-saita">находить полезную информацию</a> по товарам, услугам, производителям и магазинам из наших каталогов, повторно <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#istoriya-zakazov">использовать свои списки заказов</a>... и  <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">многое другое!</a>' . '</div>';
        $vars['explain_default'] = '<div class="head_explain" id="e_def"><div class="caption">' . ' <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">Делать покупки с нами удобнее!</a>' . '</div>' . 'У нас Вы можете <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#my-vybiraem-luchshee">регулярно заказывать</a> товары <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#lubimye-magaziny">из магазинов в вашем районе</a>, быстро <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#servisy-saita">находить полезную информацию</a> по товарам, услугам, производителям и магазинам из наших каталогов, повторно <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa#istoriya-zakazov">использовать свои списки заказов</a>... и  <a href="http://www.zapokupkami.com/help/pravila-i-osobennosti-raboty-nashego-servisa">многое другое!</a>' . '</div>';
    }
    else
    {
        //$vars['explain'] = '<div class="welcome" id="current_page_info"><div class="caption">' . 'Ваша Персональная Служба Доставки' . '</div>' . 'продуктов и других товаров или услуг 
        $vars['explain'] = '<div class="welcome" id="e_main"><div class="caption">' . 'Ваша Персональная Служба Доставки' . '</div>' . 'продуктов и других товаров или услуг 
из известных Вам магазинов и прочих заведений  к Вам домой или в офис.' . '</div>';
        $vars['explain_default'] = '<div class="welcome" id="e_def"><div class="caption">' . 'Ваша Персональная Служба Доставки' . '</div>' . 'продуктов и других товаров или услуг 
из известных Вам магазинов и прочих заведений  к Вам домой или в офис.' . '</div>';
    }
}


function zp_functions_setSecondMenu_andSession($entity_type, $node_nid, $node_type, &$vars, &$cur_shop_info, &$argument_shop_tid, &$argument_rajon_tid, &$argument_city_tid, &$argument_country_tid)
{
    // сформируем second_menu
    // оно является контекстно зависимым от содержания страницы

    if ($entity_type == 'node' AND $node_nid AND is_numeric($node_nid)) 
    {
        $node = new stdClass();
        $node->nid = $node_nid;
        if(!$node->type = $node_type)
            $node->type = db_result(db_query("SELECT type FROM {node} WHERE nid = '%s' ", $node->nid));

        // если в продукте, в отделе или в магазине, то выяснить, в каком магазине и установить его текущим в переменную current_shop
        // а заодно и установить second_menu для этого магазина
        // затем проверить, установлен ли параметр current_city и равен ли он текущему городу текущего установленного магазина
        // если не установлен или не равен, установить новое значение, равное городу только что установленного магазина

        if (strpos($node->type, 'product') !== FALSE OR $node->type == 'c_department') 
            zp_functions_setSecondMenu_andSession_forProdOrDept($node, $vars, $cur_shop_info, $argument_shop_tid, $argument_rajon_tid, $argument_city_tid);
        elseif ($node->type == 'c_shop') 
            zp_functions_setSecondMenu_andSession_forShop($node, $vars, $argument_shop_tid, $argument_rajon_tid, $argument_city_tid);
        elseif ($node->type == 'c_rajon') 
            $argument_rajon_tid = zp_functions_setSecondMenu_andSession_forRajon($node, $vars);
        elseif ($node->type == 'c_city') 
            $argument_city_tid = zp_functions_setSecondMenu_andSession_forCity($node, $vars);
        elseif ($node->type == 'c_country') 
            $argument_country_tid = zp_functions_setSecondMenu_andSession_forCountry($node, $vars);
        else 
            zp_functions_setSecondMenu_andSession_forOtherNodeTypes($node, $vars);
    } 
    else 
        zp_functions_setSecondMenu_andSession_forNotNodes($node, $vars);
    
}



// get Current Place Tid and send it to js (to save it there to cookies)

            


function zp_functions_getCurrentPlaceTid()
{
    $current_place = null;
    if(isset($_SESSION['current_otdel']) AND $_SESSION['current_otdel'])
    {
        $current_place['tid'] = $_SESSION['current_otdel'];
        $current_place['type'] = 'current_otdel';
        
        $current_place['shop_tid'] = $_SESSION['current_shop'];
    }
    elseif(isset($_SESSION['current_shop']) AND $_SESSION['current_shop'])
    {
        $current_place['tid'] = $_SESSION['current_shop'];
        $current_place['type'] = 'current_shop';
    }
    elseif(isset($_SESSION['current_rajon']) AND $_SESSION['current_rajon'])
    {
        $current_place['tid'] = $_SESSION['current_rajon'];
        $current_place['type'] = 'current_rajon';
    }
    elseif(isset($_SESSION['current_city']) AND $_SESSION['current_city'])
    {
        $current_place['tid'] = $_SESSION['current_city'];
        $current_place['type'] = 'current_city';
    }
    elseif(isset($_SESSION['current_country']) AND $_SESSION['current_country'])
    {
        $current_place['tid'] = $_SESSION['current_country'];
        $current_place['type'] = 'current_country';
    }
    
    return $current_place;
}
            



function zp_functions_sendCurrentPlaceTid_toJs()
{
    $current_place = zp_functions_getCurrentPlaceTid();
    
    drupal_add_js(    
        "
            zp_place_tid = " . ($current_place?$current_place['tid']:'null') . ";
            zp_place_type = '" . ($current_place?$current_place['type']:'null') . "';
                
            zp_shop_tid = '" . (isset($current_place['shop_tid'])?$current_place['shop_tid']:'null') . "';
                
        ", 'inline');
}





// set all current place linage to session if $current_place_tid is defined
// it's used only with ajax calls to recreate last session data for a user
function zp_functions_setCurrentPlaceLinage_andSession($remote_place_tid, $remote_place_type)
{
    // we do it only if a $remote_place_tid is set 
    // and session place var is not defined yet or not equal to remote cookies
    
    if(!$remote_place_tid OR (isset($_SESSION[$remote_place_type]) AND $_SESSION[$remote_place_type] == $remote_place_tid))
        return; 

    if($remote_place_type == 'current_country')
    {
        $_SESSION['current_country'] = $remote_place_tid;
        return;
    }

    $linage_tids = array();
    
    $node_tid = $remote_place_tid;
    $count = 0;
    while (($node_tid = db_result(db_query("SELECT parent FROM {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0) 
    {
        $linage_tids[] = $node_tid;
        //$linage_names[] = db_result(db_query("SELECT name FROM {term_data} WHERE tid  = '%s'", $node_tid));
        $count++;
    }

    
    
    switch($remote_place_type)
    {
        case 'current_otdel':
            $_SESSION['current_otdel'] = $remote_place_tid; 
            $_SESSION['current_shop'] = $linage_tids[$count - 4]; 
            $_SESSION['current_rajon'] = $linage_tids[$count - 3];
            $_SESSION['current_city'] = $linage_tids[$count - 2]; 
            $_SESSION['current_country'] = $linage_tids[$count - 1];
            break;
        case 'current_shop':
            $_SESSION['current_shop'] = $remote_place_tid;
            $_SESSION['current_rajon'] = $linage_tids[$count - 3];
            $_SESSION['current_city'] = $linage_tids[$count - 2]; 
            $_SESSION['current_country'] = $linage_tids[$count - 1];
            break;
        case 'current_rajon':
            $_SESSION['current_rajon'] = $remote_place_tid;
            $_SESSION['current_city'] = $linage_tids[$count - 2]; 
            $_SESSION['current_country'] = $linage_tids[$count - 1];
            break;
        case 'current_city':
            $_SESSION['current_city'] = $remote_place_tid; 
            $_SESSION['current_country'] = $linage_tids[$count - 1];
            break;
    }
    
    //return array('tids' => $linage_tids, 'names' => $linage_names);
    return null;
}