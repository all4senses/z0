<?php

function zp_order_name_perm() {
  return array('manage Order Name options');
}

/**
 * Implementation of hook_menu().
 */
/*
function zp_order_name_menu($may_cache) {
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/store/settings/checkout/order_name',
      'title' => t('Order Name settings'),
      'description' => t('Manage Order Name options'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('zp_order_name_settings_form'),
      'access' => user_access('manage Order Name options'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

function zp_order_name_settings_form_submit($form, $form_values) {
  //variable_set('zp_order_name_per_item', $form_values['per_item']);
  //variable_set('zp_order_name_charge', $form_values['charge']);
}


function zp_order_name_settings_form() {
  $per_item = variable_get('zp_order_name_per_item', 1);
  $charge = variable_get('zp_order_name_charge', 3.00);
  $form['per_item'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge per item rather than per order'),
    '#default_value' => $per_item,
    '#weight' => '1'
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Price per Order Name'),
    '#default_value' => $charge,
    '#weight' => '2'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => '3'
  );
  return $form;
}

*/

/**
 * Implementation of hook_checkout_pane
 */
function zp_order_name_checkout_pane() {
  
    $panes[] = array(
      'id' => 'zp_order_name',
      'title' => t('Order Name'),
      'desc' => t('Order Name'),
	  '#collapsed' => TRUE,
      'callback' => 'uc_checkout_pane_zp_order_name',
      'weight' => 10,
    );
    return $panes;
 
}


function uc_checkout_pane_zp_order_name($op, &$arg1, $arg2) {
	
   switch ($op) {
   	
    case 'view':
    	
    	
    	
		//$per_item = variable_get('zp_order_name_per_item', 1);
        //$charge = variable_get('zp_order_name_charge', 3.00);
		$description = t('Введите предпочтительное название заказа. Это позволит Вам в дальнейшем легко находить по названию и использовать данный заказ повторно.');
		/*
		$contents['gwcheck'] = array(
          '#type' => 'checkbox',
          '#title' => t('Add Order Name ($' . number_format($charge,2) . ($per_item ? ' per item' : '') . ')'),
          '#description' => t(''),
          '#default_value' => $arg1->order_name['chk'],
        );
        */
        $contents['o_name'] = array(
          '#type' => 'textfield',
		  '#maxlength' => 30,
          //'#cols' => 30,
		  //'#rows' => 2,
          '#title' => t('Preferable Order Name'),
          '#description' => t(''),
          //'#default_value' => $arg1->order_name['text'],
          '#default_value' => $arg1->data['order_name'],
        );
		
		
        //print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
        
        return array('description' => $description, 'contents' => $contents);

		
		
		
		
		
// my changes	-----------------------------
	
  case 'review':
  	
		//print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
    	
  	
        //$review[] = array('title' => t('Order Name'), 'data' => $arg1->order_name['text'], 'weight' => -10);
        
        $review[] = array('title' => t('Order №'), 'data' => $arg1->order_id); 
        
        if($arg1->data['order_name'] AND $arg1->data['order_name'] != '' AND $arg1->data['order_name'] != ' ') // если поле с названием заказа не пустое, добавляем его к заказу
        {	
        	$review[] = array('title' => t('Order Name'), 'data' => $arg1->data['order_name']); //, 'weight' => 5
        	//$review[] = $arg1->data['order_name']; //, 'weight' => 5
        	
        }	
        
      	return $review;
      

		

			
  case 'process':
  		//drupal_set_message('process Order-id 1 = ' . $arg1->order_id, 'error');
  		
  		

		//$arg1->order_name['chk'] = $arg2['gwcheck'];

		//$arg1->order_name['text'] = $arg2['o_name'];
		$arg1->data['order_name'] = $arg2['o_name']; // как раз тут данные переносятся из формы на странице в объект, который потом будет сохранён в базе
		
		//drupal_set_message('o_name = ' . $arg1->data['order_name'], 'error');
		
		// занесение данных о времени доставки в объект заказа в базе (в заказе обновляется только поле data)
    	// эта операция может выполняться как тут, так и в ниже в функции zp_order_name_order($op, &$arg1) в разделе case save:
    	if($arg1->data['order_name'] AND $arg1->data['order_name'] != '' AND $arg1->data['order_name'] != ' ') // если поле с названием заказа не пустое, добавляем его к заказу
    		db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($arg1->data), $arg1->order_id);

		
		
		
		//print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
    	
		return TRUE;
  }
}

/*
function _zp_order_name_save($order_id, $total_charge, $o_name = '') {
  uc_order_line_item_add($order_id, 'order_name', t('Order Name'), $total_charge, 1);
  db_query("INSERT INTO {zp_order_name} (order_id, o_name) values(%d, '%s')", $order_id, $o_name);
}

function _zp_order_name_load($order_id) {
  $result = db_query("SELECT order_id, o_name FROM {zp_order_name} WHERE order_id = %d", $order_id);
  return db_fetch_object($result);
}

function _zp_order_name_delete($order_id) {
  db_query("DELETE FROM {uc_order_line_items} WHERE order_id = %d AND type = 'order_name'", $order_id);
  db_query("DELETE FROM {zp_order_name} WHERE order_id = %d", $order_id);
}

*/

/*
 *  Hook Order Funtions
 *  Called from uc_points_payment.inc hook_order
 */
 
 /**
 * Implementation of hook_line_item().
 */
 
/*
function zp_order_name_line_item() {
  $items[] = array(
    'id' => 'order_name',
    'title' => t('Order Name'),
    'weight' => 6,
    'stored' => true,
	'add_list' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );

  return $items;
}
 
*/





function uc_order_pane_zp_order_name($op, $arg1) {
  //echo 'op = ' . $op;
  print '<PRE>';
  print_r($arg1);
  print '</PRE>';
  
	switch ($op) {
    case 'view':
      
      //$comments = uc_order_comments_load($arg1->order_id);
      //return tapir_get_table('op_order_comments_view_table', $comments);
      return;

    case 'customer':
      /*
      $comments = uc_order_comments_load($arg1->order_id);
      $header = array(t('Date'), t('Status'), array('data' => t('Message'), 'width' => '100%'));
      $rows[] = array(
        format_date($arg1->created, 'custom', variable_get('uc_date_format_default', 'm/d/Y')),
        array('data' => '-', 'align' => 'center'),
        t('Order created.')
      );
      if (count($comments) > 0) {
        foreach ($comments as $comment) {
          $rows[] = array(
            'data' => array(
              array('data' => format_date($comment->created, 'custom', variable_get('uc_date_format_default', 'm/d/Y')), 'align' => 'center'),
              array('data' => $comment->title, 'align' => 'center', 'nowrap' => 'nowrap'),
              check_plain($comment->message),
            ),
            'valign' => 'top'
          );
        }
      }
      
      $output = theme('table', $header, $rows);
      return $output;
      */

      return;
  }
}






/**
 * Implementation of hook_order().
 */

// my changes
//function zp_order_name_order($op, &$arg1) {
function zp_order_name_order($op, $arg1) {


  
  switch ($op) {
    case 'save':
    	
    	
    	
    	
    	//drupal_set_message('order save = ' . $arg1->order_id, 'error');
    	//$ord = uc_order_load($arg1->order_id);
    	
    	//$arg1->data['order_name'] = $arg1->order_name['text'];
    	
    	
    	
    	
    	
    	
    	
    	
    	
    	// правильная операция, просто она может выполняться и в другом месте...
    	
    	// занесение данных о времени доставки в объект заказа в базе (в заказе обновляется только поле data)
    	// эта операция может выполняться как тут, так и в выше в функции uc_checkout_pane_zp_order_name($op, &$arg1, $arg2) в разделе case process:
    	// db_query("UPDATE {uc_orders} SET data = '%s' WHERE order_id = %d", serialize($arg1->data), $arg1->order_id);
    	
    	//print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
    	
    	
    	
    	
	  //print_r($arg1); die();
	  
	  /*
	   _zp_order_name_delete($arg1->order_id);
	   if ($arg1->order_name['chk']) {
	     $per_item = variable_get('zp_order_name_per_item', 1);
         $charge = variable_get('zp_order_name_charge', 3.00);		
	     if ($per_item) {
		   //charge per item - count number of items in order
		   foreach ($arg1->products as $product) {
		     $total_charge += $product->qty * $charge;
		   }
		 } 
		 else {
		   $total_charge = $charge;
		 }	 
	     _zp_order_name_save($arg1->order_id, $total_charge, $arg1->order_name['text']);
	   }
	   
	   */
	   break;
	   
	   
	 case 'load':
	 	//drupal_set_message('order load = ' . $arg1->order_id, 'error');
	 	
	   //if ($order_name = _zp_order_name_load($arg1->order_id)) {
	     //$arg1->order_name['text'] = $arg1->data['order_name']; //$order_name->o_name;
		 //$arg1->order_name['chk'] = 1;
	  // }
	   break;
	   
	   
	 case 'submit':
	 	
	 	//drupal_set_message('order submit = ' . $arg1->order_id, 'error');
	 	
	   // add gift message as order comment so it can be seen on store admin order detail page
	   //if ($order_name = _zp_order_name_load($arg1->order_id)) {
	     //uc_order_comment_save($arg1->order_id, $arg1->uid, t('Preferable delibery time:') . '"' . $order_name->o_name . '"', 'order');
	   //}
	   break;
	 
	 //case 'total':
	 case 'delete':
	 	//drupal_set_message('order delete = ' . $arg1->order_id, 'error');
	 	
	   //clean up
	   //_zp_order_name_delete($arg1->order_id);
	   break;
  }
} 
 
?>