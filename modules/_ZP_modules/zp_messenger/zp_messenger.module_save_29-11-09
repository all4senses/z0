<?php

function zp_messenger_perm() {
  return array('manage ZP Messenger options');
}

/**
 * Implementation of hook_menu().
 */
/*
function zp_messenger_menu($may_cache) {
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/store/settings/checkout/zp_messenger',
      'title' => t('ZP Messenger settings'),
      'description' => t('Manage ZP Messenger options'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('zp_messenger_settings_form'),
      'access' => user_access('manage ZP Messenger options'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}




function zp_messenger_settings_form() {
  $per_item = variable_get('zp_messenger_per_item', 1);
  $charge = variable_get('zp_messenger_charge', 3.00);
  $form['per_item'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge per item rather than per order'),
    '#default_value' => $per_item,
    '#weight' => '1'
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Price per ZP Messenger'),
    '#default_value' => $charge,
    '#weight' => '2'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => '3'
  );
  return $form;
}

*/



/*
function zp_messenger_settings_form_submit($form, $form_values) {
  //variable_set('zp_messenger_per_item', $form_values['per_item']);
  //variable_set('zp_messenger_charge', $form_values['charge']);
}
*/




/**
 * Implementation of hook_configuration().
 *
 * Connect the weightquote action and event.
 */

/*
function zp_messenger_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_messenger_workflow' => array(
      '#label' => t('Отправлено сообщение через webform'),
      '#event' => 'zp_messenger_webform_sent_event',
      '#module' => 'zp_messenger',
      '#active' => 0, //$enabled['weightquote'],
    ),
  );

  $action = workflow_ng_use_action('zp_messenger_send_sms_action', array(
    '#label' => t('Send SMS to admin(s)'),
  ));
  $configurations['zp_messenger_workflow'] = workflow_ng_configure($configurations['zp_messenger_workflow'], $action);

  return $configurations;
}
*/  


/*



function uc_usps_configuration() {
  //$enabled = variable_get('uc_quote_enabled', array());
  $configurations = array(
    'zp_messenger_workflow' => array(
      '#label' => t('Shipping quote from USPS'),
      '#event' => 'get_quote_from_usps',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps'],
    ),
    'uc_usps_get_intl_quote' => array(
      '#label' => t('Shipping quote from USPS Intl.'),
      '#event' => 'get_quote_from_usps_intl',
      '#module' => 'uc_usps',
      '#active' => $enabled['usps_intl'],
    ),
  );
  // Domestic areas include U.S., American Samoa, Guam, Puerto Rico, and the Virgin Islands
  $countries = array(16, 316, 630, 840, 850);
  $us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is in domestic US areas (US, AS, GU, PR, VI)'),
    '#settings' => array(
      'countries' => $countries,
    ),
  ));
  $not_us_area_condition = workflow_ng_use_condition('uc_order_condition_delivery_country', array(
    '#label' => t('Is not in domestic US areas (US, AS, GU, PR, VI)'),
    '#negate' => true,
    '#settings' => array(
      'countries' => $countries,
    ),
  ));

  $action = workflow_ng_use_action('uc_quote_action_get_quote', array(
    '#label' => t('Fetch a shipping quote'),
  ));
  $configurations['uc_usps_get_quote'] = workflow_ng_configure($configurations['uc_usps_get_quote'], $action, $us_area_condition);
  $configurations['uc_usps_get_intl_quote'] = workflow_ng_configure($configurations['uc_usps_get_intl_quote'], $action, $not_us_area_condition);

  return $configurations;
} 

*/
 




/*
* Implementation of hook_event_info()
*/
function zp_messenger_event_info() {
  return array(
    'zp_webform_message_sent' => array(
      '#label' => 'The message has been sent via webform',
      '#module' => 'zp_messenger',
      '#arguments' => array(
        'arg A' => array('#entity' => 'user', '#label' => t('User arg A, which adds userB.')),
        'arg B' => array('#entity' => 'user', '#label' => t('User arg B, which is added to UserA\'s list.')),
      ),
      '#redirect' => TRUE,
    ),
  );
}




/*


function zp_messenger_send_alert($event_name, $args, $action)
{
	switch($action)
	{
		case 'sms':
			
			zp_messenger_send_sms($args, $subject);
			break;
		
			
		case 'email':
			
			//zp_messenger_send_email($event_name, $args);
			break;
			
			
		case 'all':
			
			zp_messenger_send_sms($event_name, $args);
			zp_messenger_send_email($event_name, $args);
			break;
		
	}
	
	return;
}


*/







function zp_messenger_send_mail($event_name,
								$from,
								$to, 
								$subject,  
								$body,
								$headers = array())
{
  		
	
	// сформируем хидер для письма
	
	$defaults = array(
   	'MIME-Version' => '1.0',
   	'Content-Type' => 'text/plain; charset=UTF-8; format=flowed',
   	'Content-Transfer-Encoding' => '8Bit',
   	'X-Mailer' => 'The Batt! (v3.99.3) Professional',
   	//'X-Priority' => '3 (Normal)'
   	'X-Priority' => '2 (high)'
   	//'X-PHP-Script' => 'tst script'
  	);

  	
  	$body = "\n". $body;
   	$defaults['Sender'] = $defaults['Return-Path'] = $defaults['Errors-To'] = $from;
  	$headers = array_merge($defaults, $headers);
   	$mimeheaders = array();
  	//$defaults['From'] = $from;
   	//$mimeheaders['To'] = $to; // если эта строчка будет использоваться при выполнении прямо на сервере all4senses.com, то будет дублирование "to"
  	//$mimeheaders['Subject']= mime_header_encode($subject);;
  	foreach ($headers as $name => $value)
   		$mimeheaders[$name] = mime_header_encode($value);
   		//$mimeheaders[] = $name .': '. mime_header_encode($value);
 	

   	//print '<PRE>';
  	//print_r($headers);
  	//print_r($mimeheaders);
  	//print '</PRE>';
   		
	//drupal_mail($mailkey, $to, $subject, $body, $from = NULL, $headers = array());
	drupal_mail($event_name, 
				$to, 
				$subject,  
				$body, 
				$from, 
				$mimeheaders);
  	
	return;
}







function zp_messenger_make_sms($message, $format = 1)
{

 	// транслитерируем и сокращаем размер сообщения (так как всё сообщение не влезет) сообщения и высылаем его на телефон в виде sms

 	$message = zp_messenger_translit($message, 1);
	$count = strlen($message) - 87;
	$message = substr($message, 0, 87);
	$message = $message . '+' . $count;
  	
	return $message;
}



function zp_messenger_translit($message, $format = 1)
{

	// таблица для транслита
 	$iso1 = array(
   	"Р„"=>"Ye","Р†"=>"I","Рѓ"=>"G","С–"=>"i","в„–"=>"#","С”"=>"ye","С“"=>"g",
   	"Рђ"=>"A","Р‘"=>"B","Р’"=>"V","Р“"=>"G","Р”"=>"D",
   	"Р•"=>"E","РЃ"=>"Yo","Р–"=>"Zh",
   	"Р—"=>"Z","Р"=>"I","Р™"=>"J","Рљ"=>"K","Р›"=>"L",
   	"Рњ"=>"M","Рќ"=>"N","Рћ"=>"O","Рџ"=>"P","Р "=>"R",
   	"РЎ"=>"S","Рў"=>"T","РЈ"=>"U","Р¤"=>"F","РҐ"=>"Kh",
   	"Р¦"=>"Ts","Р§"=>"Ch","РЁ"=>"Sh","Р©"=>"Sch","РЄ"=>"'",
   	"Р«"=>"Y","Р¬"=>"","Р­"=>"E","Р®"=>"Yu","РЇ"=>"Ya",
   	"Р°"=>"a","Р±"=>"b","РІ"=>"v","Рі"=>"g","Рґ"=>"d",
   	"Рµ"=>"e","С‘"=>"yo","Р¶"=>"zh",
   	"Р·"=>"z","Рё"=>"i","Р№"=>"j","Рє"=>"k","Р»"=>"l",
   	"Рј"=>"m","РЅ"=>"n","Рѕ"=>"o","Рї"=>"p","СЂ"=>"r",
   	"СЃ"=>"s","С‚"=>"t","Сѓ"=>"u","С„"=>"f","С…"=>"kh",
   	"С†"=>"ts","С‡"=>"ch","С€"=>"sh","С‰"=>"shh","СЉ"=>"",
   	"С‹"=>"y","СЊ"=>"","СЌ"=>"e","СЋ"=>"yu","СЏ"=>"ya","В«"=>"","В»"=>"","вЂ”"=>"-","С—"=>"i","Р‡"=>"I" 
  	);
	
  	// добавляем не вошедшие в таблицу символы
	$iso1[cp1251_to_utf8_recursive('И')] = "I";
	$iso1[cp1251_to_utf8_recursive('П')] = "P";
	$iso1[cp1251_to_utf8_recursive('Р')] = "R";
	$iso1[cp1251_to_utf8_recursive('Э')] = "E";


	if ($format == 1)
		$message = strtr(cp1251_to_utf8_recursive($message), $iso1);
	else
		$message = strtr($message, $iso1);
  	
	return strtr($message, $iso1);
}





/*
function zp_messenger_form_alter(&$form, &$form_state, $form_id) {
	

  if ($form_id == 'comment_form') {
  	echo $form_id;
  	print '<PRE>';	
	print_r($form_srate);
	print '</PRE>';	

    //$form['#submit'] += array('players_nameform_submit' => array(&$form, &$form_state, $form_id)); // players_nameform_submit будет заниматься вставкой в отдельную таблицу БД значений из моего куска формы
    //$form['#validate'] += array('players_nameform_validate' => array()); // players_nameform_validate проверит правильность введённых значения из моего куска формы
    //$form['#theme'] += array('players_nameform' => array()); // theme_players_nameform темизирует мой кусок формы нужным образом.
    //$form['#size'] = 3;  
    //for ($i = 0; $i < $form['#size']; $i++) {
      // Рисуем строки полей
    //}
  }
}

*/