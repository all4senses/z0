<?php
// $Id: node_extended_stats.module,v 1.1.2.1 2008/11/20 06:34:42 jaydub Exp $

/**
 * @file
 * Allows for tracking of content views and comment counts for arbitrary time periods
 *
 */

/**
 * Implementation of hook_help().
 */
function node_extended_stats_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows for tracking of content view counts and comment counts for arbitrary time periods.');
      break;
    case 'admin/help#node_extended_stats':
      return t("<p>The Node Extended Stats module allows you to collect content view counts and comment counts for arbitrary time periods. The statistics module included in Drupal can track view counts for a single day or 'all time' which while useful does not allow for a more nuanced look at content views.</p>");
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function node_extended_stats_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/node_extended_stats',
      'title' => t('Node Extended Stats settings'),
      'description' => t('Node Extended Stats module configuration page.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('node_extended_stats_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );

    $items[] = array(
      'path' => 'admin/logs/node_extended_stats',
      'title' => t('Most Viewed/Commented Content'),
      'description' => t('View list of most frequently viewed or commented on content.'),
      'callback' => 'node_extended_stats_periodcount_report',
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

/**
 * Implementation of hook_settings().
 */
function node_extended_stats_admin_settings() {

  $form['time_periods'] = array(
    '#type' => 'fieldset',
    '#title' => t('Time periods'),
    '#collapsible' => FALSE,
  );

  $form['time_periods']['node_extended_stats_nodecount_timeperiods'] = array(
    '#type' => 'select',
    '#title' => t('Node count time periods'),
    '#description' => t('Select the time periods that you wish to track node view counts or comment counts for. View counts and comment counts for 1 day (24 hours) are already trackable via the statistics module so that timeperiod has been left off.'),
    '#options' => drupal_map_assoc(array(600, 900, 1800, 3600, 7200, 14400, 21600, 43200, 259200, 604800, 1296000, 2592000, 15724800, 31536000), node_extended_stats_format_interval),
    '#default_value' => variable_get('node_extended_stats_nodecount_timeperiods', array()),
    '#multiple' => TRUE,
    '#size' => 8,
  );

  $form['time_periods']['node_extended_stats_update_per_cron'] = array(
    '#type' => 'select',
    '#title' => t('Number of nodes to update every cron run'),
    '#description' => t('Select the number of nodes that you want to update summary counts for on every cron run. Select <strong>0</strong> to update all nodes on each cron run. Summary updates are calculated on nodes with the oldest last summary timestamp as more recently viewed nodes will likely have their view counts updated on a regular page view.'),
    '#options' => drupal_map_assoc(array(0, 10, 20, 50, 100, 200, 500)),
    '#default_value' => variable_get('node_extended_stats_update_per_cron', 0),
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_cron().
 */
function node_extended_stats_cron() {
  $periods = variable_get('node_extended_stats_nodecount_timeperiods', array());

  if ($periods) {
    // delete raw stats rows older than max timeperiod
    db_query('DELETE FROM {node_extended_stats_raw} WHERE timestamp < %d', (time() - max($periods)));

    $limit = variable_get('node_extended_stats_update_per_cron', 0);
    if ($limit) {
      $nodes = db_query_range('SELECT DISTINCT(ns.nid) FROM {node_extended_stats_summary} ns INNER JOIN {node} n ON ns.nid = n.nid WHERE n.status = 1 ORDER BY ns.timestamp ASC', 0, $limit);
    }
    else {
      $nodes = db_query('SELECT DISTINCT(ns.nid) FROM {node_extended_stats_summary} ns INNER JOIN {node} n ON ns.nid = n.nid WHERE n.status = 1');
    }
    $time = time();
    while ($node = db_fetch_object($nodes)) {
      foreach ($periods as $period) {
        $count = db_result(db_query('SELECT COUNT(*) FROM {node_extended_stats_raw} WHERE nid = %d AND timestamp >= %d', $node->nid, ($time - $period)));
        $commentcount = db_result(db_query('SELECT COUNT(*) FROM {comments} WHERE nid = %d AND timestamp >= %d AND status = %d', $node->nid, ($time - $period), COMMENT_PUBLISHED));
        db_query('UPDATE {node_extended_stats_summary} SET viewcount = %d, commentcount = %d, timestamp = %d WHERE nid = %d AND period = %d', $count, $commentcount, $time, $node->nid, $period);
        if (!db_affected_rows()) {
          db_query('INSERT INTO {node_extended_stats_summary} (nid, period, viewcount, commentcount, timestamp) VALUES (%d, %d, %d, %d, %d)', $node->nid, $period, $count, $commentcount, $time);
        }
      }
    }
  }
}

/**
 * Implementation of hook_exit().
 */
function node_extended_stats_exit() {
  global $user;
  drupal_bootstrap(DRUPAL_BOOTSTRAP_PATH);

  if (variable_get('statistics_count_content_views', 0)) {
    if ((arg(0) == 'node') && is_numeric(arg(1)) && arg(2) == '') {
      if (!variable_get('statistics_enable_access_log', 0) || !db_num_rows(db_query("SELECT title FROM {accesslog} WHERE path = '%s' AND sid = '%s' AND uid = %d AND timestamp >= %d", $_GET['q'], session_id(), $user->uid, (time() - 300)))) {
        // run the node stats update for each enabled time period
        _node_extended_stats_update_node_count(arg(1));
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function node_extended_stats_nodeapi(&$node, $op, $page = FALSE, $teaser = FALSE) {
  switch ($op) {
    case 'insert':
      $time = time();
      $periods = variable_get('node_extended_stats_nodecount_timeperiods', array());
      foreach ($periods as $period) {
        db_query('INSERT INTO {node_extended_stats_summary} (nid, period, timestamp) VALUES (%d, %d, %d)', $node->nid, $period, $time);
      }
      break;
    case 'delete':
      db_query('DELETE FROM {node_extended_stats_raw} WHERE nid = %d', $node->nid);
      db_query('DELETE FROM {node_extended_stats_summary} WHERE nid = %d', $node->nid);
      break;
  }
}

/**
 * builds a select form elment with the list of available
 * time periods that content view counts are collected for.
 */
function node_extended_stats_form_timeperiod() {
  $periods = variable_get('node_extended_stats_nodecount_timeperiods', array());
  foreach ($periods as $period) {
    $timeperiods[$period] = format_interval($period, 1);
  }

  if (empty($_SESSION['node_extended_stats_report_timeperiod'])) {
    $_SESSION['node_extended_stats_report_timeperiod'] = max($periods);
  }

  $form['timeperiod'] = array(
    '#type' => 'select',
    '#title' => t('Choose time period'),
    '#options' => $timeperiods,
    '#default_value' => $_SESSION['node_extended_stats_report_timeperiod'],
  );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['#redirect'] = FALSE;

  return $form;
}

function node_extended_stats_form_timeperiod_submit($form_id, $form_values) {
  $_SESSION['node_extended_stats_report_timeperiod'] = $form_values['timeperiod'];
}

function theme_node_extended_stats_form_timeperiod($form) {
  return '<div class="container-inline">'. drupal_render($form) .'</div>';
}

/**
 * Displays a table of the most viewed content for the
 * arbitrary time period selected.
 */
function node_extended_stats_periodcount_report() {
  $periods = variable_get('node_extended_stats_nodecount_timeperiods', array());

  if ($periods) {
    $output = drupal_get_form('node_extended_stats_form_timeperiod');

    $header = array(
      array('data' => t('Type'), 'field' => 'n.type'),
      array('data' => t('Title'), 'field' => 'n.title'),
      array('data' => t('Views'), 'field' => 'nv.viewcount', 'sort' => 'desc'),
      array('data' => t('Comments'), 'field' => 'nv.commentcount'),
    );

    $sql = 'SELECT n.nid, n.type, n.title, nv.viewcount, nv.commentcount FROM {node} n INNER JOIN {node_extended_stats_summary} nv ON n.nid = nv.nid WHERE n.status = 1 AND nv.period = %d';
    $tablesort = tablesort_sql($header);

    $period = $_SESSION['node_extended_stats_report_timeperiod'];
    $result = pager_query($sql . $tablesort, 50, 0, NULL, $period);

    $node_types = node_get_types();

    while ($views = db_fetch_object($result)) {
      $rows[] = array(
        'data' => array(
          $node_types[$views->type]->name,
          l($views->title, 'node/'. $views->nid),
          number_format($views->viewcount),
          number_format($views->commentcount),
        ),
      );
    }

    $output .= theme('table', $header, $rows);
    $output .= theme('pager', NULL, 50, 0);
  }
  else {
    $output = t('There are no time periods currently configured to collect content view counts for. You can select time periods to collect data for on the <a href="@settings">stats settings</a> page', array('@settings' => url('admin/settings/node_extended_stats')));
  }

  return $output;
}

/**
 * Update or Insert node count for each configured
 * time period
 */
function _node_extended_stats_update_node_count($nid) {
  global $user;

  db_query("INSERT INTO {node_extended_stats_raw} (nid, sid, uid, timestamp) VALUES (%d, '%s', %d, %d)", $nid, session_id(), $user->uid, time());

  $periods = variable_get('node_extended_stats_nodecount_timeperiods', array());
  if ($periods) {
    $time = time();
    foreach ($periods as $period) {
      $count = db_result(db_query('SELECT COUNT(*) FROM {node_extended_stats_raw} WHERE nid = %d AND timestamp >= %d', $nid, ($time - $period)));
      $commentcount = db_result(db_query('SELECT COUNT(*) FROM {comments} WHERE nid = %d AND timestamp >= %d', $nid, ($time - $period)));
      db_query('UPDATE {node_extended_stats_summary} SET viewcount = %d, commentcount = %d, timestamp = %d WHERE nid = %d AND period = %d', $count, $commentcount, $time, $nid, $period);
      if (!db_affected_rows()) {
        db_query('INSERT INTO {node_extended_stats_summary} (nid, period, viewcount, commentcount, timestamp) VALUES (%d, %d, %d, %d, %d)', $nid, $period, $count, $commentcount, $time);
      }
    }
  }

  // delete raw stats rows older than max timeperiod
  db_query('DELETE FROM {node_extended_stats_raw} WHERE nid = %d AND timestamp < %d', $nid, ($time - max($periods)));
}

/**
 * Custom implementation of format_interval to force
 * granularity since cannot specifiy parameters to
 * function used in drupal_map_assoc function
 */
function node_extended_stats_format_interval($timestamp) {
  return format_interval($timestamp, 1);
}
