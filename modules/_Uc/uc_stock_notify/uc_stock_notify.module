<?php
// $Id: uc_stock_notify.module,v 1.1 2008/12/13 15:23:25 longwave Exp $

/**
 * Implementation of hook_perm().
 */
function uc_stock_notify_perm() {
  return array('subscribe to stock notices');
}

/**
 * Implementation of hook_menu().
 */
function uc_stock_notify_menu($may_cache) {
  global $user;
  $items = array();
  if (!$may_cache && !$user->uid) {
    $items[] = array(
      'path' => 'stock_notify',
      'title' => t('Stock notification'),
      'description' => t('Add stock notification for anonymous users.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_stock_notify_anonymous_form', arg(1)),
      'access' => !$user->uid,
      'type' => MENU_CALLBACK,
    );
  }
  return $items;
}

/**
 * Implementation of hook_form_alter().
 */
function uc_stock_notify_form_alter($form_id, &$form) {
  if ($form_id == 'uc_stock_edit_form') {
    // hook into stock update form submissions
    $form['#submit'] = array_merge(array('uc_stock_notify_edit_submit' => array()), $form['#submit']);
  }
  else if ($form_id == 'uc_stock_settings_form') {
    $form['uc_stock_notify'] = array(
      '#type' => 'fieldset',
      '#title' => t('Back in stock notices'),
      '#description' => t('Sent to customers who have requested stock notifications when products come back into stock.'),
      '#collapsible' => TRUE,
    );
    $form['uc_stock_notify']['uc_stock_notify_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Message subject'),
      '#default_value' => variable_get('uc_stock_notify_subject', uc_get_message('uc_stock_notify_subject')),
    );
    $form['uc_stock_notify']['uc_stock_notify_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Message text for registered users'),
      '#default_value' => variable_get('uc_stock_notify_message', uc_get_message('uc_stock_notify_message')),
      '#description' => t('Uses <a href="!token-help-page">global and product tokens</a>.', array('!token-help-page' => url('admin/store/help/tokens'))),
      '#rows' => 10,
    );
    $form['uc_stock_notify']['uc_stock_notify_message_anonymous'] = array(
      '#type' => 'textarea',
      '#title' => t('Message text for anonymous users'),
      '#default_value' => variable_get('uc_stock_notify_message_anonymous', uc_get_message('uc_stock_notify_message_anonymous')),
      '#description' => t('Uses <a href="!token-help-page">global and product tokens</a>.', array('!token-help-page' => url('admin/store/help/tokens'))),
      '#rows' => 10,
    );
    $form['buttons']['#weight'] = 1;
  }
  else if (user_access('subscribe to stock notices') && $form['#base'] == 'uc_product_add_to_cart_form' && uc_stock_level($form['#parameters'][1]->model) === '0') {
    // product is out of stock
    unset($form['qty']);
    unset($form['submit']);
    $form['model'] = array('#type' => 'value', '#value' => $form['#parameters'][1]->model);
    $form['notify'] = array(
      '#type' => 'submit',
      '#attributes' => array('class' => 'stock-notify'),
      '#value' => t('Notify when back in stock'),
    );
    unset($form['#validate']);
    $form['#submit'] = array('uc_stock_notify_form_submit' => array());
    $form['#redirect'] = $_GET['q'];
  }
}

/**
 * Implementation of workflow_ng hook_configuration().
 */
function uc_stock_notify_configuration() {
  $configurations = array();
  $configurations['uc_stock_notify'] = array(
    '#label' => t('Notify customers when product comes back into stock'),
    '#event' => 'product_back_in_stock',
    '#module' => 'uc_stock_notify',
    '#active' => TRUE,
  );
  $action = workflow_ng_use_action('uc_stock_notify_send', array(
    '#label' => t('Send product "back in stock" notices'),
    '#arguments' => array(
      'model' => array('#entity' => 'model', '#label' => t('SKU')),
    ),
  ));
  $configurations['uc_stock_notify'] = workflow_ng_configure($configurations['uc_stock_notify'], $action);
  return $configurations;
}

/**
 * Implementation of workflow_ng hook_event_info().
 */
// Tell Workflow about the various cart events.
function uc_stock_notify_event_info() {
  $events['product_back_in_stock'] = array(
    '#label' => t('Product comes back into stock'),
    '#module' => t('Stock'),
    '#arguments' => array(
      'model' => array('#entity' => 'model', '#label' => t('SKU')),
    ),
  );

  return $events;
}

/**
 * Implementation of workflow_ng hook_action_info().
 */
function uc_stock_notify_action_info() {
  return array(
    'uc_stock_notify_send' => array(
      '#label' => t('Send product back in stock notice'),
      '#arguments' => array(
        'model' => array('#entity' => 'model', '#label' => t('SKU')),
      ),
      '#module' => t('Stock'),
    ),
  );
}

/**
 * Implementation of hook_uc_message().
 */
function uc_stock_notify_uc_message() {
  $messages['uc_stock_notify_subject'] = t('[store-name]: [title] back in stock');
  $messages['uc_stock_notify_message'] = t("This message has been sent to let you know that [title] is now back in stock.");
  $messages['uc_stock_notify_message_anonymous'] = t("This message has been sent to let you know that [title] is now back in stock.");
  return $messages;
}

// Called before uc_stock_edit_form_submit() so we can check for out of stock products returning to the store.
function uc_stock_notify_edit_submit($form_id, $form_values) {
  foreach (element_children($form_values['stock']) as $id) {
    $old_value = db_result(db_query("SELECT stock FROM {uc_product_stock} WHERE sku = '%s'", $form_values['stock'][$id]['sku']));
    $new_value = $form_values['stock'][$id]['stock'];
    if ($old_value == 0 && $new_value > 0) {
      workflow_ng_invoke_event('product_back_in_stock', $form_values['stock'][$id]['sku']);
    }
  }
}

// Send notifications to selected users
function uc_stock_notify_send($model, $settings) {
  $nid = db_result(db_query("SELECT n.nid FROM {uc_products} p INNER JOIN {node} n ON p.vid = n.vid WHERE p.model = '%s'", $model));
  $node = node_load($nid);
  $product = uc_product_load($node);

  $token_filters = array('global' => NULL, 'node' => $node, 'product' => $product);
  $subject = token_replace_multiple(variable_get('uc_stock_notify_subject', uc_get_message('uc_stock_notify_subject')), $token_filters);
  $body = token_replace_multiple(variable_get('uc_stock_notify_message', uc_get_message('uc_stock_notify_message')), $token_filters);
  $anon_body = token_replace_multiple(variable_get('uc_stock_notify_message_anonymous', uc_get_message('uc_stock_notify_message_anonymous')), $token_filters);
  $from = uc_store_email_from();

  $result = db_query("SELECT sn.uid, u.mail, sn.mail anon_mail FROM {uc_stock_notify} sn LEFT JOIN {users} u ON sn.uid = u.uid WHERE sku = '%s'", $model);
  $sent = 0;
  while ($row = db_fetch_array($result)) {
    if ($row['uid'] == 0) {
      drupal_mail('uc_stock_notify', $row['anon_mail'], $subject, $anon_body, $from);
    }
    else {
      drupal_mail('uc_stock_notify', $row['mail'], $subject, $body, $from);
    }
    $sent++;
  }

  if ($sent) {
    db_query("DELETE FROM {uc_stock_notify} WHERE sku = '%s'", $model);
    drupal_set_message(t('@count back in stock notice(s) sent for @model.', array('@count' => $sent, '@model' => $model)));
  }
}

// Adds a stock notification for the current user
function uc_stock_notify_form_submit($form_id, $form_values) {
  global $user;
  if ($user->uid) {
    $snid = db_result(db_query("SELECT snid FROM {uc_stock_notify} WHERE sku = '%s' AND uid = %d", $form_values['model'], $user->uid));
    if (empty($snid)) {
      db_query("INSERT INTO {uc_stock_notify} SET sku = '%s', uid = %d, created = %d", $form_values['model'], $user->uid, time());
    }
    drupal_set_message(t('You will be notified when the product comes back into stock.'));
  }
  else {
    drupal_goto('stock_notify/'. $form_values['model'], drupal_get_destination());
  }
}

// Stock notification form for anonymous users
function uc_stock_notify_anonymous_form($model) {
  $form['product'] = array(
    '#value' => t('Enter your email address to be notified when @product comes back into stock.', array('@product' => $model)),
  );
  $form['model'] = array('#type' => 'value', '#value' => $model);
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Notify when back in stock'),
  );
  return $form;
}

function uc_stock_notify_anonymous_form_validate($form_id, $form_values) {
  if ($error = user_validate_mail($form_values['mail'])) {
    form_set_error('mail', $error);
  }
}

function uc_stock_notify_anonymous_form_submit($form_id, $form_values) {
  $snid = db_result(db_query("SELECT snid FROM {uc_stock_notify} WHERE sku = '%s' AND mail = '%s'", $form_values['model'], $form_values['mail']));
  if (empty($snid)) {
    db_query("INSERT INTO {uc_stock_notify} SET sku = '%s', mail = '%s', created = %d", $form_values['model'], $form_values['mail'], time());
  }
  drupal_set_message(t('You will be notified when the product comes back into stock.'));
}
