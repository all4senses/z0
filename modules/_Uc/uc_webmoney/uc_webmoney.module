<?php
// $Id: uc_webmoney.module,v 1.1.2.5 2008/06/12 09:41:32 gor Exp $
define("cWebMoneyPayActionUrl" ,"https://merchant.webmoney.ru/lmi/payment.asp");
define("cWebMoneyRateUrl"      ,"http://wm.exchanger.ru/asp/XMLbestRates.asp");

/********************************************************************
 * Drupal Hooks
 ********************************************************************/

/**
 * Implementation of hook_perm().
 */
function uc_webmoney_perm() {
  return array('administer uc_webmoney');
}

/**
 * Implementation of hook_menu()
 */

function uc_webmoney_menu($maycache) {
  if (!$maycache) {
    $items[] = array(
      'path'     => 'uc_webmoney/done',
      'title'    => t('Internal Data'),
      'callback' => 'uc_webmoney_done_payment',
      'access'   => 1,
      'type'     => MENU_CALLBACK
    );
    $items[] = array(
      'path'     => 'uc_webmoney/success',
      'title'    => t('Webmoney processing'),
      'callback' => 'uc_webmoney_payment_end',
      'callback arguments' => array('success'),
      'access'   => 1,
      'type'     => MENU_CALLBACK
    );
    $items[] = array(
      'path'     => 'uc_webmoney/fail',
      'title'    => t('Webmoney processing'),
      'callback' => 'uc_webmoney_payment_end',
      'callback arguments' => array('fail'),
      'access'   => 1,
      'type'     => MENU_CALLBACK
    );
    $items[] = array(
      'path'        => 'admin/store/settings/webmoney',
      'title'       => 'Webmoney',
      'description' => 'Webmoney payment settings.',
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('uc_webmoney_list'),
      'access'      => user_access('administer store'),
      'type'        => MENU_NORMAL_ITEM,
    );
    $items[] = array(
      'path'        => 'admin/store/settings/webmoney/list',
      'title'       => 'Wallets',
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('uc_webmoney_list'),
      'access'      => user_access('administer store'),
      'weight'       => 1,
      'type'        => MENU_DEFAULT_LOCAL_TASK,
    );
    $items[] = array(
      'path'        => 'admin/store/settings/webmoney/add',
      'title'       => 'Add Wallet',
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('uc_webmoney_add'),
      'access'      => user_access('administer store'),
      'weight'       => 2,
      'type'        => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path'        => 'admin/store/settings/webmoney/settings',
      'title'       => 'Rate Settings',
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('uc_webmoney_settings'),
      'access'      => user_access('administer store'),
      'weight'       => 3,
      'type'        => MENU_LOCAL_TASK,
    );
    $items[] = array(
      'path'        => 'admin/store/settings/webmoney/example',
      'title'       => 'Example',
      'callback'    => 'uc_webmoney_example',
      //'callback arguments' => array('uc_webmoney_example'),
      'access'      => user_access('administer store'),
      'type'        => MENU_CALLBACK,
    );

    $items[] = array(
      'path'        => 'admin/store/settings/webmoney/edit',
      'title'       => 'Edit Wallet',
      'callback'    => 'drupal_get_form',
      'callback arguments' => array('uc_webmoney_edit'),
      'access'      => user_access('administer store'),
      'type'        => MENU_CALLBACK,
    );

  }
  return $items;
}


/**
 * Implementation of hook_form_alter().
 */
function uc_webmoney_form_alter($form_id, &$form) {
  if ($form_id == 'uc_cart_checkout_review_form' && ($order_id = intval($_SESSION['cart_order'])) > 0) {
    $order = uc_order_load($order_id);

    if ($order->payment_method == 'webmoney') {
      unset($form['submit']);
      $form['#prefix'] = '<table ><tr><td>';
      $form['#suffix'] = '</td><td>'. drupal_get_form('uc_webmoney_submit_form', $order) .'</td></tr></table>';
    }
  }
}



/**
 * Implementation of hook_cron()
 */

function uc_webmoney_cron(){
  require_once('XML/Unserializer.php');
  $unserializer_options = array (
   'parseAttributes' => TRUE
  );
  $unserializer = &new XML_Unserializer($unserializer_options);

  $result = $unserializer->unserialize(variable_get('uc_webmoney_rate_url',cWebMoneyRateUrl),true);
  if(isset($result->message)){
    form_set_error('rate_url', t('%err', array('%err' => $result->message)));
    return "";
  }

  $data = $unserializer->getUnserializedData();

  $result = db_query('SELECT * FROM {uc_webmoney_rates} ORDER BY type');
  while ($rr = db_fetch_object($result)){
    $rates[$rr->type]=$rr->type.' - '.variable_get('uc_webmoney_type_wm','WMR');
  }

  if(is_array($rates)){
    foreach($data['row'] as $key => $val){
      foreach($rates as $k => $wmrate){
        if($val['Direct'] == $wmrate){
          $pul=substr($val['BaseRate'],0,1);
          if($pul == '-'){
            $rate[$k]=1/substr($val['BaseRate'],1);
          }else{
            $rate[$k]=$val['BaseRate'];
          }
        }
      }
    }
  }

  if(is_array($rate)){
    foreach($rate as $type => $ra){
      $ra= variable_get('uc_webmoney_rate_wm','1.00') / $ra;
      db_query("UPDATE {uc_webmoney_rates} SET   rate='%s' WHERE type = '%s'", $ra, $type);
    }
  }
  $rate=variable_get('uc_webmoney_rate_wm','1.00');
  $type=variable_get('uc_webmoney_type_wm','WMR');
  db_query("UPDATE {uc_webmoney_rates} SET   rate='%s' WHERE type = '%s'", $rate, $type);
}


/********************************************************************
 * Functions callback
 ********************************************************************/
/**
 * Callback for Webmoney payment method settings.
 */


function uc_webmoney_done_payment (){
  drupal_set_header('Content-type: text/html; charset=iso-8859-1');
  $order_id              = $GLOBALS['_POST']['LMI_PAYMENT_NO'];
  $purse              = $GLOBALS['_POST']['LMI_PAYEE_PURSE'];
  $price              = $GLOBALS['_POST']['LMI_PAYMENT_AMOUNT'];
  $LMI_MODE           = $GLOBALS['_POST']['LMI_MODE'];
  $LMI_SYS_INVS_NO    = $GLOBALS['_POST']['LMI_SYS_INVS_NO'];
  $LMI_SYS_TRANS_NO   = $GLOBALS['_POST']['LMI_SYS_TRANS_NO'];
  $LMI_SYS_TRANS_DATE = $GLOBALS['_POST']['LMI_SYS_TRANS_DATE'];
  $LMI_SECRET_KEY     = $GLOBALS['_POST']['LMI_SECRET_KEY'];
  $LMI_PAYER_PURSE    = $GLOBALS['_POST']['LMI_PAYER_PURSE'];
  $LMI_PAYER_WM       = $GLOBALS['_POST']['LMI_PAYER_WM'];
  $prerequest         = $GLOBALS['_POST']['LMI_PREREQUEST'];
  $hash               = $GLOBALS['_POST']['LMI_HASH'];
  $tocheck = strtoupper( md5($purse . $price . $order_id . $LMI_MODE . $LMI_SYS_INVS_NO . $LMI_SYS_TRANS_NO . $LMI_SYS_TRANS_DATE . $LMI_SECRET_KEY . $LMI_PAYER_PURSE . $LMI_PAYER_WM));

  $data = db_fetch_object(db_query("SELECT * FROM {uc_webmoney_transaction} WHERE txnid = '%d' ",$order_id));
  $un=unserialize($data->description);
  $order = uc_order_load($order_id);

  if ($order === FALSE || uc_order_status_data($order->order_status, 'state') != 'in_checkout') {
    print t('An error has occurred during payment.  Please contact us to ensure your order has submitted.');
    uc_order_update_status($order_id, 'canceled');
    exit();
  }

  $data = db_fetch_object(db_query("SELECT * FROM {uc_webmoney_rates} WHERE purse = '%s' ",$purse));

  if($prerequest==1){
    $res="YES";

    if($un[$purse]!=$price  ){
      $res = t('This number does not match the original price');
      uc_order_comment_save($order_id, 0, $res, 'admin');
      uc_order_update_status($order_id, 'canceled');
    }

    if(empty($data) ){
      $res = t('Your wallet number does not match the original');
      uc_order_comment_save($order_id, 0, $res, 'admin');
      uc_order_update_status($order_id, 'canceled');
    }

    if(!empty($hash) ){
      if($hash != $tocheck) {
        $res = t('Security check failed');
        uc_order_comment_save($order_id, 0, $res, 'admin');
        uc_order_update_status($order_id, 'canceled');
      }
    }

  }else {
    if(!empty($data) && $un[$purse]==$price && $hash == $tocheck){
      if(!empty($data->secret_key)){
        if($data->secret_key==$LMI_SECRET_KEY ){
          $isok=true;
        }
      }else {
        $isok=true;
      }
    }
    if($isok){
      $description = t('Payment from WM %WM and Wallet %purse', array('%WM' => $LMI_PAYER_WM, '%purse' => $LMI_PAYER_PURSE));
      db_query("UPDATE {uc_webmoney_transaction} SET description = '%s' WHERE txnid = %d",$description, $order_id);
      uc_payment_enter($order_id, 'webmoney', $price, $order->uid, NULL, $description);
      uc_cart_complete_sale($order);
      uc_order_comment_save($order_id, 0, t('A payment has been accepted.'), 'admin');
    } else {
      uc_order_comment_save($order_id, 0, $res, 'admin');
      uc_order_update_status($order_id, 'canceled');
    }
  }

echo $res;

}


function uc_webmoney_list() {
  $result = db_query('SELECT * FROM {uc_webmoney_rates} ORDER BY type');
  $form['#tree'] = TRUE;
  while ($template = db_fetch_object($result)){
    $form[$template->type]['purse'] = array('#value' => $template->purse );
    $form[$template->type]['secret_key'] = array('#value' => $template->secret_key );
    $form[$template->type]['rate'] = array('#value' => $template->rate );
    $form[$template->type]['configure'] = array('#value' => l('example','admin/store/settings/webmoney/example/'.$template->purse));
    $form[$template->type]['edit'] = array('#value' => l($template->type,'admin/store/settings/webmoney/edit/'.$template->type));
    $purses[$template->type]='';
   }//while
  $form['check']=array(
        '#type' => 'checkboxes',
        '#options' => $purses
      );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Delete checked Wallet'),
  );

  return $form;
}

function uc_webmoney_list_submit($form_id, $form_values){
  foreach($form_values['check'] as $key => $val) {
    if($key == $val){
      db_query("DELETE FROM {uc_webmoney_rates} WHERE type = '%s'", $val);
    }
  }
  uc_webmoney_cron();
}


function uc_webmoney_edit($type){
  $pursed = db_fetch_object(db_query('SELECT * FROM {uc_webmoney_rates} WHERE type = "%s" ',$type));
  $form['type'] = array(
    '#type'          => 'hidden',
    '#value'         => $type
  );
  $form['purse'] = array(
    '#type'          => 'markup',
    '#title'         => t('Wallet'),
    '#value' => $pursed->purse,
  );
  $form['secret_key'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Secret key'),
    '#default_value' => $pursed->secret_key,
    '#maxlength'     => 64,
    '#description'   => t("Please enter secret key. If your leave it blank, secret key will not apply."),
//    '#required'      => TRUE,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Update Wallet'),
  );

  return $form;
}

function uc_webmoney_edit_submit($form_id, $form_values){
  if(!empty($form_values['purse']) ){
    $type=substr($form_values['purse'],0,1);
    $wmtype='WM'.$type;
    $rate=uc_webmoney_get_rate($type);
    db_query("UPDATE {uc_webmoney_rates} set wallet = '%s', secret_key = '%s' ,rate = '%s' WHERE type='%s'", $form_values['wallet'],  $form_values['secret_key'],$rate, $form_values['type']);
  }

  uc_webmoney_cron();
  return 'admin/store/settings/webmoney/list';
}


function uc_webmoney_add() {
  $form['purse'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Wallet'),
    '#maxlength'     => 13,
    '#default_value' => '',
    '#description'   => t("Please, enter Wallet number."),
    '#required'      => TRUE,
  );
  $form['secret_key'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Secret key'),
    '#default_value' => '',
    '#maxlength'     => 64,
    '#description'   => t("Please enter secret key. If your leave it blank, secret key will not apply."),
//    '#required'      => TRUE,
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Add Wallet'),
  );

  return $form;
}

function uc_webmoney_add_validate($form_id, $form_values){
  if(!empty($form_values['purse']) ){
    $type=substr($form_values['purse'],0,1);
    $wmtype='WM'.$type;
    $pursed = db_fetch_object(db_query('SELECT * FROM {uc_webmoney_rates} WHERE type = "%s" ',$wmtype));
    if(isset($pursed->type)){
      form_set_error('purse', t('!type already exists.Please enter another wallet number.', array('!type' => $wmtype)));
    }
  }
}

function uc_webmoney_add_submit($form_id, $form_values){
  if(!empty($form_values['purse']) ){
    $type=substr($form_values['purse'],0,1);
    $wmtype='WM'.$type;
    $rate=uc_webmoney_get_rate($type);
    db_query("INSERT INTO {uc_webmoney_rates} (type,purse,secret_key,rate) VALUES ('%s','%s','%s','%s')", $wmtype, $form_values['purse'],$form_values['secret_key'],$rate);
  }

  uc_webmoney_cron();
  return 'admin/store/settings/webmoney/list';
}



function uc_webmoney_settings() {

  $result = db_query('SELECT * FROM {uc_webmoney_rates} ORDER BY type');
  while ($template = db_fetch_object($result)){
    $types[$template->type]=$template->type;
  }//while
  if(empty($types)){
    form_set_error('', t('Please add your wallet number first'));
    return "";
  }

  $form['rate_url'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Rate url'),
    '#default_value' => variable_get('uc_webmoney_rate_url',cWebMoneyRateUrl),
    '#description'   => t("Please enter rate url.\nDefault: !url", array('!url' => cWebMoneyRateUrl)),
  );


  $form['wm_type'] = array(
    '#type'          => 'select',
    '#options' => $types,
    '#title'         => t('Wallet type'),
    '#default_value' => variable_get('uc_webmoney_type_wm','WMR'),
    '#description'   => t("Please select your wallet type to rate to site currency."),
  );

  $form['wm_rate'] = array(
    '#type'          => 'textfield',
    '#title'         => t('Rate to site currency'),
    '#default_value' => variable_get('uc_webmoney_rate_wm','1.00'),
    '#description'   => t("Please enter webmoney rate according to site currency."),
  );
  $form['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function uc_webmoney_settings_validate($form_id, $form_values) {
  if($form_values['wm_rate']<=0){
    form_set_error('wm_rate', t('%wm_rate must be more 0.', array('%wm_rate' => $form_values['wm_rate'])));
  }
}

function uc_webmoney_settings_submit($form_id, $form_values){
  if(isset($form_values['rate_url']))
    variable_set('uc_webmoney_rate_url',$form_values['rate_url']);
  if(isset($form_values['wm_rate']))
    variable_set('uc_webmoney_rate_wm',$form_values['wm_rate']);
  if(isset($form_values['wm_type']))
    variable_set('uc_webmoney_type_wm',$form_values['wm_type']);

  uc_webmoney_cron();
}

function uc_webmoney_example($purse){
  $pursed = db_fetch_object(db_query('SELECT * FROM {uc_webmoney_rates} WHERE purse = "%s" ',$purse));
  $output=t('<h1>Merchant purse settings</h1>
<table>
<tbody><tr>
<td nowrap="nowrap">Purse:</td>

<td class="header3" align="left"><b>!purse</b></td>
<td>&nbsp;</td>
<td align="left">&nbsp;</td>
</tr>
<tr>
<td nowrap="nowrap">Trade Name:</td>
<td align="left"><input style="display: inline;" value="!tradename" size="50" id="m_name" name="m_name" type="text"></td>
<td align="center">&nbsp;-&nbsp;</td>
<td align="left"> is displayed on the web page during the payment </td>
</tr>
<tr>
<td nowrap="nowrap">Secret Key:</td>

<td align="left"><input style="display: inline;" value="!secret_key" id="secret_key" name="secret_key" size="50" type="text"></td>
<td align="center">
<input checked="checked" id="send_secret_key" name="send_secret_key" type="checkbox"></td>
<td align="left">Send the Secret Key to the Result URL if the Result URL is secured</td>
</tr>
<tr>
<td nowrap="nowrap">Result URL:</td>
<td align="left"><input style="display: inline;" value="!done" id="result_url" name="result_url" size="50" maxlength="255" type="text"></td>
<td align="center">
<input checked="checked" id="send_param_prerequest" name="send_param_prerequest" value="1" type="checkbox">
</td>
<td align="left">
Send parameters in the pre-request
</td>
</tr>

<tr>
<td nowrap="nowrap">Success URL:</td>
<td align="left"><input style="display: inline;" value="!success" id="success_url" name="success_url" size="50" maxlength="255" type="text"></td>
<td align="center">
<select name="success_method" id="success_method">
<option value="0">GET</option>
<option value="1">POST</option>
<option value="2" selected="selected">LINK</option>
</select>
</td>
<td>
method of requesting Success URL
</td>

</tr>
<tr>
<td nowrap="nowrap">Fail URL:</td>
<td align="left"><input style="display: inline;" value="!fail" id="fail_url" name="fail_url" size="50" maxlength="255" type="text"></td>
<td align="center">
<select name="fail_method" id="fail_method">
<option value="0">GET</option>
<option value="1">POST</option>
<option value="2" selected="selected">LINK</option>
</select>
</td>
<td>
method of requesting Fail URL

</td>
</tr>
</tbody></table>
<table>
<tbody><tr>
<td nowrap="nowrap">
Allow overriding URL from Payment Request Form:
</td>
<td align="left">
<input id="allow_url_from_form" name="allow_url_from_form" value="1" type="checkbox">
</td>
<td></td>
<td></td>
</tr>
<tr>
<td nowrap="nowrap">
Send an error notification to merchant\'s keeper: 

</td>
<td align="left">
<input checked="checked" id="send_error" name="send_error" value="1" type="checkbox">
</td>
<td></td>
<td></td>
</tr>
<tr>
<td nowrap="nowrap">Signature algorithm:</td>
<td align="left">
<select name="auth_type" id="auth_type">
<option value="0">SIGN</option>
<option value="1" selected="selected">MD5</option>
</select>

</td>
<td></td>
<td></td>
</tr>





</tbody></table>
</form>',array(
     '!purse' => $pursed->purse,
     '!tradename' => variable_get('site_name', 'Drupal'),
     '!secret_key' => $pursed->secret_key,
     '!success' => url('uc_webmoney/success',NULL,NULL,TRUE),
     '!done' => url('uc_webmoney/done',NULL,NULL,TRUE),
     '!fail' => url('uc_webmoney/fail',NULL,NULL,TRUE),
     ));
  return ($output);
}


/********************************************************************
 * other Functions
 ********************************************************************/
function uc_payment_method_webmoney($op, &$arg1) {
  switch ($op) {
    case 'cart-details':
        $result = db_query('SELECT * FROM {uc_webmoney_rates} ORDER BY type');
        $first='checked';
        while ($template = db_fetch_object($result)){
          $options .= '<div class="form-item"><label class="option"><input name="LMI_PAYEE_PURSE" value="'.$template->purse.'" '.$first.' class="form-radio" type="radio"> '.$template->type.'</label></div>';
          $first='';
        }//while

        $details = '<div class="form-item"> <label>'. t('Type of wallet') . '</label>'
                  .'<div class="form-radios">'
                  .$options
                  .'</div>'
                  .'<div class="description">'.t("What type of currency will be used.").'</div>'
                  .'</div>';

      return $details;

    case 'cart-process':
        $_SESSION['LMI_PAYEE_PURSE'] = $_POST['LMI_PAYEE_PURSE'];
      return;
  }
}

// Form to build the submission to merchant.webmoney.ru.
function uc_webmoney_submit_form($order) {
  $wm = db_fetch_object(db_query('SELECT * FROM {uc_webmoney_rates} WHERE purse="%s"',$_SESSION['LMI_PAYEE_PURSE']));
  $sum = round($order->order_total * $wm->rate,2);
  $ser[$wm->purse]=$sum;
  $description=serialize($ser);
  if (db_result(db_query("SELECT COUNT(txnid) FROM {uc_webmoney_transaction} WHERE txnid = '%s'", $order->order_id))) {
     db_query("UPDATE {uc_webmoney_transaction} SET description = '%s' WHERE txnid = %d",$description, $order->order_id);
  }else {
     db_query("INSERT INTO {uc_webmoney_transaction} (txnid, description) VALUES (%d, '%s')", $order->order_id, $description);
  }
  $form['LMI_PAYEE_PURSE'] = array(
        '#type' => 'hidden',
        '#value' => $_SESSION['LMI_PAYEE_PURSE'],
      );
  $form['LMI_PAYMENT_NO'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_id,
  );

  $sitename=variable_get('site_name', 'Drupal');
  $desc = t('Purchase from site !sitename. Transaction !ID.',array('!sitename' => $sitename,'!ID' => $order->order_id));

  $form['LMI_PAYMENT_DESC'] = array(
    '#type' => 'hidden',
    '#value' => $desc,
  );

  $form['total_price'] = array(
    '#type' => 'hidden',
    '#value' => $order->order_total,
  );

  $form['LMI_PAYMENT_AMOUNT'] = array(
    '#type' => 'hidden',
    '#default_value' => $sum,
  );

  $form['#action'] = cWebMoneyPayActionUrl;
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Place your order'),
  );
  return $form;
}


function uc_webmoney_get_rate($type){
  require_once('XML/Unserializer.php');
  $unserializer_options = array (
   'parseAttributes' => TRUE
  );
  $unserializer = &new XML_Unserializer($unserializer_options);
  $result = $unserializer->unserialize(variable_get('uc_webmoney_rate_url',cWebMoneyRateUrl),true);
  $data = $unserializer->getUnserializedData();
  $wmrate='WM'.$type.' - '.variable_get('uc_webmoney_type_wm','WMR');
  if(is_array($data)){
    foreach($data['row'] as $key => $val){
      if($val['Direct'] == $wmrate){
        $pul=substr($val['BaseRate'],0,1);
          if($pul == '-'){
            $rate=1/substr($val['BaseRate'],1);
          }else{
            $rate=$val['BaseRate'];
          }
      }
    }
  }else{
    $rate=1;
  }
  if('WM'.$type==variable_get('uc_webmoney_type_wm','WMR')){
    $rate=variable_get('uc_webmoney_rate_wm','1.00');
  }else{
    $rate= variable_get('uc_webmoney_rate_wm','1.00') / $rate;
  }
  return $rate;
}

function uc_webmoney_payment_end ($type){
  if($type=='success'){
    if(isset($_SESSION['cart_order'])){
      $order_id=$_SESSION['cart_order'];
      $_SESSION['do_complete'] = TRUE;
      drupal_goto('cart/checkout/complete');
    }
  } else {
    unset($_SESSION['cart_order']);
    drupal_set_message( t("Your payment has been declined."));
    drupal_goto('cart');
  }
}

/********************************************************************
 * Hook Functions (Ubercart)
 ********************************************************************/

/**
 * Implementation of hook_payment_method().
 */
function uc_webmoney_payment_method() {
  $path = base_path() . drupal_get_path('module', 'uc_webmoney');
  $title =  t('Webmoney') . '<br /><img src="'. $path .'/images/p-wm.gif" style="position: relative; left: 2.5em;">';

  $methods[] = array(
    'id' => 'webmoney',
    'name' => t('Webmoney'),
    'title' => $title,
    'desc' => t('Redirect to Webmoney to pay by.'),
    'callback' => 'uc_payment_method_webmoney',
    'weight' => 3,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );

  return $methods;
}


/********************************************************************
 * Functions theme
 ********************************************************************/
function phptemplate_form($element){
  if($element['#id']== 'uc-webmoney-submit-form' ){
    $charset='cp1251';
  }else{
    $charset='UTF-8';
  }
  $action = $element['#action'] ? 'action="' . check_url($element['#action']) . '" ' : '';
  return '<form '. $action .' accept-charset="'.$charset.'" method="'. $element['#method'] .'" '. 'id="'. $element['#id'] .'"'. drupal_attributes($element['#attributes']) .">\n<div>". $element['#children'] ."\n</div></form>\n";

}

function theme_uc_webmoney_list($form){
$header = array(
 theme('table_select_header_cell'),
 t('WMType'), 
 t('Wallet'),
 t('Secret key'),
 t('Rate'),
 ''
);

  foreach (element_children($form) as $key) {
    $row = array();

    if (is_array($form[$key]['purse'])) {
      $row[] = drupal_render($form['check'][$key]);
      $row[] = drupal_render($form[$key]['edit']);
      $row[] = drupal_render($form[$key]['purse']);
      $row[] = drupal_render($form[$key]['secret_key']);
      $row[] = drupal_render($form[$key]['rate']);
      $row[] = drupal_render($form[$key]['configure']);

      $rows[] = $row;
    }
  }
  
  $output = theme('table', $header, $rows);
  $output .= drupal_render($form);
  return $output;
}

?>