<?php

function uc_gift_wrap_perm() {
  return array('manage gift wrap options');
}

/**
 * Implementation of hook_menu().
 */
function uc_gift_wrap_menu($may_cache) {
  if ($may_cache) {
      $items[] = array(
      'path' => 'admin/store/settings/checkout/gift_wrap',
      'title' => t('Gift Wrap settings'),
      'description' => t('Manage Gift Wrap options'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_gift_wrap_settings_form'),
      'access' => user_access('manage gift wrap options'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  return $items;
}

function uc_gift_wrap_settings_form_submit($form, $form_values) {
  variable_set('uc_gift_wrap_per_item', $form_values['per_item']);
  variable_set('uc_gift_wrap_charge', $form_values['charge']);
}


function uc_gift_wrap_settings_form() {
  $per_item = variable_get('uc_gift_wrap_per_item', 1);
  $charge = variable_get('uc_gift_wrap_charge', 3.00);
  $form['per_item'] = array(
    '#type' => 'checkbox',
    '#title' => t('Charge per item rather than per order'),
    '#default_value' => $per_item,
    '#weight' => '1'
  );
  $form['charge'] = array(
    '#type' => 'textfield',
    '#title' => t('Price per gift wrap'),
    '#default_value' => $charge,
    '#weight' => '2'
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => '3'
  );
  return $form;
}

/**
 * Implementation of hook_checkout_pane
 */
function uc_gift_wrap_checkout_pane() {
  
    $panes[] = array(
      'id' => 'up_uc_gift_wrap',
      'title' => t('Gift wrapping'),
      'desc' => t('Gift wrapping'),
	  '#collapsed' => TRUE,
      'callback' => 'uc_checkout_pane_uc_gift_wrap',
      'weight' => 6,
    );
    return $panes;
 
}


function uc_checkout_pane_uc_gift_wrap($op, &$arg1, $arg2) {
	
   switch ($op) {
   	
    case 'view':
    	
    	
    	
		$per_item = variable_get('uc_gift_wrap_per_item', 1);
        $charge = variable_get('uc_gift_wrap_charge', 3.00);
		$description = t('');
		$contents['gwcheck'] = array(
          '#type' => 'checkbox',
          '#title' => t('Add gift wrapping ($' . number_format($charge,2) . ($per_item ? ' per item' : '') . ')'),
          '#description' => t(''),
          '#default_value' => $arg1->gift_wrap['chk'],
        );
        $contents['gwtext'] = array(
          '#type' => 'textarea',
		  '#maxlength' => 200,
          '#cols' => 30,
		  '#rows' => 3,
          '#title' => t('Gift card message (optional)'),
          '#description' => t(''),
          '#default_value' => $arg1->gift_wrap['text'],
        );
		
		
        //print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
        
        return array('description' => $description, 'contents' => $contents);

		
		
		
		
		
// my changes	-----------------------------
	
  case 'review':
  	
		//print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
    	
  	
        $review[] = array('title' => t('gggift'), 'data' => $arg1->gift_wrap['text'], 'weight' => -10);
      	return $review;
      

		

			
  case 'process':
  		drupal_set_message('process Order-idddd 1 = ' . $arg1->order_id, 'error');
  		
  		

		$arg1->gift_wrap['chk'] = $arg2['gwcheck'];
		$arg1->gift_wrap['text'] = $arg2['gwtext'];
		
		
		
		//print '<PRE>';
    	//print_r($arg1);
    	//print '</PRE>';
    	
		return TRUE;
  }
}

function _uc_gift_wrap_save($order_id, $total_charge, $gift_text = '') {
  uc_order_line_item_add($order_id, 'gift_wrap', t('Gift wrapping'), $total_charge, 1);
  db_query("INSERT INTO {uc_gift_wrap} (order_id, gift_text) values(%d, '%s')", $order_id, $gift_text);
}

function _uc_gift_wrap_load($order_id) {
  $result = db_query("SELECT order_id, gift_text FROM {uc_gift_wrap} WHERE order_id = %d", $order_id);
  return db_fetch_object($result);
}

function _uc_gift_wrap_delete($order_id) {
  db_query("DELETE FROM {uc_order_line_items} WHERE order_id = %d AND type = 'gift_wrap'", $order_id);
  db_query("DELETE FROM {uc_gift_wrap} WHERE order_id = %d", $order_id);
}



/*
 *  Hook Order Funtions
 *  Called from uc_points_payment.inc hook_order
 */
 
 /**
 * Implementation of hook_line_item().
 */
function uc_gift_wrap_line_item() {
  $items[] = array(
    'id' => 'gift_wrap',
    'title' => t('Gift wrapping'),
    'weight' => 6,
    'stored' => true,
	'add_list' => TRUE,
    'default' => FALSE,
    'calculated' => TRUE,
    'display_only' => FALSE,
  );

  return $items;
}
 

/**
 * Implementation of hook_order().
 */
function uc_gift_wrap_order($op, &$arg1) {
  
  switch ($op) {
    case 'save':
    	
    	
    	
    	
    	drupal_set_message('order save = ' . $arg1->order_id, 'error');
    	$ord = uc_order_load($arg1->order_id);
    	
    	//print '<PRE>';
    	//print_r($ord);
    	//print '</PRE>';
    	
    	
    	
    	
	  //print_r($arg1); die();
	   _uc_gift_wrap_delete($arg1->order_id);
	   if ($arg1->gift_wrap['chk']) {
	     $per_item = variable_get('uc_gift_wrap_per_item', 1);
         $charge = variable_get('uc_gift_wrap_charge', 3.00);		
	     if ($per_item) {
		   //charge per item - count number of items in order
		   foreach ($arg1->products as $product) {
		     $total_charge += $product->qty * $charge;
		   }
		 } 
		 else {
		   $total_charge = $charge;
		 }	 
	     _uc_gift_wrap_save($arg1->order_id, $total_charge, $arg1->gift_wrap['text']);
	   }
	   break;
	   
	   
	 case 'load':
	 	drupal_set_message('order load = ' . $arg1->order_id, 'error');
	 	
	   if ($gift_wrap = _uc_gift_wrap_load($arg1->order_id)) {
	     $arg1->gift_wrap['text'] = $gift_wrap->gift_text;
		 $arg1->gift_wrap['chk'] = 1;
	   }
	   break;
	   
	   
	 case 'submit':
	 	
	 	drupal_set_message('order submit = ' . $arg1->order_id, 'error');
	 	
	   // add gift message as order comment so it can be seen on store admin order detail page
	   if ($gift_wrap = _uc_gift_wrap_load($arg1->order_id)) {
	     uc_order_comment_save($arg1->order_id, $arg1->uid, t('Gift message:') . '"' . $gift_wrap->gift_text . '"', 'order');
	   }
	   break;
	 
	 //case 'total':
	 case 'delete':
	 	drupal_set_message('order delete = ' . $arg1->order_id, 'error');
	 	
	   //clean up
	   _uc_gift_wrap_delete($arg1->order_id);
	   break;
  }
} 
 
?>