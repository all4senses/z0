<?php
// $Id: uc_flatrate.module,v 1.4.2.7 2008/07/29 22:22:40 rszrama Exp $

/**
 * @file
 * Shipping quote module that defines a flat shipping rate for each product.
 *
 * Coded by Lyle Mantooth
 */

/******************************************************************************
 * Drupal Hooks                                                               *
 ******************************************************************************/

/**
 * Implementation of hook_menu().
 */
function uc_flatrate_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'admin/store/settings/quotes/methods/flatrate',
      'access' => user_access('configure quotes'),
      'title' => t('Flat rate'),
      'callback' => 'uc_flatrate_admin_methods',
      'type' => MENU_LOCAL_TASK,
    );
  }
  else {
    $items[] = array('path' => 'admin/store/settings/quotes/methods/flatrate/'. arg(6),
      'access' => user_access('configure quotes'),
      'title' => t('Edit flat rate method'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_flatrate_admin_method_edit_form', arg(6)),
      'type' => MENU_CALLBACK,
    );
    $items[] = array('path' => 'admin/store/settings/quotes/methods/flatrate/'. arg(6) .'/delete',
      'access' => user_access('configure quotes'),
      'title' => t('Delete flat rate method'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('uc_flatrate_admin_method_confirm_delete', arg(6)),
      'type' => MENU_CALLBACK,
    );
  }

  return $items;
}

/**
 * Implementation of hook_form_alter().
 *
 * Add a form element for the shipping rate of a product.
 */
function uc_flatrate_form_alter($form_id, &$form) {
	
	
/*	
  $node = $form['#node'];
  $product_types = module_invoke_all('product_types');
  if (is_object($node) && $form_id == $node->type .'_node_form' && isset($form['base']['dimensions']) && in_array($node->type, $product_types)) {
    $result = db_query("SELECT mid, title, product_rate FROM {uc_flatrate_methods}");
    if (db_num_rows($result)) {
      $sign_flag = variable_get('uc_sign_after_amount', FALSE);
      $currency_sign = variable_get('uc_currency_sign', '$');
      $enabled = variable_get('uc_quote_enabled', array());
      $weight = variable_get('uc_quote_method_weight', array());
      $form['shipping']['flatrate'] = array('#type' => 'fieldset',
        '#title' => t('Flat shipping rates'),
        '#description' => t('Override the default shipping rate per product for each flat rate shipping method here. Enter -1 to revert to the default value.'),
        '#tree' => true,
        '#collapsible' => true,
        '#collapsed' => false,
        '#weight' => 0,
      );
      while ($method = db_fetch_object($result)) {
        $form['shipping']['flatrate'][$method->mid] = array('#type' => 'textfield',
          '#title' => $method->title,
          '#default_value' => $form['#node']->flatrate[$method->mid],
          '#description' => t('Default rate: %price', array('%price' => uc_currency_format($method->product_rate))),
          '#size' => 16,
          '#field_prefix' => $sign_flag ? '' : $currency_sign,
          '#field_suffix' => $sign_flag ? $currency_sign : '',
          '#weight' => $weight['flatrate_'. $method->mid],
        );
      }
    }
  }
  
*/  
  
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_flatrate_nodeapi(&$node, $op) {
	
	
/*	
  if (in_array($node->type, module_invoke_all('product_types'))) {
    switch ($op) {
      case 'insert':
      case 'update':
        if (is_array($node->flatrate)) {
          if (!$node->revision) {
            db_query("DELETE FROM {uc_flatrate_products} WHERE vid = %d", $node->vid);
          }
          foreach ($node->flatrate as $mid => $rate) {
            if ($rate !== '') {
              db_query("INSERT INTO {uc_flatrate_products} (vid, nid, mid, rate) VALUES (%d, %d, %d, %f)",
                $node->vid, $node->nid, $mid, $rate);
            }
          }
        }
      break;
      case 'load':
        $return = array('flatrate' => array());
        $result = db_query("SELECT mid, rate FROM {uc_flatrate_products} WHERE vid = %d", $node->vid);
        while ($rate = db_fetch_object($result)) {
          $return['flatrate'][$rate->mid] = $rate->rate;
        }
        $result = db_query("SELECT mid, product_rate FROM {uc_flatrate_methods}");
        while ($method = db_fetch_object($result)) {
          $rate = $return['flatrate'][$method->mid];
          if ($rate === null || $rate < 0) {
            $return['flatrate'][$method->mid] = $method->product_rate;
          }
        }
        return $return;
      break;
      case 'delete':
        db_query("DELETE FROM {uc_flatrate_products} WHERE nid = %d", $node->nid);
      break;
      case 'delete revision':
        db_query("DELETE FROM {uc_flatrate_products} WHERE vid = %d", $node->vid);
      break;
    }
  }
  
*/  
  
  
}

/******************************************************************************
 * Workflow-ng Hooks                                                          *
 ******************************************************************************/

/**
 * Implementation of hook_configuration().
 *
 * Connect the quote action with the quote event.
 */
function uc_flatrate_configuration() {
  $enabled = variable_get('uc_quote_enabled', array());
  $configurations = array();
  $action = workflow_ng_use_action('uc_quote_action_get_quote', array(
    '#label' => t('Fetch a shipping quote'),
  ));

  $result = db_query("SELECT mid, title FROM {uc_flatrate_methods}");
  while ($method = db_fetch_object($result)) {
    $configurations['uc_flatrate_get_quote_'. $method->mid] = array(
      '#label' => t('Shipping quote via @method', array('@method' => $method->title)),
      '#event' => 'get_quote_from_flatrate_'. $method->mid,
      '#module' => 'uc_flatrate',
      '#active' => $enabled['flatrate_'. $method->mid],
    );
    $configurations['uc_flatrate_get_quote_'. $method->mid] = workflow_ng_configure($configurations['uc_flatrate_get_quote_'. $method->mid], $action);
  }

  return $configurations;
}

/******************************************************************************
 * Übercart Hooks                                                             *
 ******************************************************************************/

/**
 * Implementation of Übercart's hook_shipping_method().
 */
function uc_flatrate_shipping_method() {
  $methods = array();

  $enabled = variable_get('uc_quote_enabled', array());
  $weight = variable_get('uc_quote_method_weight', array());
  $result = db_query("SELECT mid, title, label FROM {uc_flatrate_methods}");
  while ($method = db_fetch_object($result)) {
    $methods['flatrate_'. $method->mid] = array(
      'id' => 'flatrate_'. $method->mid,
      'module' => 'uc_flatrate',
      'title' => $method->title,
      'enabled' => $enabled['flatrate_'. $method->mid],
      'quote' => array(
        'type' => 'order',
        'callback' => 'uc_flatrate_quote',
        'accessorials' => array(
          $method->label,
        ),
      ),
      'weight' => $weight['flatrate_'. $method->mid],
    );
  }

  return $methods;
}

/******************************************************************************
 * Menu Callbacks                                                             *
 ******************************************************************************/

/**
 * List and compare all flatrate shipping quote methods.
 */
function uc_flatrate_admin_methods() {
  $output = '';

  $rows = array();
  $enabled = variable_get('uc_quote_enabled', array());
  $weight = variable_get('uc_quote_method_weight', array());
  $result = db_query("SELECT mid, title, label, base_rate, product_rate FROM {uc_flatrate_methods}");
  while ($method = db_fetch_object($result)) {
    $row = array();
    $row[] = check_plain($method->title);
    $row[] = check_plain($method->label);
    //$row[] = uc_currency_format($method->base_rate);
    $row[] = round($method->base_rate, 0);
    
// my changes -----------------------------------------    
    
    //$row[] = uc_currency_format($method->product_rate);
    $row[] = l(t('edit'), 'admin/store/settings/quotes/methods/flatrate/'. $method->mid .'/edit');
    $rows[] = $row;
  }
  if (count($rows)) {
    $header = array(t('Title'), t('Label'), t('Base rate, %'), /*t('Default product rate'),*/ t('Actions'));
    $output .= theme('table', $header, $rows);
  }
  $output .= l(t('Add a new flat rate shipping method.'), 'admin/store/settings/quotes/methods/flatrate/add');
  return $output;
}

/**
 * Configure the store default product shipping rates.
 */
function uc_flatrate_admin_method_edit_form($mid = 0) {
  $form = array();
  $sign_flag = variable_get('uc_sign_after_amount', FALSE);
  $currency_sign = variable_get('uc_currency_sign', '$');

  if (is_numeric($mid) && ($method = db_fetch_object(db_query("SELECT * FROM {uc_flatrate_methods} WHERE mid = %d", $mid)))) {
    $form['mid'] = array('#type' => 'value', '#value' => $mid);
  }
  $form['title'] = array('#type' => 'textfield',
    '#title' => t('Shipping method title'),
    '#description' => t('The name shown to distinguish it from other flatrate methods.'),
    '#default_value' => $method->title,
  );
  $form['label'] = array('#type' => 'textfield',
    '#title' => t('Line item label'),
    '#description' => t('The name shown to the customer when they choose a shipping method at checkout.'),
    '#default_value' => $method->label,
  );
  $form['base_rate'] = array('#type' => 'textfield',
    '#title' => t('Base price'),
    '#description' => t('The starting price for shipping costs.'),
    //'#default_value' => $method->base_rate,
    
    
    '#default_value' => round($method->base_rate, 0),
    '#size' => 4,
    
    
    
    
    
    //'#field_prefix' => $sign_flag ? '' : $currency_sign,
    //'#field_suffix' => $sign_flag ? $currency_sign : '',
    '#field_suffix' => '%',
  );
  
/*  
  $form['product_rate'] = array('#type' => 'textfield',
    '#title' => t('Default product shipping rate'),
    '#default_value' => $method->product_rate,
    '#size' => 16,
    '#field_prefix' => $sign_flag ? '' : $currency_sign,
    '#field_suffix' => $sign_flag ? $currency_sign : '',
  );

*/  
  
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
  $form['buttons']['delete'] = array('#type' => 'submit', '#value' => t('Delete'));

  return $form;
}

function uc_flatrate_admin_method_edit_form_validate($form_id, $form_values) {
  if ($form_values['op'] == t('Submit')) {
    if (!empty($form_values['base_rate']) && !is_numeric($form_values['base_rate'])) {
      form_set_error('base_rate', t('The base rate must be a numeric amount.'));
    }
    if (!empty($form_values['product_rate']) && !is_numeric($form_values['product_rate'])) {
      form_set_error('product_rate', t('The product rate must be a numeric amount.'));
    }
  }
}

function uc_flatrate_admin_method_edit_form_submit($form_id, $form_values) {
  if ($form_values['op'] == t('Delete')) {
    drupal_goto('admin/store/settings/quotes/methods/flatrate/'. $form_values['mid'] .'/delete');
  }
  if ($form_values['mid']) {
    db_query("UPDATE {uc_flatrate_methods} SET title = '%s', label = '%s', base_rate = %f, product_rate = %f WHERE mid = %d",
      $form_values['title'], $form_values['label'], $form_values['base_rate'], $form_values['product_rate'], $form_values['mid']);
    drupal_set_message("Flat rate shipping method was updated.");
  }
  else {
    $mid = db_next_id("{uc_flatrate_methods}_mid");
    db_query("INSERT INTO {uc_flatrate_methods} (mid, title, label, base_rate, product_rate) VALUES (%d, '%s', '%s', %f, %f)",
      $mid, $form_values['title'], $form_values['label'], $form_values['base_rate'], $form_values['product_rate']);
    $enabled = variable_get('uc_quote_enabled', array());
    $enabled['flatrate_'. $mid] = true;
    variable_set('uc_quote_enabled', $enabled);
    $weight = variable_get('uc_quote_method_weight', array());
    $weight['flatrate_'. $mid] = 0;
    variable_set('uc_quote_method_weight', $weight);
    drupal_set_message("Created and enabled new flat rate shipping method.");
  }
  return 'admin/store/settings/quotes/methods/flatrate';
}

function uc_flatrate_admin_method_confirm_delete($mid) {
  $form = array();
  $form['mid'] = array('#type' => 'value', '#value' => $mid);

  return confirm_form($form, t('Do you want to delete this shipping method?'),
    'admin/store/settings/quotes/methods/flatrate',
    t('This will remove the shipping method, workflow-ng configuration, and the
      product-specific overrides (if applicable). This action can not be undone.'),
    t('Delete'));
}

function uc_flatrate_admin_method_confirm_delete_submit($form_id, $form_values) {
  db_query("DELETE FROM {uc_flatrate_methods} WHERE mid = %d", $form_values['mid']);
  db_query("DELETE FROM {uc_flatrate_products} WHERE mid = %d", $form_values['mid']);
  db_query("DELETE FROM {workflow_ng_cfgs} WHERE name = '%s'", 'uc_flatrate_get_quote_by_'. $form_values['type'] .'_rate_'. $form_values['mid']);
  workflow_ng_clear_cache();
  $enabled = variable_get('uc_quote_enabled', array());
  unset($enabled['flatrate_'. $form_values['mid']]);
  variable_set('uc_quote_enabled', $enabled);
  $weight = variable_get('uc_quote_method_weight', array());
  unset($weight['flatrate_'. $form_values['mid']]);
  variable_set('uc_quote_method_weight', $weight);
  drupal_set_message('Flat rate shipping method deleted.');
  return 'admin/store/settings/quotes/methods/flatrate';
}









/******************************************************************************
 * Module Functions                                                           *
 ******************************************************************************/

/**
 * Standard callback to return a shipping rate via the flat rate method.
 *
 * @param $products
 *   The order's products.
 * @param $details
 *   Other order details including a shipping address.
 * @return
 *   A JSON object containing the shipping quote for the order.
 */
function uc_flatrate_quote($products, $details, $method) {
	
	
	
	$method = explode('_', $method['id']);
	$mid = $method[1];
	
	if ($method = db_fetch_object(db_query("SELECT * FROM {uc_flatrate_methods} WHERE mid = %d", $mid))) 
	{
		
		$rate = $method->base_rate;
		
		
		
		// my changes
		// ------------------------------------------------------
		
		
		global $user;
		
		// максимальный коэф доставки из продуктов в корзине, нужен для определения минимальной стоимости доставки
      	$max_d_factor_otdel = 0; 

 		$zp_default_set = zp_functions_get_zp_default_set();

		// посчитаем стоимость простой (не срочной) доставки для продуктов корзины

		foreach ($products as $product) {

			/*
			if (is_null($product->flatrate)) {
			$rate += $method->product_rate * $product->qty;
			}
			else {
			//$node = node_load($product->nid);
			$rate += $product->flatrate[$mid] * $product->qty;
			}

			*/


			// my changes ------------------------------------------------------------------------------------------------

			// для каждого продукта определим его коэффициент доставки
			// он должен быть задан в переменной $_SESSION[]



			//--------------------------------------------------------------------------

			// вычисляем коэффициент доставки
			// равный перемноженным коэффициентам страна*город*район*магазин*отдел(ы)*клиент-общий*клиент-по-всей-иерархии-от-отдела-до-страны
			// выясним всю последовательность до страны, затем тиды страны, города, района и магазина


			//$node_tid = db_result(db_query("SELECT tid from {term_node} WHERE nid = %d", $node->nid));
			$node_tids = taxonomy_node_get_terms_by_vocabulary($product->nid, 1);

			// определим терм ноды продукта
			foreach($node_tids as $node_tid)
				$node_tid = $node_tid->tid;

			// определим родителя терма данной ноды. Это будет как раз терм отдела, в котором продаётся этот продукт
			$node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid));
			$parent_otdel_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $node_tid));

			// ----------------------------------------------------------------------------------------

			// вот теперь выясним, определён ли для этого отдела коэффициент доставки в сессионной переменной
			// он сохраняется по номеру nid отдела

			// dobavliaem proverku, otkuda prishel zapros na pokaz producta... esli iz korziny - ne vichisliaem factor dostavki, tak kak tam ne pokazivaetsia cena - sokrashaem vriemia raschetov
			if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))
			//if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))
			{
				// задаём массив и первым элементом делаем терм первого отдела, в котором продаётся этот продукт
				$linage_tids = array($node_tid);

				//$linage_tids[] = $node_tid;
				//$save_node_tid = $node_tid;

				$count = 1;
				while(($node_tid = db_result(db_query("SELECT parent from {term_hierarchy} WHERE tid  = '%s'", $node_tid))) != 0)
				{
					$linage_tids[] = $node_tid;
					$count++;
				}


				// для примерного понимания...
				//$item_shop_tid = $linage_tids[$count-4]; // вариант город-район-магазин.
				//$item_rajon_tid = $linage_tids[$count-3]; // Третьим элементом в этом варианте становится район
				//$item_city_tid = $linage_tids[$count-2]; // при любом варианте город будет вторым элементом после страны
				//$item_country_tid = $linage_tids[$count-1];


				for($i = 0; $i <= $count-1; $i++)
				{
					// начинаем со второго элемента, предполагая, что вторым элементом идёт отдел, в котором находится продукт, потом следуют родительские отделы (если есть), затем магазин, район, город, страна... Страна = $count-1
					// формируем массив нодов с коэфффициентами доставки
					$d_f_nids[$i] = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$i]));

					$d_f_nid_titles[$i] = db_result(db_query("SELECT title from {node} WHERE nid = %d", $d_f_nids[$i]));

					// поле с фактором стоимости доставки во всех типах нод называется d_factor
					// соответственно, когда таких полей несколько (одинаковые в разных типах нодов), эти значения хранятся в таблице content_field_d_factor
					// а значение этой переменной содержится в поле field_d_factor_value таблицы которое можно вычислить по номеру ноды nid
					// формируем массив с коэффициентами стоимости доставки
					$d_f_vals[$i] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $d_f_nids[$i]));
				}

				// найдём номер ноды скрытой инфы пользователя
				// считаем, что работаем с текущим пользователем, поэтому и берём ид текущего
				// в принципе, можно потом сделать сложнее - определить пользователя текущей корзины и работать с ним (если админские права позволяю).
				
				$user_hi_nid = db_result(db_query("SELECT nid from {node} WHERE title = '%s'", 'u' . $user->uid . '-hi'));

				//drupal_set_message("user_hi_nid = $user_hi_nid");

				//$user_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $user_hi_nid));
				// дополняем массив с коэффициентами стоимости доствки общим коэффициентом конкретного клиента
				$d_f_vals[++$i] = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $user_hi_nid));



				// определим для конкретного клиента отличные от единицы коэффициенты для любимых магазинов, отделов и т.д. , в которых находится этот продукт
				// и затем добавим их в список коэффициентов для этого продукта (отдела, в котором содержится этот продукт, вообще-то)

				// структура сохранённой сессионной переменной для конкретного юзера

				/*
				$_SESSION['user_shops_data']
				$user_shops_data[$shop_tid] = array(
				't_name' => $result->r_text,
				//'tid' => $shop_tid, // tid выносим в ключ массива ($user_shops_data[$shop_tid])
				'nid' => $result->r_id,
				'price_factor' => $result->description,
				);
				*/

				//$user_shops_data = $_SESSION['user_shops_data'];
				$user_shops_data = zp_functions_get_user_shops_data();

				foreach($user_shops_data as $user_shops)
				{
					//$n = $user_shops['nid'];
					//$t = $user_shops['t_name'];
					//$f = $user_shops['price_factor'];
					//drupal_set_message("before df_user n = $n, t = $t, f = $f");

					if(in_array($user_shops['nid'], $d_f_nids))
					{
						$d_f_vals[++$i] = $user_shops['price_factor'];

						//$n = $user_shops['nid'];
						//$t = $user_shops['t_name'];
						//$f = $user_shops['price_factor'];
						//drupal_set_message("after df_user n = $n, t = $t, f = $f");
					}
				}



				/*
				foreach($linage_tids as $key => $value)
				drupal_set_message("linage_tids key = $key, val = $value");


				foreach($d_f_nids as $key => $value)
				drupal_set_message("d_f_nid key = $key, val = $value");

				foreach($d_f_nid_titles as $key => $value)
				drupal_set_message("d_f_nid_title key = $key, val = $value");

				foreach($d_f_vals as $key => $value)
				drupal_set_message("df key = $key, val = $value");
				*/


				// перемножаем все коэффициенты и получаем финальный коэффициент
				$final_d_f = 1;
				
				foreach($d_f_vals as $d_f_val)
					$final_d_f *= $d_f_val;

				//drupal_set_message(" ----final_d_f = $final_d_f");
				//drupal_set_message("---------------------------------------------------");

				/*
				// найдём номера нодов
				$country_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-1]));
				$city_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-2]));
				$rajon_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-3]));
				$shop_nid = db_result(db_query("SELECT nid from {term_node} WHERE tid = %d", $linage_tids[$count-4]));

				// country_d_factor
				$country_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $country_nid));
				$city_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $city_nid));
				$rajon_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $rajon_nid));
				$shop_d_f = db_result(db_query("SELECT field_d_factor_value from {content_field_d_factor} WHERE nid = %d", $shop_nid));
				*/




				//получим из базы значение процента, который определяет стоимость доставки по умолчанию
				//стоимость доставки товара по умолчанию равна стоимости товара, умноженной на процент по умолчанию
				//и затем умноженной на только что посчитанный финальный коэффициент доставки

				// процент доставки по умолчанию берётся с поля типа d_percents (поле field_d_percents_value в таблице content_type_zp_default_set)

				// в этом поле значение содержится в виде процента. Поэтому чтобы получить коэффициент, делим это значение на 100.

				//$zp_default_set = array();



				/*
				// загружаем из базы массив с переменными по умолчанию
				$zp_default_set = $_SESSION['zp_default_set'];

				// если массив пока не определён или в нём не определён параметр nid (номер ноды с параметрами по умолчанию),
				// находим параметр nid и добавляем его в массив
				if(!$zp_default_set OR !$zp_default_set['nid'])
				$zp_default_set['nid'] = db_result(db_query("SELECT nid from {node} WHERE type = '%s'", 'zp_default_set'));
				// делим значение процента доставки на 100 и получаем коэффициент
				if(!$zp_default_set['d_f'])
				{
				// добавляем пустую строку к числу, тем самым преобразуя это число в строку, чтобы поменьше знаков сохранять в базе (без этого сохраняло 20 знаков после запятой почему-то, даже с функцией round)
				// заодно округляем до 2 знаков после запятой
				$zp_default_set['d_f'] = round(db_result(db_query("SELECT field_d_percents_value from {content_type_zp_default_set} WHERE nid = %d", $zp_default_set['nid'])) / 100, 2) . '';
				// сохраняем значение коэффициента доставки по умолчанию в базе (чтобы заново не вычислять для каждого продукта)
				$_SESSION['zp_default_set'] = $zp_default_set;
				}
				*/

				



				// окончательный коэффициент доставки равен коэффициенту по умолчанию $zp_default_set['d_f'],
				// умноженному на перемноженные все остальные коэффициенты доставки для данного юзера $final_d_f
				// заодно округляем до 2 знаков после запятой
				$d_factor_otdel = round($final_d_f * $zp_default_set['d_f'], 2) . '';

				// сохраним коэффициент доставки для данного отдела в сессионной переменной
				$_SESSION['df' . $parent_otdel_nid] = $d_factor_otdel;

			} // end of if(!($d_factor_otdel = $_SESSION['df' . $parent_otdel_nid]))


			$dost_price = $product->price * $product->qty * $d_factor_otdel;
			$dost_price_total += $dost_price;
			
			// необходимо только для выяснения, больше ли общая сумма заказа минимальной сумме заказа по умолчанию
			// ВНИМАНИЕ! Тут могу юыть не учтены опции.... но может быть они уже и входят в стоимость товара, тогда всё в порядке
			$subtotal += $product->price * $product->qty + $dost_price;

			// ---------------------------------------------------------------------------
			// найдём максимальный коэффициент доставки среди всех товаров
            // и на основе него вычислим коэффициент для минимальной стоимости доставки
            // которую определим как произведение минимальной стоимости доставки по умолчанию на этот коэффициент
            if($max_d_factor_otdel < $d_factor_otdel)
            	$max_d_factor_otdel = $d_factor_otdel;
            	



		} // end of  foreach ($products as $product)

		
		
		
		// если общая стоимость заказа меньше минимальной суммы заказа для этого магазина и клиента
      	// с учётом максимального коэффициента доставки товаров этой корзины
      	// то заменяем стоимость доставки на минимальную стоимость доставки, умноженную на максимальный коэфициент доставки
      
      	// найдём минимальную стоимость доставки по умолчанию
      	$zp_default_set = zp_functions_get_zp_default_set();
      
      	$max_d_factor_otdel =  $max_d_factor_otdel * 10;

      	$c_shop_tids = zp_functions_get_cart_shop_data(); // параметры не передаём, так что они устанавливаются в фунцкии по текущему юзеру
      
      	if($subtotal < $c_shop_tids['shop_min_sum'])
      	{

      		// изменяем стоимость доставки на миниманую по умолчанию и корректируем общую стоимость
      		//$subtotal = $subtotal - $dost_price_total;
      		$dost_price_total = $zp_default_set['min_dost_price_default']*$max_d_factor_otdel;
      		//$subtotal = $subtotal + $dost_price_total;
      	
      	}
      	
      	

		$rate = $dost_price_total + $dost_price_total * ($rate / 100);




		$quotes[] = array('rate' => $rate, 'format' => uc_currency_format($rate), 'option_label' => check_plain($method->label)); //. '<br>(обычная доставка + ещё ' . round($method->base_rate,0) . '% от неё)');
	}

	return $quotes;
}
