<?php
/* $Id: whizzywig.module,v 1.12 2007/11/07 14:56:48 svendecabooter Exp $ */

/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function whizzywig_help($section='') {
  $output = '';
  switch ($section) {
    case 'admin/settings/help#description':
      $output = t("Enables the use of the Whizzywig WYSIWYG editor.");
      break;
    case "admin/help#whizzywig":
      $output = '<p>'. t("Enables the use of the Whizzywig WYSIWYG editor.") .'</p>';
      break;
    case "admin/settings/whizzywig/custombuttons":
      $output = t("<p>You can add extra buttons to the Whizzywig editor on this page. 
      This allows you to specify HTML code and tags for your users to use. 
      The instructions below tell you how to add a custom button. 
      In this example we want to add a button that transforms selected text into superscript, by using the &lt;sup&gt; tags.</p>
      <ul>
        <li>Specify a name for your custom button in the table below. Don't use spaces or special characters. Example: <em>sup</em></li>
        <li>Specify the tag that should be provided by your custom button in the next column. You shouldn't specify the closing tag.
        Example: <em>&lt;sup&gt;</em></li>
        <li>If you save this page, the button will be available in the 'Toolbar settings' on the 'Settings' tab. 
        Just add it to the button list. Note: This will only work if you chose the option 'As specified below:' for the toolbar.
        It will not work when you have selected 'All'.</li>
        <li>Optionally, you can supply an image to be used for this custom button. 
        Create a file named '&lt;name&gt;.gif' in the buttons directory of the whizzywig module folder. 
        Example: <em>sup.gif</em></li>
      </ul>
      Note: the Tag field can also have tags with parameters, 
      for example <em>&lt;span style=\"color:red;\"&gt;</em> will give selected text a red color.
      ");
      break;
    case "admin/settings/whizzywig":
      $output = "<p><strong>". t('Note') . ":</strong> ";
      $output .= t("For the editor to work properly, it is recommended to configure the HTML filter on the !filterpage 
      to allow the HTML tags that are being used by the Whizzywig editor.",
        array('!filterpage' => l(t('Input formats settings page'), 'admin/settings/filters'))
      );
      $output .= "</p>";
      break;      
  }
  return $output;
}

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the module
 */
function whizzywig_perm() {
  return array('use whizzywig editor', 'administer whizzywig');
}

/**
 * Implementation of hook_menu().
 */
function whizzywig_menu($may_cache) {
  if ($may_cache) {
    $items[] = array(
    'path' => 'admin/settings/whizzywig',
    'title' => t('Whizzywig'),
    'callback' => 'drupal_get_form',
    'callback arguments' => array('whizzywig_settings_form'),
    'access' => user_access('administer whizzywig'),
    'description' => t("Enables the use of the Whizzywig WYSIWYG editor."),
    );
    $items[] = array('path' => 'admin/settings/whizzywig/settings',
      'title' => t('Settings'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );    
    $items[] = array(
      'path' => 'admin/settings/whizzywig/custombuttons', 
      'title' => t('Custom buttons'),
      'callback' => 'drupal_get_form', 
      'callback arguments' => array('whizzywig_settings_custombuttons'),
      'access' => user_access('administer whizzywig'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
    );    
  }
  return $items;
}

/**
 *  Generates the Whizzywig settings page
 */
function whizzywig_settings_form() {
  _whizzywig_settings_status_check();
  // Settings form
  $form['whizzywig_general'] = array(
  '#type' => 'fieldset',
  '#title' => t('General settings'),
  '#collapsible' => TRUE,
  '#collapsed' => FALSE,
  );
  $form['whizzywig_general']['whizzywig_xhtml'] = array(
  '#type' => 'checkbox',
  '#title' => t('Use xHTML markup'),
  '#default_value' => (_whizzywig_xhtml() == true)?'0':variable_get("whizzywig_xhtml", '0'),
  '#description' => t('Choose whether xhtml markup should be enabled or not. If this option is disabled, the xhtml.js file could not be found. Download it from the !downloadpage',
  array(
  '!downloadpage' => l(t('Whizzywig download page'), 'http://www.unverse.net/whizzywig-download.html'),
  )),
  '#disabled' => _whizzywig_xhtml(),
  );
  $form['whizzywig_general']['whizzywig_imce'] = array(
  '#type' => 'checkbox',
  '#title' => t('Use IMCE browser'),
  '#default_value' => (module_exists('imce') == true)?variable_get("whizzywig_imce", '0'):'0',
  '#description' => t('If checked, IMCE module will be used for image browsing. If this option is disabled, you need to enable the IMCE module. Download it from the !downloadpage',
  array(
  '!downloadpage' => l(t('ICME project page'), 'http://drupal.org/project/imce'),
  )),
  '#disabled' => !module_exists('imce'),
  );   
  $form['whizzywig_general']['whizzywig_editor_width'] = array(
  '#type' => 'textfield',
  '#title' => t('Editor width'),
  '#default_value' => variable_get('whizzywig_editor_width', '100%'),
  '#description' => t("Specify the width of the Whizzywig editor. This can be in any format (%,px,em,ex,...)"),
  );  
  $form['whizzywig_general']['whizzywig_editor_height'] = array(
  '#type' => 'textfield',
  '#title' => t('Editor height'),
  '#default_value' => variable_get('whizzywig_editor_height', 0),
  '#description' => t("Specify the height of the Whizzywig editor. This can be in any format (%,px,em,ex,...)"),
  );

  $form['whizzywig_toolbar'] = array(
  '#type' => 'fieldset',
  '#title' => t('Toolbar settings'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
  );
  $form['whizzywig_toolbar']['whizzywig_toolbar_buttons'] = array(
  '#type' => 'radios',
  '#title' => t('Buttons to show on toolbar'),
  '#default_value' => variable_get('whizzywig_toolbar_buttons', 0),
  '#options' => array(
  t('All'),
  t('As specified below:')),
  '#suffix' => _whizzywig_settings_toolbar_js(),
  );
  $form['whizzywig_toolbar']['whizzywig_toolbar_buttons_list'] = array(
  '#type' => 'textarea',
  '#default_value' => variable_get('whizzywig_toolbar_buttons_list', ''),
  '#description' => t("Specify the names of the buttons to show on the toolbar. They will appear in order. Use the | character to separate button groups."),
  '#prefix' => _whizzywig_settings_toolbar(),
  );

  $form['whizzywig_visibility'] = array(
  '#type' => 'fieldset',
  '#title' => t('Visibility settings'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
  );
  $form['whizzywig_visibility']['whizzywig_visibility_id'] = array(
  '#type' => 'radios',
  '#title' => t('Filter visibility based on textarea IDs'),
  '#default_value' => variable_get('whizzywig_visibility_id', 0),
  '#options' => array(
  t("Don't show Whizzywig editor on textareas with IDs mentioned below:"),
  t("Only show Whizzywig editor on textareas with IDs mentioned below:")),
  );
  $form['whizzywig_visibility']['whizzywig_visibility_id_val'] = array(
  '#type' => 'textarea',
  '#default_value' => variable_get('whizzywig_visibility_id_val', ''),
  '#description' => t("Specify the textarea IDs for this rule. Put one ID per line."),
  );
  
  $form['whizzywig_visibility']['whizzywig_visibility_path'] = array(
  '#type' => 'radios',
  '#title' => t('Filter visibility based on Drupal paths'),
  '#default_value' => variable_get('whizzywig_visibility_path', 0),
  '#options' => array(
  t("Don't show Whizzywig editor on paths mentioned below:"),
  t("Only show Whizzywig editor on paths mentioned below:")),
  );
  $form['whizzywig_visibility']['whizzywig_visibility_path_val'] = array(
  '#type' => 'textarea',
  '#default_value' => variable_get('whizzywig_visibility_path_val', ''),
  '#description' => t("Specify the paths for this rule. Put one path per line. You can use * as wildcard character"),
  );  
  
  $form['whizzywig_addon'] = array(
  '#type' => 'fieldset',
  '#title' => t('Optional addons'),
  '#collapsible' => TRUE,
  '#collapsed' => TRUE,
  '#description' => t('You can configure optional addons for the Whizzywig editor here. These optional files can be downloaded from the !link',
    array(
      '!link' => l(t('Whizzywig download page'), 'http://www.unverse.net/whizzywig-download.html'),
    )
  ),
  );
  $form['whizzywig_addon']['whizzywig_style'] = array(
  '#type' => 'textfield',
  '#title' => t('Stylesheet'),
  '#default_value' => variable_get('whizzywig_style', ''),
  '#description' => t("Specify the filename of the stylesheet you want Whizzywig to use. This file should be available in the whizzywig folder of the module (where whizzywig.js can also be found). You can download simple.css from !link as an example. Provide the full filename with extension, eg. simple.css.",
    array(
      '!link' => l(t('Whizzywig download page'), 'http://www.unverse.net/whizzywig-download.html'),
    )
  ),
  ); 

  $form['whizzywig_addon']['whizzywig_lang'] = array(
  '#type' => 'textfield',
  '#title' => t('Language file'),
  '#default_value' => variable_get('whizzywig_lang', ''),
  '#description' => t("Specify the filename of the language file you want Whizzywig to use. This file should be available in the whizzywig folder of the module (where whizzywig.js can also be found). You can download language files from !link. Provide the full filename with extension, eg. deutsch.js.",
    array(
      '!link' => l(t('Whizzywig download page'), 'http://www.unverse.net/whizzywig-download.html'),
    )
  ),
  );  
  return system_settings_form($form);
}

/**
 * Implementation of hook_elements() to show the Whizzywig editor when a textarea is loaded
 */
function whizzywig_elements() {
  if (user_access('use whizzywig editor')) {
    $type['textarea'] = array(
    '#process' => array(
    'whizzywig_change_textarea' => array()
    ),
    );
  }
  return $type;

}

/**
 *  Modify the textarea to show Whizzywig editor if certain conditions are met. 
 */
function whizzywig_change_textarea($element) {
  if (_whizzywig_cck_check($element['#name']) && _whizzywig_validate_element_id($element["#id"]) && _whizzywig_validate_element_path()) {
    // add the Whizzywig js library
    drupal_add_js(drupal_get_path('module', 'whizzywig') .'/whizzywig/whizzywig.js');
    
    //disable resize script
    $element['#resizable'] = FALSE;
    
    //set the width & height of the textarea, so whizzywig can inherit this
    $editor_width = variable_get('whizzywig_editor_width', '100%');
    $editor_height = variable_get('whizzywig_editor_height', 0);
    if ($editor_height != 0) {
      // set both
      $element['#attributes'] = array('style' => "width: $editor_width; height: $editor_height;");
    }
    else{
      // only set width
      $element['#attributes'] = array('style' => "width: $editor_width;");
    }

    // optionally enable a custom stylesheet for the editor
    if (variable_get('whizzywig_style', '') != '') {
      $csspath = base_path() . drupal_get_path('module', 'whizzywig') .'/whizzywig/'. variable_get('whizzywig_style', '');
      $css = "cssFile = \"$csspath\"";   
    }

    // optionally enable the xhtml JavaScript
    if (variable_get("whizzywig_xhtml", '0') == 1) {
      drupal_add_js(drupal_get_path('module', 'whizzywig') .'/whizzywig/xhtml.js');
    }
    
    // optionally add a translation file
    if (variable_get('whizzywig_lang', '') != '') {
      drupal_add_js(drupal_get_path('module', 'whizzywig') .'/whizzywig/'. variable_get('whizzywig_lang', ''));
    }
    
    // optionally use IMCE as file browser (if module is available)
    if (variable_get("whizzywig_imce", '0') == 1) {
      $imcepath = url('imce/browse');
      $imce_js = "imageBrowse = \"$imcepath\"\nlinkBrowse = \"$imcepath\"";
      // provide extra JS funtion to pass back the selected img path to Whizzywig.
      $element['#prefix'] .= "\n<script type=\"text/javascript\">
          function popWhizzImceFinish(path, w, h, s, imceWin) {
            var txtid = imceWin.parent.imceVar.targetWin.idTa;
            var url = 'if_url' + txtid;
            imceWin.opener.document.getElementById(url).value = path;
            var linkurl = 'lf_url' + txtid;
            imceWin.opener.document.getElementById(linkurl).value = path;
            imceWin.close();          
          }
        </script>";
    }
    
    // define which buttons will appear on the toolbar and their order + get the path for the buttom images
    $buttons = (variable_get('whizzywig_toolbar_buttons', 0) == 1)?variable_get('whizzywig_toolbar_buttons_list', ''):'all';
    $buttonpath = base_path() . drupal_get_path('module', 'whizzywig') .'/whizzywig/buttons/';    
    
    // add custom buttons to the editor
    $custombtn_arr = variable_get("whizzywig_custombuttons", NULL);
    if (!empty($custombtn_arr)) {
      foreach ($custombtn_arr as $key => $val) {
        // check if button is in buttonlist
        $btnname = $val['btnname'];
        $btnval = $val['btnvalue'];
        if (strpos($buttons, $btnname) !== false) {
          $custombtn_buts .= "$btnname ";
          $custombtn_dobut .= "dobut['$btnname'] = '$btnval';". PHP_EOL;
        }
      }
      $custombtn_decl = "buts = '$custombtn_buts';". PHP_EOL;
      $custombtn_decl .= $custombtn_dobut;
    }
    
    // initialize Whizzywig   
   $element['#suffix'] .= "\n<script type=\"text/javascript\">
      buttonPath = \"$buttonpath\"; //directory holding button images
      $css
      $imce_js
      $custombtn_decl
      makeWhizzyWig(\"". $element['#id'] ."\", \"$buttons\");
      </script>";
    
  }
  return $element;
}

function whizzywig_settings_custombuttons() {
  $data = variable_get("whizzywig_custombuttons", NULL);
  // initialize empty last row
  $data[] = array('btnname' => '', 'btnvalue' => '');

  $form['whizzywig_custombuttons'] = array('#tree' => TRUE, );
  foreach ($data as $key => $val) {
    $form['whizzywig_custombuttons'][$key]['btnname'] = array(
      '#type' => 'textfield',
      '#default_value' => $val['btnname'],
      '#size' => 20,
      '#maxlength' => 20,
    );
    $form['whizzywig_custombuttons'][$key]['btnvalue'] = array(
      '#type' => 'textfield',
      '#default_value' => $val['btnvalue'],
      '#size' => 50,
      '#maxlength' => 255,
    );
    $form['whizzywig_custombuttons'][$key]['delete'] = array(
      '#type' => 'checkbox',
      '#return_value' => 1,
      '#default_value' => 0,
    );
  }
  $form['buttons']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration') );
  $form['buttons']['reset'] = array('#type' => 'submit', '#value' => t('Reset to defaults') );

  return $form;
}

function whizzywig_settings_custombuttons_submit($form_id, $form_values) {
  // unset any thing that was deleted
  foreach ($form_values['whizzywig_custombuttons'] as $key => $val) {
    if ($val['delete'] == '1' || $val['btnname'] == '') {
      unset($form_values['whizzywig_custombuttons'][$key]);
    }
  }
  system_settings_form_submit($form_id, $form_values);
  drupal_goto('admin/settings/whizzywig/custombuttons');
}

function theme_whizzywig_settings_custombuttons(&$form) {    
    foreach (element_children($form['whizzywig_custombuttons']) as $key) {
      $row = array();
      if (is_array($form['whizzywig_custombuttons'][$key]['btnname'])) {
        $row[] = drupal_render($form['whizzywig_custombuttons'][$key]['btnname']);
        $row[] = drupal_render($form['whizzywig_custombuttons'][$key]['btnvalue']);
        $row[] = drupal_render($form['whizzywig_custombuttons'][$key]['delete']);
      }
      $rows[] = $row;
    }
    $header = array(t('Name'), t('Tag'), t('Delete'));
    $output = theme('table', $header, $rows);
  $output .= drupal_render($form);

  return $output;
}

/*
 * Validation against textarea ID filters. 
 */
function _whizzywig_validate_element_id($id) {
  $valid = false;
  // when returned valid, the Whizzywig editor will be shown
  $values = variable_get('whizzywig_visibility_id_val', '');
  $values_arr = preg_split('/\s*\n/', $values);
  if (variable_get('whizzywig_visibility_id', 0) == 0) {
    // exclude some textfields that we need on the settings page from showing the editor
    array_push($values_arr, 'edit-whizzywig-visibility-id-val');
    array_push($values_arr, 'edit-whizzywig-visibility-path-val');  
    array_push($values_arr, 'edit-whizzywig-toolbar-buttons-list');  
    // don't show editor if id is found in values
    if (!in_array($id, $values_arr)) {
      $valid = true;
    }
  }
  else{
    // only show editor if id is found in values
    if (in_array($id, $values_arr)) {
      $valid = true;
    }
  }
  return $valid;
}

/*
 * Validation against path filters. 
 */
function _whizzywig_validate_element_path() {
  $valid = false;
  $curr_path = drupal_get_path_alias($_GET['q']);
  // when returned valid, the Whizzywig editor will be shown
  $paths = variable_get('whizzywig_visibility_path_val', '');
  if (variable_get('whizzywig_visibility_path', 0) == 0) {
    // don't show editor if path is found in values
    // regex found in block module
    $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($paths, '/')) .')$/';
    if (!preg_match($regexp, $curr_path)) {
      $valid = true;
    }
  }
  else{
    // only show editor if path is found in values
    $regexp = '/^('. preg_replace(array('/(\r\n?|\n)/', '/\\\\\*/', '/(^|\|)\\\\<front\\\\>($|\|)/'), array('|', '.*', '\1'. preg_quote(variable_get('site_frontpage', 'node'), '/') .'\2'), preg_quote($paths, '/')) .')$/';
    if (preg_match($regexp, $curr_path)) {
      $valid = true;
    }
  }
  return $valid;
}

/*
 * Status check for Whizzywig settings page
 */
function _whizzywig_settings_status_check() {
  // check if whizzywig.js editor is added
  $whizzywig_file = drupal_get_path('module', 'whizzywig') .'/whizzywig/whizzywig.js';
  if (!file_exists($whizzywig_file)) {
    drupal_set_message(
    t('The Whizzywig javascript file was not found. Please go to the !link to download the latest version of whizzywig.js, and extract the file in the correct folder. See README.TXT for more information.',
    array(
    '!link' => l(t('Whizzywig download page'), 'http://www.unverse.net/whizzywig-download.html'),
    )
    ), 'error'
    );
  }
}

/**
 * Check whether the xhtml.js file is available
 * @return bool
 */
function _whizzywig_xhtml() {
  $js_file = drupal_get_path('module', 'whizzywig') .'/whizzywig/xhtml.js';
  return (!file_exists($js_file));
}

/*
 * Generate script for Whizzywig toolbar creation in settings
 */
function _whizzywig_settings_toolbar_js() {
  return "\n<script type=\"text/javascript\">
    function addToToolbar(txt){
       var curText= $(\"#edit-whizzywig-toolbar-buttons-list\").val(); 
       $(\"#edit-whizzywig-toolbar-buttons-list\").val(curText + ' ' + txt);
    }
    </script>\n"; 
}

/*
 * Generate the toolbar buttons for the Whizzywig settings page
 */
function _whizzywig_settings_toolbar() {
  $buttonspath = base_path() . drupal_get_path('module', 'whizzywig') .'/whizzywig/buttons/';
  $output = '<div><strong>'. t('Add buttons') .':</strong> ';
  foreach (_whizzywig_buttonlist() as $btn) {
    $path = $buttonspath . $btn .'.gif';
    $output .= "<a href=\"javascript:addToToolbar('$btn');\"><img src=\"$path\" alt=\"$btn\" /></a>";
  }
  $output .= "<br /> <strong>". t('Add lists') .":</strong> ";
  foreach (_whizzywig_selectlist() as $sel) {
    $output .= "<a href=\"javascript:addToToolbar('$sel');\">$sel</a> ";
  }
  $custombtn_arr = variable_get("whizzywig_custombuttons", NULL);
  if (!empty($custombtn_arr)) {
    $output .= "<br /> <strong>". t('Add custom buttons') .":</strong> ";
    foreach ($custombtn_arr as $key => $val) {
      $btnname = $val['btnname'];
      $output .= "<a href=\"javascript:addToToolbar('$btnname');\">$btnname</a> ";
    }
  }
  $output .= "<br /> <strong>". t('Add toolbar layout item') .":</strong> ";
  $output .= "<a href=\"javascript:addToToolbar('|');\">separator</a> ";
  $output .= "<a href=\"javascript:addToToolbar('newline');\">newline</a>";  
  $output .= '</div>';
  return $output;
}
/*
 * List of buttons to show for toolbar settings
 */
function _whizzywig_buttonlist() {
  return array("bold", "italic", "underline", "left", "center", "right", "number", "bullet", "indent", "outdent", "undo", "redo", "color", "hilite", "rule", "link", "image", "table", "clean", "html", "spellcheck",
  );
}

/*
 * List of selects (dropdownlists) to show for toolbar settings
 */
function _whizzywig_selectlist() {
  return array("fontname", "fontsize", "formatblock",
  );
}

/*
 * Check if the textarea is a CCK field, and if so, check if it's not a plaintext field
 * @return: true if textfield is a CCK field and allows rich text editing
 */
function _whizzywig_cck_check($name) {
  if(module_exists('content')) {
    $richtext = true;
    if (preg_match('/^(field_\w+)/', $name, $matches)) { // its a CCK field
      $field = content_fields($matches[0]);
      if($field['text_processing'] == 0) {
        $richtext = false;
      }
    } 
    return $richtext;  
  }
  else {
    return true;
  } 
}
